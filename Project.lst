Microsoft (R) Macro Assembler Version 14.16.27027.1	    06/15/19 19:17:23
jogo.asm						     Page 1 - 1


				; Implementação do jogo Ganso Attack!! em assembly pelos alunos
				; Matheus de Brito Soares Porto RA: 744348
				; Vitor Hugo Guilherme          RA: 744359
				; Da disciplina Arquitetura e Organização de Computadores 2 - DC- UFSCar
				; Professor: Dr. Luciano Neres

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				;Contadores de tempo para execução dos procedimentos do jogo
 00000000 00000000		contadorTempo DWORD 0
 00000004 00000000		contadorObstaculo DWORD 0
 00000008 00000000		contadorPulo DWORD 0 
 0000000C 00000000		contadorAgacha DWORD 0

				;constantes utilizadas no desenho da moldura
 = 00000069			LARGURA = 105
 = 0000001D			ALTURA = 29

				;Variáveis auxiliares para impressão e exclusão de objetos da tela
 00000010 00			PosY BYTE ?
 00000011 00			PosX BYTE ?
 00000012 00			larguraO BYTE ?
 00000013 00			alturaO BYTE ?

 00000014 01			statusGanso BYTE 1 ; 0 = Agachado, 1 = em pé, 2 = pulando

				;Tamanho dos desenhos
 = 00000005			LARGURA_OBJ1 = 5
 = 00000003			ALTURA_OBJ1 = 3
 = 00000005			LARGURA_OBJ2 = 5
 = 00000003			ALTURA_OBJ2 = 3
 = 0000000C			LARGURA_GANSO = 12
 = 00000009			ALTURA_GANSO = 9
 = 00000007			ALTURA_GANSO_AGACHADO = 7
				;Posição no eixo Y dos desenhos
 = 00000014			Y_GANSO_EM_PE = 20
 = 0000000F			Y_GANSO_PULANDO =  15
 = 00000016			Y_GANSO_AGACHADO = 22
 = 0000001A			Y_OBSTACULO1 = 26
 = 00000013			Y_OBSTACULO2 = 19
				;Posição do score
 = 0000004D			X_SCORE = 77
 = 00000005			Y_SCORE = 5

				;Fila de posição dos obstáculos
 00000015  00000007 [		PosObs1 BYTE 7 DUP(?)
	    00
	   ]
 0000001C  00000007 [		PosObs2 BYTE 7 DUP(?)
	    00
	   ]
 00000023 00			CtrlObs1 BYTE 0			;Posições finais das filas
 00000024 00			CtrlObs2 BYTE 0

				;Placar e pontuação
 00000025 20 20 20 20 53	Score BYTE       "    SCORE: ",0
	   43 4F 52 45 3A
	   20 00
 00000031 4E 4F 56 4F 20	NovoRecorde BYTE "NOVO RECORDE: ",0
	   52 45 43 4F 52
	   44 45 3A 20 00
 00000040 00000000		Pontos DWORD 0
 00000044 00000000		Recorde DWORD 0

				; Logo do jogo
 00000048 20 20 20 20 20	logo BYTE "                       ____                            _   _   _             _    _ _ ",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 20 20 20 5F
	   20 20 20 5F 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 20 20
	   20 20 5F 20 5F
	   20 0A 0D
 000000A0  09 20 20 20 20		 BYTE "	              / ___| __ _ _ __  ___  ___      / \ | |_| |_ __ _  ___| | _| | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   2F 20 5F 5F 5F
	   7C 20 5F 5F 20
	   5F 20 5F 20 5F
	   5F 20 20 5F 5F
	   5F 20 20 5F 5F
	   5F 20 20 20 20
	   20 20 2F 20 5C
	   20 7C 20 7C 5F
	   7C 20 7C 5F 20
	   5F 5F 20 5F 20
	   20 5F 5F 5F 7C
	   20 7C 20 5F 7C
	   20 7C 20 7C 0A
	   0D
 000000F1  09 20 20 20 20		 BYTE "	             | |  _ / _` | '_ \/ __|/ _ \    / _ \| __| __/ _` |/ __| |/ / | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 20 5F
	   20 2F 20 5F 60
	   20 7C 20 27 5F
	   20 5C 2F 20 5F
	   5F 7C 2F 20 5F
	   20 5C 20 20 20
	   20 2F 20 5F 20
	   5C 7C 20 5F 5F
	   7C 20 5F 5F 2F
	   20 5F 60 20 7C
	   2F 20 5F 5F 7C
	   20 7C 2F 20 2F
	   20 7C 20 7C 0A
	   0D
 00000142  09 20 20 20 20		 BYTE "	             | |_| | (_| | | | \__ \ (_) |  / ___ \ |_| || (_| | (__|   <|_|_|",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 5F 7C 20
	   7C 20 28 5F 7C
	   20 7C 20 7C 20
	   7C 20 5C 5F 5F
	   20 5C 20 28 5F
	   29 20 7C 20 20
	   2F 20 5F 5F 5F
	   20 5C 20 7C 5F
	   7C 20 7C 7C 20
	   28 5F 7C 20 7C
	   20 28 5F 5F 7C
	   20 20 20 3C 7C
	   5F 7C 5F 7C 0A
	   0D
 00000193  09 20 20 20 20		 BYTE "	              \____|\__,_|_| |_|___/\___/  /_/   \_\__|\__\__,_|\___|_|\_(_|_)",0ah, 0dh, 0 
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   7C 5C 5F 5F 2C
	   5F 7C 5F 7C 20
	   7C 5F 7C 5F 5F
	   5F 2F 5C 5F 5F
	   5F 2F 20 20 2F
	   5F 2F 20 20 20
	   5C 5F 5C 5F 5F
	   7C 5C 5F 5F 5C
	   5F 5F 2C 5F 7C
	   5C 5F 5F 5F 7C
	   5F 7C 5C 5F 28
	   5F 7C 5F 29 0A
	   0D 00

				; MENU
 000001E5 53 65 6C 65 63	 menu   BYTE "Selecione uma dificuldade para jogar:",0ah, 0dh, 0ah
	   69 6F 6E 65 20
	   75 6D 61 20 64
	   69 66 69 63 75
	   6C 64 61 64 65
	   20 70 61 72 61
	   20 6A 6F 67 61
	   72 3A 0A 0D 0A
 0000020D  09 09 09 09 20			BYTE "				              1 - Facil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 31 20
	   2D 20 46 61 63
	   69 6C 0A 0D
 0000022A  09 09 09 09 20			BYTE "				              2 - Dificil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 32 20
	   2D 20 44 69 66
	   69 63 69 6C 0A
	   0D
 00000249  09 09 09 09 20	        BYTE "				            ESC - SAIR",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 45 53 43 20
	   2D 20 53 41 49
	   52 0A 0D
 00000265  09 09 09 09 00			BYTE "				",0
						
				;Ganso
 0000026A 5F 5F 0A 0D 00	ganso1 	BYTE                          "__",0ah,0dh,0  
 0000026F 2F 20 20 3E 0A	ganso2	BYTE                         "/  >",0ah,0dh,0  
	   0D 00
 00000276 2F 20 20 5C 0A	ganso3	BYTE                        "/  \",0ah,0dh,0  
	   0D 00
 0000027D 5F 5F 5F 5F 5F	ganso4	BYTE                  "_____/   /",0ah,0dh,0  
	   2F 20 20 20 2F
	   0A 0D 00
 0000028A 3C 20 20 20 20	ganso5	BYTE                 "<        /",0ah,0dh,0  
	   20 20 20 20 2F
	   0A 0D 00
 00000297 5C 5F 20 20 20	ganso6	BYTE                  "\_    _/",0ah,0dh,0  
	   20 5F 2F 0A 0D
	   00
 000002A2 7C 20 20 20 7C	ganso7	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 000002AA 7C 20 20 20 7C	ganso8	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 000002B2 5E 20 20 20 5E	ganso9	BYTE                    "^   ^",0
	   00
					
				; Ganso Agachado
 000002B8 5F 5F 0A 0D 00	ganso_agachado1 	BYTE                         "__",0ah,0dh,0  
 000002BD 2F 20 20 3E 0A	ganso_agachado2		BYTE                       "/  >",0ah,0dh,0  
	   0D 00
 000002C4 5F 5F 5F 5F 5F	ganso_agachado3		BYTE                 "_____/  \ ",0ah,0dh,0  
	   2F 20 20 5C 20
	   0A 0D 00
 000002D1 3C 20 20 20 20	ganso_agachado4		BYTE                "<        /  ",0ah,0dh,0  
	   20 20 20 20 2F
	   20 20 0A 0D 00
 000002E0 5C 5F 20 20 20	ganso_agachado5		BYTE                  "\_   _/   ",0ah,0dh,0  
	   5F 2F 20 20 20
	   0A 0D 00
 000002ED 7C 20 20 20 7C	ganso_agachado6		BYTE                   "|   |     ",0ah,0dh,0  
	   20 20 20 20 20
	   0A 0D 00
 000002FA 5E 20 20 20 5E	ganso_agachado7		BYTE                   "^   ^     ",0
	   20 20 20 20 20
	   00

 00000305 09 09 20 20 20	nuvem   BYTE "		                                         ____     ____        ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 0A
	   0D
 00000347  09 20 20 20 20	    	BYTE "	                                              __/    \___/    \____   ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 2F
	   20 20 20 20 5C
	   5F 5F 5F 2F 20
	   20 20 20 5C 5F
	   5F 5F 5F 20 20
	   20 0A 0D
 00000390  09 20 20 20 20	       	BYTE "	                                             /                     \  ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 0A 0D
 000003D9  20 20 20 20 20	   		BYTE "                                                    |                       \ ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 0A 0D
 00000429  09 20 20 20 20	    	BYTE "	                                             \___      __         __| ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   20 20 20 20 20
	   20 5F 5F 20 20
	   20 20 20 20 20
	   20 20 5F 5F 7C
	   20 0A 0D
 00000472  09 20 20 20 20	        BYTE "	                                                 \____/  \       /    ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   2F 20 20 5C 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 0A 0D
 000004BB  20 09 09 09 20	        BYTE " 			                                          \_____/     ",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   5F 5F 2F 20 20
	   20 20 20 00

 000004F6 20 20 20 20 20	sol     BYTE"          \     /      ",0ah,0dh 
	   20 20 20 20 20
	   5C 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 0A 0D
 0000050F  20 20 20 20 20	        BYTE"            \___/       ",0ah,0dh
	   20 20 20 20 20
	   20 20 5C 5F 5F
	   5F 2F 20 20 20
	   20 20 20 20 0A
	   0D
 00000529  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 00000543  20 20 20 20 20	        BYTE"      ____|       |____ ",0ah,0dh
	   20 5F 5F 5F 5F
	   7C 20 20 20 20
	   20 20 20 7C 5F
	   5F 5F 5F 20 0A
	   0D
 0000055D  20 20 20 20 20	        BYTE"           \ ___ /      ",0ah,0dh
	   20 20 20 20 20
	   20 5C 20 5F 5F
	   5F 20 2F 20 20
	   20 20 20 20 0A
	   0D
 00000577  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 00000591  20 20 20 20 20	        BYTE"          /       \     ",0
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 00

 000005AA 20 20 20 20 20	gameover BYTE "                     _____          __  __ ______    ______      ________ _____",0ah,0dh   
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 5F
	   5F 5F 5F 5F 0A
	   0D
 000005FB  20 20 20 20 20		 BYTE "                     / ____|   /\   |  \/  |  ____|  / __ \ \    / /  ____|  __ \",0ah,0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 5F 5F
	   5F 5F 7C 20 20
	   20 2F 5C 20 20
	   20 7C 20 20 5C
	   2F 20 20 7C 20
	   20 5F 5F 5F 5F
	   7C 20 20 2F 20
	   5F 5F 20 5C 20
	   5C 20 20 20 20
	   2F 20 2F 20 20
	   5F 5F 5F 5F 7C
	   20 20 5F 5F 20
	   5C 0A 0D
 0000064E  20 20 20 20 20		 BYTE "                    | |  __   /  \  | \  / | |__    | |  | \ \  / /| |__  | |__) |",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 20 20
	   5F 5F 20 20 20
	   2F 20 20 5C 20
	   20 7C 20 5C 20
	   20 2F 20 7C 20
	   7C 5F 5F 20 20
	   20 20 7C 20 7C
	   20 20 7C 20 5C
	   20 5C 20 20 2F
	   20 2F 7C 20 7C
	   5F 5F 20 20 7C
	   20 7C 5F 5F 29
	   20 7C 0A 0D
 000006A2  20 20 20 20 20		 BYTE "                    | | |_ | / /\ \ | |\/| |  __|   | |  | |\ \/ / |  __| |  _  /",0ah,0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 20 7C
	   5F 20 7C 20 2F
	   20 2F 5C 20 5C
	   20 7C 20 7C 5C
	   2F 7C 20 7C 20
	   20 5F 5F 7C 20
	   20 20 7C 20 7C
	   20 20 7C 20 7C
	   5C 20 5C 2F 20
	   2F 20 7C 20 20
	   5F 5F 7C 20 7C
	   20 20 5F 20 20
	   2F 0A 0D
 000006F5  20 20 20 20 20		 BYTE "                    | |__| |/ ____ \| |  | | |____  | |__| | \  /  | |____| | \ \ ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 5F 5F
	   7C 20 7C 2F 20
	   5F 5F 5F 5F 20
	   5C 7C 20 7C 20
	   20 7C 20 7C 20
	   7C 5F 5F 5F 5F
	   20 20 7C 20 7C
	   5F 5F 7C 20 7C
	   20 5C 20 20 2F
	   20 20 7C 20 7C
	   5F 5F 5F 5F 7C
	   20 7C 20 5C 20
	   5C 20 0A 0D
 00000749  20 20 20 20 20		 BYTE "                     \_____/_/    \_\_|  |_|______|  \____/   \/   |______|_|  \_\",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   5F 5F 2F 5F 2F
	   20 20 20 20 5C
	   5F 5C 5F 7C 20
	   20 7C 5F 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20 5C 5F
	   5F 5F 5F 2F 20
	   20 20 5C 2F 20
	   20 20 7C 5F 5F
	   5F 5F 5F 5F 7C
	   5F 7C 20 20 5C
	   5F 5C 00
					
 0000079C 20 20 20 20 20	menuFinal BYTE "                                             Selecione uma opcao:",0ah, 0dh, 0ah
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   53 65 6C 65 63
	   69 6F 6E 65 20
	   75 6D 61 20 6F
	   70 63 61 6F 3A
	   0A 0D 0A
 000007E0  09 09 09 09 20			  BYTE "				                1 - Menu inicial",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   31 20 2D 20 4D
	   65 6E 75 20 69
	   6E 69 63 69 61
	   6C 0A 0D
 00000806  09 09 09 09 20	          BYTE "				              ESC - SAIR",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 45 53
	   43 20 2D 20 53
	   41 49 52 00
					
 00000000			.code
				;==================Desenha o menu inicial ==========================
				;Recebe: nda
				;Retorna: Desenho do menu na tela
				;===================================================================
 00000000			DesenhaMenu PROC
 00000000  B8 00000004			mov  eax, red
 00000005  E8 00000000 E		call SetTextColor
 0000000A  B2 01			mov dl, 1
 0000000C  B6 06			mov dh, 6
 0000000E  E8 00000000 E		call GotoXY
 00000013  BA 00000048 R		mov edx, OFFSET logo
 00000018  E8 00000000 E	    call WriteString

 0000001D  B8 0000000F			mov eax, white
 00000022  E8 00000000 E		call SetTextColor
 00000027  B2 20			mov dl,32
 00000029  B6 0F			mov dh, 15
 0000002B  E8 00000000 E		call GotoXY
 00000030  BA 000001E5 R	    mov edx, OFFSET menu   
 00000035  E8 00000000 E		call WriteString  
 0000003A  C3				ret
 0000003B			DesenhaMenu ENDP
				;===================================================================

				;==============Desenha a moldura da tela=============================
				;Recebe: eax com a cor da moldura, LARGURA e ALTURA da tela
				;Retorna: desenho da moldura na tela 
				;====================================================================
 0000003B			Moldura PROC USES edx ecx
 0000003B  52		   *	    push   edx
 0000003C  51		   *	    push   ecx
 0000003D  E8 00000000 E		call SetTextColor

					;Superior
 00000042  B2 01			mov dl, 1
 00000044  B6 01			mov dh, 1
 00000046  B9 00000069			mov ecx, LARGURA ;LARGURA da tela do jogo
 0000004B  B0 DC			mov al, 220	;caracter ASCII que compõe as barras superior e inferior
 0000004D  EB 09			jmp HORIZONTAL

 0000004F				INFERIOR:
 0000004F  B2 01				mov dl, 1
 00000051  B6 1D				mov dh, ALTURA	; posição da barra inferior
 00000053  B9 00000069				mov ecx, LARGURA ;LARGURA da tela do jogo

					;Desenha as barras superior e inferior(uma por vez)
 00000058				HORIZONTAL:          
 00000058  E8 00000000 E			call GotoXY
 0000005D  E8 00000000 E			call WriteChar
 00000062  FE C2				inc dl
 00000064  E2 F2			loop HORIZONTAL
 00000066  80 FE 1D			cmp dh, ALTURA
 00000069  75 E4			jne INFERIOR ;se dh != 24 vai para inferior desenhar a outra barra

					;Laterais
 0000006B  B2 01			mov dl, 1
 0000006D  B6 02			mov dh, 2
 0000006F  B9 0000001C			mov ecx, ALTURA-1
 00000074  B0 DB			mov al, 219 ;caracter que compõe as barras laterais

					;Desenha as barras verticais(as duas juntas)
 00000076				VERTICAL:            
 00000076  E8 00000000 E			call GotoXY
 0000007B  E8 00000000 E			call WriteChar
 00000080  80 C2 68				add dl, LARGURA-1	;pula para a esquerda
 00000083  E8 00000000 E			call GotoXY
 00000088  E8 00000000 E			call WriteChar
 0000008D  80 EA 68				sub dl, LARGURA-1	;volta para a direita
 00000090  FE C6				inc dh
 00000092  E2 E2			loop VERTICAL
					ret
 00000094  59		   *	    pop    ecx
 00000095  5A		   *	    pop    edx
 00000096  C3		   *	    ret    00000h
 00000097			Moldura ENDP

				;======================Desenha o Ganso Em Pe =======================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela
				;===================================================================
 00000097			DesenhaGansoEmPe PROC USES eax edx ecx
 00000097  50		   *	    push   eax
 00000098  52		   *	    push   edx
 00000099  51		   *	    push   ecx
 0000009A  B8 0000000F			mov eax, white
 0000009F  E8 00000000 E		call SetTextColor
 000000A4  B2 01			mov dl,1
 000000A6  8A 35 00000010 R		mov dh,PosY
 000000AC  E8 00000000 E		call GotoXY
					;mov edx, OFFSET ganso
 000000B1  E8 00000000 E		call WriteString
					
					;redesenha moldura que é apagada
 000000B6  B8 00000002			mov eax, green
 000000BB  E8 00000000 E	    call SetTextColor
 000000C0  B2 01			mov dl, 1
 000000C2  8A 35 00000010 R		mov dh, PosY
 000000C8  B9 00000009			mov ecx, 9
 000000CD  B0 DB			mov al, 219
 000000CF				REMOLDURA:
 000000CF  E8 00000000 E			call GotoXY
 000000D4  E8 00000000 E			call WriteChar
 000000D9  FE C6				inc dh
 000000DB  E2 F2			loop REMOLDURA
				ret
 000000DD  59		   *	    pop    ecx
 000000DE  5A		   *	    pop    edx
 000000DF  58		   *	    pop    eax
 000000E0  C3		   *	    ret    00000h
 000000E1			DesenhaGansoEmPe ENDP
				;===================================================================

 000000E1			DesenhaGansoEmPE2 PROC USES edx eax
 000000E1  52		   *	    push   edx
 000000E2  50		   *	    push   eax
 000000E3  B8 0000000F			mov eax, white
 000000E8  E8 00000000 E		call SetTextColor
 000000ED  B2 19		    mov dl, 25
 000000EF  8A 35 00000010 R		mov dh, PosY
 000000F5  52				push edx
 000000F6  E8 00000000 E		call GotoXY
 000000FB  BA 0000026A R		mov edx, OFFSET ganso1
 00000100  E8 00000000 E		call WriteString

 00000105  5A				pop edx
 00000106  B2 18		    mov dl, 24
 00000108  FE C6			inc dh
 0000010A  E8 00000000 E		call GotoXY
 0000010F  52				push edx
 00000110  BA 0000026F R		mov edx, OFFSET ganso2
 00000115  E8 00000000 E		call WriteString

 0000011A  5A			    pop edx
 0000011B  B2 17			mov dl, 23
 0000011D  FE C6			inc dh
 0000011F  E8 00000000 E		call GotoXY
 00000124  52				push edx
 00000125  BA 00000276 R		mov edx, OFFSET ganso3
 0000012A  E8 00000000 E		call WriteString

 0000012F  5A				pop edx
 00000130  B2 11			mov dl, 17
 00000132  FE C6			inc dh
 00000134  E8 00000000 E		call GotoXY
 00000139  52				push edx
 0000013A  BA 0000027D R		mov edx, OFFSET ganso4
 0000013F  E8 00000000 E		call WriteString

 00000144  5A				pop edx
 00000145  B2 10			mov dl, 16
 00000147  FE C6			inc dh
 00000149  E8 00000000 E		call GotoXY
 0000014E  52				push edx
 0000014F  BA 0000028A R		mov edx, OFFSET ganso5
 00000154  E8 00000000 E		call WriteString	

 00000159  5A				pop edx
 0000015A  B2 11			mov dl, 17
 0000015C  FE C6			inc dh
 0000015E  E8 00000000 E		call GotoXY
 00000163  52				push edx
 00000164  BA 00000297 R		mov edx, OFFSET ganso6
 00000169  E8 00000000 E		call WriteString

 0000016E  5A				pop edx
 0000016F  B2 13			mov dl, 19
 00000171  FE C6			inc dh
 00000173  E8 00000000 E		call GotoXY
 00000178  52				push edx
 00000179  BA 000002A2 R		mov edx, OFFSET ganso7
 0000017E  E8 00000000 E		call WriteString

 00000183  5A				pop edx
 00000184  B2 13			mov dl, 19
 00000186  FE C6			inc dh
 00000188  E8 00000000 E		call GotoXY
 0000018D  52				push edx
 0000018E  BA 000002AA R		mov edx, OFFSET ganso8
 00000193  E8 00000000 E		call WriteString

 00000198  5A				pop edx
 00000199  B2 13			mov dl, 19
 0000019B  FE C6			inc dh
 0000019D  E8 00000000 E		call GotoXY
 000001A2  52				push edx
 000001A3  BA 000002B2 R		mov edx, OFFSET ganso9
 000001A8  E8 00000000 E		call WriteString 
 000001AD  5A				pop edx
					ret
 000001AE  58		   *	    pop    eax
 000001AF  5A		   *	    pop    edx
 000001B0  C3		   *	    ret    00000h
 000001B1			DesenhaGansoEmPE2 ENDP

 000001B1			DesenhaGansoAgachado2 PROC USES eax
 000001B1  50		   *	    push   eax
 000001B2  B8 0000000F		    mov eax, white
 000001B7  E8 00000000 E		call SetTextColor
 000001BC  B2 18		    mov dl, 24
 000001BE  8A 35 00000010 R		mov dh, PosY
 000001C4  52				push edx
 000001C5  E8 00000000 E		call GotoXY
 000001CA  BA 000002B8 R		mov edx, OFFSET ganso_agachado1
 000001CF  E8 00000000 E		call WriteString

 000001D4  5A				pop edx
 000001D5  B2 17		    mov dl, 23
 000001D7  FE C6			inc dh
 000001D9  E8 00000000 E		call GotoXY
 000001DE  52				push edx
 000001DF  BA 000002BD R		mov edx, OFFSET ganso_agachado2
 000001E4  E8 00000000 E		call WriteString

 000001E9  5A				pop edx
 000001EA  B2 11			mov dl, 17
 000001EC  FE C6			inc dh
 000001EE  E8 00000000 E		call GotoXY
 000001F3  52				push edx
 000001F4  BA 000002C4 R		mov edx, OFFSET ganso_agachado3
 000001F9  E8 00000000 E		call WriteString

 000001FE  5A				pop edx
 000001FF  B2 10			mov dl, 16
 00000201  FE C6			inc dh
 00000203  E8 00000000 E		call GotoXY
 00000208  52				push edx
 00000209  BA 000002D1 R		mov edx, OFFSET ganso_agachado4
 0000020E  E8 00000000 E		call WriteString

 00000213  5A				pop edx
 00000214  B2 12			mov dl, 18
 00000216  FE C6			inc dh
 00000218  E8 00000000 E		call GotoXY
 0000021D  52				push edx
 0000021E  BA 000002E0 R		mov edx, OFFSET ganso_agachado5
 00000223  E8 00000000 E		call WriteString	

 00000228  5A				pop edx
 00000229  B2 13			mov dl, 19
 0000022B  FE C6			inc dh
 0000022D  E8 00000000 E		call GotoXY
 00000232  52				push edx
 00000233  BA 000002ED R		mov edx, OFFSET ganso_agachado6
 00000238  E8 00000000 E		call WriteString

 0000023D  5A				pop edx
 0000023E  B2 13			mov dl, 19
 00000240  FE C6			inc dh
 00000242  E8 00000000 E		call GotoXY
 00000247  52				push edx
 00000248  BA 000002FA R		mov edx, OFFSET ganso_agachado7
 0000024D  E8 00000000 E		call WriteString
 00000252  5A				pop edx

					ret
 00000253  58		   *	    pop    eax
 00000254  C3		   *	    ret    00000h
					exit
 00000255  6A 00	   *	    push   +000000000h
 00000257  E8 00000000 E   *	    call   ExitProcess
 0000025C			DesenhaGansoAgachado2 ENDP

				;======================Desenha o Ganso agachado=====================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela
				;===================================================================
 0000025C			DesenhaGansoAgachado PROC USES eax edx
 0000025C  50		   *	    push   eax
 0000025D  52		   *	    push   edx
 0000025E  B8 0000000F			mov eax, white
 00000263  E8 00000000 E		call SetTextColor
 00000268  B2 01			mov dl,1
 0000026A  B6 16			mov dh,Y_GANSO_AGACHADO
 0000026C  E8 00000000 E		call GotoXY
					;mov edx, OFFSET ganso_agachado
 00000271  E8 00000000 E		call WriteString
				ret
 00000276  5A		   *	    pop    edx
 00000277  58		   *	    pop    eax
 00000278  C3		   *	    ret    00000h
 00000279			DesenhaGansoAgachado ENDP
				;===================================================================

				;======================Deleta Desenho===============================
				;Recebe:PosX, PosY(ganso em pé = 20, obstaculo1 = 26, obstaculo2 = 19),
				;		larguraO, alturaO
				;Retorna:
				;===================================================================
 00000279			DeletaDesenho PROC USES edx eax ecx
 00000279  52		   *	    push   edx
 0000027A  50		   *	    push   eax
 0000027B  51		   *	    push   ecx
 0000027C  8A 15 00000011 R		mov dl, PosX
 00000282  8A 35 00000010 R		mov dh, PosY
 00000288  E8 00000000 E		call GotoXY
					
 0000028D  0F B6 0D			movzx ecx, alturaO   ; Nr de Linhas do Desenho
	   00000013 R
 00000294  B0 20			mov al, 32   ; Barra de Espaço
 00000296				LINHA:
 00000296  51					push ecx
 00000297  0F B6 0D				movzx ecx, larguraO   ; Nr de Colunas do Desenho
	   00000012 R
 0000029E					COLUNA:
 0000029E  E8 00000000 E				call WriteChar
 000002A3  E2 F9				loop COLUNA
 000002A5  59					pop ecx
 000002A6  FE C6				inc dh
 000002A8  E8 00000000 E			call GotoXY
 000002AD  E2 E7			loop LINHA

					ret
 000002AF  59		   *	    pop    ecx
 000002B0  58		   *	    pop    eax
 000002B1  5A		   *	    pop    edx
 000002B2  C3		   *	    ret    00000h
 000002B3			DeletaDesenho ENDP

				;=====================Desenha Obstaculo1============================
				;Recebe: PosX
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 000002B3			DesenhaObstaculo1 PROC USES ecx
 000002B3  51		   *	    push   ecx
 000002B4  B8 00000006			mov eax, brown
 000002B9  E8 00000000 E		call SetTextColor
 000002BE  8A 15 00000011 R		mov dl, PosX
 000002C4  B6 1A			mov dh, Y_OBSTACULO1
 000002C6  B0 21			mov al, "!"
 000002C8  B9 00000005			mov ecx, 5
 000002CD				CIMA:
 000002CD  E8 00000000 E			call GotoXY
 000002D2  E8 00000000 E			call WriteChar
 000002D7  FE C2				inc dl
 000002D9  E2 F2			loop CIMA
					
 000002DB  8A 15 00000011 R		mov dl, PosX
 000002E1  B6 1B			mov dh, 27
 000002E3  B9 00000002			mov ecx, 2
 000002E8				LADOS:
 000002E8  E8 00000000 E			call GotoXY
 000002ED  E8 00000000 E			call WriteChar
 000002F2  80 C2 04				add dl, 4
 000002F5  E8 00000000 E			call GotoXY
 000002FA  E8 00000000 E			call WriteChar
 000002FF  80 EA 04				sub dl, 4
 00000302  FE C6				inc dh
 00000304  E2 E2			loop LADOS
					ret
 00000306  59		   *	    pop    ecx
 00000307  C3		   *	    ret    00000h
 00000308			DesenhaObstaculo1 ENDP
				;====================================================================

				;=====================Desenha Obstaculo2============================
				;Recebe: PosXObstaculo2
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 00000308			DesenhaObstaculo2 PROC USES ecx
 00000308  51		   *	    push   ecx
 00000309  B8 00000004			mov eax, red
 0000030E  E8 00000000 E		call SetTextColor
 00000313  80 05 00000011 R		add PosX, 1
	   01
 0000031A  8A 15 00000011 R		mov dl, PosX
 00000320  B6 13			mov dh, Y_OBSTACULO2
 00000322  FE 0D 00000011 R		dec PosX

 00000328  B0 2F			mov al, "/"
 0000032A  E8 00000000 E		call GotoXY
 0000032F  E8 00000000 E		call WriteChar

 00000334  FE C6			inc dh
 00000336  FE CA			dec dl
 00000338  B0 78			mov al, "x"
 0000033A  E8 00000000 E		call GotoXY
 0000033F  E8 00000000 E		call WriteChar

 00000344  FE C2			inc dl
 00000346  B0 2D			mov al, "-"
 00000348  B9 00000004			mov ecx, 4
 0000034D				L1: 
 0000034D  E8 00000000 E			call GotoXY
 00000352  E8 00000000 E			call WriteChar
 00000357  FE C2				inc dl
 00000359  E2 F2			loop L1

 0000035B  FE C6			inc dh
 0000035D  80 EA 04			sub dl, 4
 00000360  B0 5C			mov al, "\"
 00000362  E8 00000000 E		call GotoXY
 00000367  E8 00000000 E		call WriteChar
					ret
 0000036C  59		   *	    pop    ecx
 0000036D  C3		   *	    ret    00000h
 0000036E			DesenhaObstaculo2 ENDP
				;====================================================================

				;=========================Desenha Céu===============================
				;Recebe: nda
				;Retorna: dsenho do ceu do jogo na tela
				;===================================================================
 0000036E			DesenhaCeu PROC 
					;SOL
 0000036E  B8 0000000E			mov eax, yellow
 00000373  E8 00000000 E		call SetTextColor
 00000378  B2 01			mov dl, 1
 0000037A  B6 03			mov dh, 3
 0000037C  E8 00000000 E		call GotoXY
 00000381  BA 000004F6 R		mov edx, OFFSET sol
 00000386  E8 00000000 E		call WriteString
					;NUVEM
 0000038B  B8 0000000F			mov eax, white
 00000390  E8 00000000 E		call SetTextColor
 00000395  B2 01			mov dl, 1
 00000397  B6 0A			mov dh, 10
 00000399  E8 00000000 E		call GotoXY
 0000039E  BA 00000305 R		mov edx, OFFSET nuvem
 000003A3  E8 00000000 E		call WriteString
 000003A8  C3				ret
 000003A9			DesenhaCeu ENDP
				;==================================================================

				;=======================Inicializa Jogo==============================
				;Recebe: nda
				;Retorna: Tela inicial do jogo
				;====================================================================
 000003A9			InicializaJogo PROC
 000003A9  E8 00000000 E		call Clrscr
 000003AE  C6 05 00000010 R		mov PosY, Y_GANSO_EM_PE
	   14
 000003B5  E8 FFFFFD27			call DesenhaGansoEmPE2
 000003BA  E8 FFFFFFAF			call DesenhaCeu
 000003BF  B8 00000002			mov eax, green	;cor da moldura
 000003C4  E8 FFFFFC72			call Moldura
					
 000003C9  E8 00000029			call CriaObstaculo
 000003CE  C3				ret
 000003CF			InicializaJogo ENDP
				;====================================================================

				;==========================Pontuação=================================
				;Recebe: Pontuação
				;Retorna: pontuação no canto direito da tela
				;====================================================================
 000003CF			Pontuacao PROC
 000003CF  B8 00000002			mov eax, green
 000003D4  E8 00000000 E		call SetTextColor
 000003D9  B2 4D			mov dl, X_SCORE
 000003DB  B6 05			mov dh, Y_SCORE
 000003DD  E8 00000000 E		call GotoXY
 000003E2  BA 00000025 R		mov edx , OFFSET Score
 000003E7  E8 00000000 E		call WriteString

 000003EC  A1 00000040 R		mov eax, Pontos
 000003F1  E8 00000000 E		call WriteDec
 000003F6  C3				ret
 000003F7			Pontuacao ENDP

				;=====================Cria Obstaculo ================================
				;Gera os obstáculos de forma aleatória
				;Recebe: nda
				;Retorna: um obstáculo(ou nada) na tela
				;====================================================================
 000003F7			CriaObstaculo PROC
 000003F7  E8 00000000 E		call Randomize
 000003FC  B8 00000003			mov eax, 3
 00000401  E8 00000000 E		call RandomRange
					.IF al == 1
 00000406  3C 01	   *	    cmp    al, 001h
 00000408  75 24	   *	    jne    @C0001
 0000040A  C6 05 00000011 R			mov PosX, 100
	   64
 00000411  E8 FFFFFE9D				call DesenhaObstaculo1
 00000416  0F B6 1D				movzx ebx, CtrlObs1
	   00000023 R
 0000041D  C6 83 00000015 R			mov PosObs1[ebx], 100
	   64
 00000424  FE 05 00000023 R			inc CtrlObs1
 0000042A  EB 28				jmp FIM
					.ELSEIF al == 2
 0000042C  EB 26	   *	    jmp    @C0003
 0000042E		   *@C0001:
 0000042E  3C 02	   *	    cmp    al, 002h
 00000430  75 22	   *	    jne    @C0004
 00000432  C6 05 00000011 R			mov PosX, 99
	   63
 00000439  E8 FFFFFECA				call DesenhaObstaculo2
 0000043E  0F B6 1D				movzx ebx, CtrlObs2
	   00000024 R
 00000445  C6 83 0000001C R			mov PosObs2[ebx], 100
	   64
 0000044C  FE 05 00000024 R			inc CtrlObs2
 00000452  EB 00				jmp FIM
					.ENDIF
 00000454		   *@C0004:
 00000454		   *@C0003:
 00000454				FIM:
 00000454  C3				ret
 00000455			CriaObstaculo ENDP
				;====================================================================

				;=======================JOGO=========================================
				;Rotina do jogo. Faz a leitura da tecla de salto(W) e agachamento (S), chama os 
				;procedimentos de movimentação e criação de obstaculos e testa colisões
				;Recebe: nda
				;Retorna: jogo na tela
				;====================================================================
 00000455			Jogo PROC
 00000455  E8 FFFFFF4F			call InicializaJogo
 0000045A				JOGO_LOOP:
 0000045A  B8 00000032				mov eax, 50
 0000045F  E8 00000000 E			call Delay
 00000464  E8 00000000 E			call ReadKey
 00000469  83 05 00000000 R			add contadorTempo, 50
	   32
 00000470  83 05 00000004 R			add contadorObstaculo, 50
	   32
 00000477  83 05 00000008 R			add contadorPulo, 50
	   32
 0000047E  83 05 0000000C R			add contadorAgacha, 50
	   32
						
						.IF al == "w"        ;Faz o Ganso Pular
 00000485  3C 77	   *	    cmp    al, 'w'
 00000487  75 52	   *	    jne    @C0006
							;Deletando o Desenho do Ganso
 00000489  C6 05 00000014 R				mov statusGanso, 2
	   02
 00000490  C6 05 00000011 R				mov PosX,16
	   10
 00000497  C6 05 00000010 R				mov PosY, Y_GANSO_EM_PE
	   14
 0000049E  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 000004A5  C6 05 00000013 R				mov alturaO,ALTURA_GANSO
	   09
 000004AC  E8 FFFFFDC8					call DeletaDesenho
							;Desenhando o Ganso no Ar
 000004B1  C6 05 00000010 R				mov PosY, Y_GANSO_PULANDO
	   0F
 000004B8  C7 05 00000008 R				mov contadorPulo, 0
	   00000000
 000004C2  C7 05 0000000C R				mov contadorAgacha, 0
	   00000000
 000004CC  E8 FFFFFC10					call DesenhaGansoEmPe2
 000004D1  E9 00000085					jmp DELAY_MOVIMENTO
						
						.ELSEIF al ==  "s"    ;Faz o Ganso Agachar
 000004D6  E9 00000080	   *	    jmp    @C0008
 000004DB		   *@C0006:
 000004DB  3C 73	   *	    cmp    al, 's'
 000004DD  75 7C	   *	    jne    @C0009
							;Deletando o Desenho do Ganso
 000004DF  C6 05 00000011 R				mov PosX,16
	   10
 000004E6  80 3D 00000014 R				cmp statusGanso, 2
	   02
 000004ED  75 10					jne NPULANDO
 000004EF  C6 05 00000010 R					mov PosY, Y_GANSO_PULANDO
	   0F
 000004F6  C6 05 00000013 R				    mov alturaO,ALTURA_GANSO
	   09
 000004FD  EB 27						jmp DELETA_
 000004FF						NPULANDO:
 000004FF  80 3D 00000014 R				cmp statusGanso, 1
	   01
 00000506  75 10					jne AGACHADO_
 00000508  C6 05 00000010 R					mov PosY, Y_GANSO_EM_PE
	   14
 0000050F  C6 05 00000013 R					mov alturaO,ALTURA_GANSO
	   09
 00000516  EB 0E						jmp DELETA_
 00000518						AGACHADO_:
 00000518  C6 05 00000010 R					mov PosY, Y_GANSO_AGACHADO
	   16
 0000051F  C6 05 00000013 R					mov alturaO,ALTURA_GANSO_AGACHADO
	   07
 00000526						DELETA_:
 00000526  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 0000052D  E8 FFFFFD47					call DeletaDesenho
							;Desenhando o Ganso Agachado
 00000532  C6 05 00000010 R				mov PosY, Y_GANSO_AGACHADO
	   16
 00000539  C7 05 0000000C R				mov contadorAgacha, 0
	   00000000
 00000543  C7 05 00000008 R				mov contadorPulo, 0
	   00000000
 0000054D  E8 FFFFFC5F					call DesenhaGansoAgachado2
 00000552  C6 05 00000014 R				mov statusGanso, 0
	   00
 00000559  EB 00					jmp DELAY_MOVIMENTO
							
						.ENDIF
 0000055B		   *@C0009:
 0000055B		   *@C0008:
						
 0000055B					DELAY_MOVIMENTO:
						.IF contadorPulo == 1700 && statusGanso == 2
 0000055B  81 3D 00000008 R
	   000006A4	   *	    cmp    contadorPulo, 006A4h
 00000565  75 49	   *	    jne    @C000B
 00000567  80 3D 00000014 R
	   02		   *	    cmp    statusGanso, 002h
 0000056E  75 40	   *	    jne    @C000B
							;Deleta o Ganso no Ar
 00000570  C6 05 00000014 R				mov statusGanso, 1
	   01
 00000577  C6 05 00000011 R				mov PosX, 16
	   10
 0000057E  C6 05 00000010 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000585  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 0000058C  C6 05 00000013 R				mov alturaO, ALTURA_GANSO
	   09
 00000593  E8 FFFFFCE1					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 00000598  C6 05 00000010 R				mov PosY, Y_GANSO_EM_PE
	   14
 0000059F  E8 FFFFFB3D					call DesenhaGansoEmPe2
							
 000005A4  C7 05 00000008 R				mov contadorPulo, 0
	   00000000
 000005AE  EB 00					jmp DELAY_MOVIMENTO2
						.ENDIF
 000005B0		   *@C000B:

 000005B0					DELAY_MOVIMENTO2:
						.IF contadorAgacha == 1500 && statusGanso == 0
 000005B0  81 3D 0000000C R
	   000005DC	   *	    cmp    contadorAgacha, 005DCh
 000005BA  75 49	   *	    jne    @C000E
 000005BC  80 3D 00000014 R
	   00		   *	    cmp    statusGanso, 000h
 000005C3  75 40	   *	    jne    @C000E
							;Deleta o Ganso agachado
 000005C5  C6 05 00000014 R				mov statusGanso, 1
	   01
 000005CC  C6 05 00000011 R				mov PosX, 16
	   10
 000005D3  C6 05 00000010 R				mov PosY, Y_GANSO_AGACHADO-2
	   14
 000005DA  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 000005E1  C6 05 00000013 R				mov alturaO, ALTURA_GANSO
	   09
 000005E8  E8 FFFFFC8C					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 000005ED  C6 05 00000010 R				mov PosY, Y_GANSO_EM_PE
	   14
 000005F4  E8 FFFFFAE8					call DesenhaGansoEmPe2
							
 000005F9  C7 05 0000000C R				mov contadorAgacha, 0
	   00000000
 00000603  EB 00					jmp ATUALIZA_OBSTACULOS
						.ENDIF
 00000605		   *@C000E:
						
 00000605					ATUALIZA_OBSTACULOS:
						.IF contadorTempo == 100    ;500
 00000605  83 3D 00000000 R
	   64		   *	    cmp    contadorTempo, 064h
 0000060C  75 1C	   *	    jne    @C0011
 0000060E  E8 000002DE					call AtualizaObstaculos
 00000613  C7 05 00000000 R				mov contadorTempo, 0
	   00000000
 0000061D  FF 05 00000040 R				inc Pontos
 00000623  E8 FFFFFDA7					call Pontuacao
 00000628  EB 00					jmp TESTA_COLISAO
						.ENDIF
 0000062A		   *@C0011:

 0000062A					TESTA_COLISAO:
						.IF (PosObs1[0] <= 23 && PosObs1[0] >= 13 && statusGanso != 2) || (PosObs2[0] <= 27 && PosObs2[0] >= 20 && statusGanso != 0 ) || (PosObs2[0] <= 25 && PosObs2[0] >= 11 && statusGanso == 2)
 0000062A  80 3D 00000015 R
	   17		   *	    cmp    PosObs1 + [000h], 017h
 00000631  77 12	   *	    ja	@C0016
 00000633  80 3D 00000015 R
	   0D		   *	    cmp    PosObs1 + [000h], 00Dh
 0000063A  72 09	   *	    jb	@C0016
 0000063C  80 3D 00000014 R
	   02		   *	    cmp    statusGanso, 002h
 00000643  75 36	   *	    jne    @C0014
 00000645		   *@C0016:
 00000645  80 3D 0000001C R
	   1B		   *	    cmp    PosObs2 + [000h], 01Bh
 0000064C  77 12	   *	    ja	@C0015
 0000064E  80 3D 0000001C R
	   14		   *	    cmp    PosObs2 + [000h], 014h
 00000655  72 09	   *	    jb	@C0015
 00000657  80 3D 00000014 R
	   00		   *	    cmp    statusGanso, 000h
 0000065E  75 1B	   *	    jne    @C0014
 00000660		   *@C0015:
 00000660  80 3D 0000001C R
	   19		   *	    cmp    PosObs2 + [000h], 019h
 00000667  77 14	   *	    ja	@C0013
 00000669  80 3D 0000001C R
	   0B		   *	    cmp    PosObs2 + [000h], 00Bh
 00000670  72 0B	   *	    jb	@C0013
 00000672  80 3D 00000014 R
	   02		   *	    cmp    statusGanso, 002h
 00000679  75 02	   *	    jne    @C0013
 0000067B		   *@C0014:
 0000067B  EB 25					jmp PERDEU_
						.ENDIF
 0000067D		   *@C0013:

						.IF contadorObstaculo >= 2500
 0000067D  81 3D 00000004 R
	   000009C4	   *	    cmp    contadorObstaculo, 009C4h
 00000687  72 14	   *	    jb	@C001D
 00000689  E8 FFFFFD69					call CriaObstaculo
 0000068E  C7 05 00000004 R				mov contadorObstaculo, 0
	   00000000
 00000698  E9 FFFFFDBD					jmp JOGO_LOOP
						.ENDIF
 0000069D		   *@C001D:
						
						
 0000069D  E9 FFFFFDB8			jmp JOGO_LOOP
 000006A2				PERDEU_:
 000006A2  C3				ret
 000006A3			Jogo ENDP


 000006A3			Jogo2 PROC
 000006A3  E8 FFFFFD01			call InicializaJogo
 000006A8				JOGO_LOOP:
 000006A8  B8 00000019				mov eax, 25
 000006AD  E8 00000000 E			call Delay
 000006B2  E8 00000000 E			call ReadKey
 000006B7  83 05 00000000 R			add contadorTempo, 50
	   32
 000006BE  83 05 00000004 R			add contadorObstaculo, 50
	   32
 000006C5  83 05 00000008 R			add contadorPulo, 50
	   32
 000006CC  83 05 0000000C R			add contadorAgacha, 50
	   32
						
						.IF al == "w"        ;Faz o Ganso Pular
 000006D3  3C 77	   *	    cmp    al, 'w'
 000006D5  75 52	   *	    jne    @C001F
							;Deletando o Desenho do Ganso
 000006D7  C6 05 00000014 R				mov statusGanso, 2
	   02
 000006DE  C6 05 00000011 R				mov PosX,16
	   10
 000006E5  C6 05 00000010 R				mov PosY, Y_GANSO_EM_PE
	   14
 000006EC  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 000006F3  C6 05 00000013 R				mov alturaO,ALTURA_GANSO
	   09
 000006FA  E8 FFFFFB7A					call DeletaDesenho
							;Desenhando o Ganso no Ar
 000006FF  C6 05 00000010 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000706  C7 05 00000008 R				mov contadorPulo, 0
	   00000000
 00000710  C7 05 0000000C R				mov contadorAgacha, 0
	   00000000
 0000071A  E8 FFFFF9C2					call DesenhaGansoEmPe2
 0000071F  E9 00000085					jmp DELAY_MOVIMENTO
						
						.ELSEIF al ==  "s"    ;Faz o Ganso Agachar
 00000724  E9 00000080	   *	    jmp    @C0021
 00000729		   *@C001F:
 00000729  3C 73	   *	    cmp    al, 's'
 0000072B  75 7C	   *	    jne    @C0022
							;Deletando o Desenho do Ganso
 0000072D  C6 05 00000011 R				mov PosX,16
	   10
 00000734  80 3D 00000014 R				cmp statusGanso, 2
	   02
 0000073B  75 10					jne NPULANDO
 0000073D  C6 05 00000010 R					mov PosY, Y_GANSO_PULANDO
	   0F
 00000744  C6 05 00000013 R				    mov alturaO,ALTURA_GANSO
	   09
 0000074B  EB 27						jmp DELETA_
 0000074D						NPULANDO:
 0000074D  80 3D 00000014 R				cmp statusGanso, 1
	   01
 00000754  75 10					jne AGACHADO_
 00000756  C6 05 00000010 R					mov PosY, Y_GANSO_EM_PE
	   14
 0000075D  C6 05 00000013 R					mov alturaO,ALTURA_GANSO
	   09
 00000764  EB 0E						jmp DELETA_
 00000766						AGACHADO_:
 00000766  C6 05 00000010 R					mov PosY, Y_GANSO_AGACHADO
	   16
 0000076D  C6 05 00000013 R					mov alturaO,ALTURA_GANSO_AGACHADO
	   07
 00000774						DELETA_:
 00000774  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 0000077B  E8 FFFFFAF9					call DeletaDesenho
							;Desenhando o Ganso Agachado
 00000780  C6 05 00000010 R				mov PosY, Y_GANSO_AGACHADO
	   16
 00000787  C7 05 0000000C R				mov contadorAgacha, 0
	   00000000
 00000791  C7 05 00000008 R				mov contadorPulo, 0
	   00000000
 0000079B  E8 FFFFFA11					call DesenhaGansoAgachado2
 000007A0  C6 05 00000014 R				mov statusGanso, 0
	   00
 000007A7  EB 00					jmp DELAY_MOVIMENTO
							
						.ENDIF
 000007A9		   *@C0022:
 000007A9		   *@C0021:
						
 000007A9					DELAY_MOVIMENTO:
						.IF contadorPulo == 1700 && statusGanso == 2
 000007A9  81 3D 00000008 R
	   000006A4	   *	    cmp    contadorPulo, 006A4h
 000007B3  75 49	   *	    jne    @C0024
 000007B5  80 3D 00000014 R
	   02		   *	    cmp    statusGanso, 002h
 000007BC  75 40	   *	    jne    @C0024
							;Deleta o Ganso no Ar
 000007BE  C6 05 00000014 R				mov statusGanso, 1
	   01
 000007C5  C6 05 00000011 R				mov PosX, 16
	   10
 000007CC  C6 05 00000010 R				mov PosY, Y_GANSO_PULANDO
	   0F
 000007D3  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 000007DA  C6 05 00000013 R				mov alturaO, ALTURA_GANSO
	   09
 000007E1  E8 FFFFFA93					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 000007E6  C6 05 00000010 R				mov PosY, Y_GANSO_EM_PE
	   14
 000007ED  E8 FFFFF8EF					call DesenhaGansoEmPe2
							
 000007F2  C7 05 00000008 R				mov contadorPulo, 0
	   00000000
 000007FC  EB 00					jmp DELAY_MOVIMENTO2
						.ENDIF
 000007FE		   *@C0024:

 000007FE					DELAY_MOVIMENTO2:
						.IF contadorAgacha == 1500 && statusGanso == 0
 000007FE  81 3D 0000000C R
	   000005DC	   *	    cmp    contadorAgacha, 005DCh
 00000808  75 49	   *	    jne    @C0027
 0000080A  80 3D 00000014 R
	   00		   *	    cmp    statusGanso, 000h
 00000811  75 40	   *	    jne    @C0027
							;Deleta o Ganso agachado
 00000813  C6 05 00000014 R				mov statusGanso, 1
	   01
 0000081A  C6 05 00000011 R				mov PosX, 16
	   10
 00000821  C6 05 00000010 R				mov PosY, Y_GANSO_AGACHADO-2
	   14
 00000828  C6 05 00000012 R				mov larguraO, LARGURA_GANSO
	   0C
 0000082F  C6 05 00000013 R				mov alturaO, ALTURA_GANSO
	   09
 00000836  E8 FFFFFA3E					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 0000083B  C6 05 00000010 R				mov PosY, Y_GANSO_EM_PE
	   14
 00000842  E8 FFFFF89A					call DesenhaGansoEmPe2
							
 00000847  C7 05 0000000C R				mov contadorAgacha, 0
	   00000000
 00000851  EB 00					jmp ATUALIZA_OBSTACULOS
						.ENDIF
 00000853		   *@C0027:
						
 00000853					ATUALIZA_OBSTACULOS:
						.IF contadorTempo == 100    ;500
 00000853  83 3D 00000000 R
	   64		   *	    cmp    contadorTempo, 064h
 0000085A  75 1C	   *	    jne    @C002A
 0000085C  E8 00000090					call AtualizaObstaculos
 00000861  C7 05 00000000 R				mov contadorTempo, 0
	   00000000
 0000086B  FF 05 00000040 R				inc Pontos
 00000871  E8 FFFFFB59					call Pontuacao
 00000876  EB 00					jmp TESTA_COLISAO
						.ENDIF
 00000878		   *@C002A:

 00000878					TESTA_COLISAO:
						.IF (PosObs1[0] <= 23 && PosObs1[0] >= 13 && statusGanso != 2) || (PosObs2[0] <= 27 && PosObs2[0] >= 20 && statusGanso != 0 ) || (PosObs2[0] <= 25 && PosObs2[0] >= 11 && statusGanso == 2)
 00000878  80 3D 00000015 R
	   17		   *	    cmp    PosObs1 + [000h], 017h
 0000087F  77 12	   *	    ja	@C002F
 00000881  80 3D 00000015 R
	   0D		   *	    cmp    PosObs1 + [000h], 00Dh
 00000888  72 09	   *	    jb	@C002F
 0000088A  80 3D 00000014 R
	   02		   *	    cmp    statusGanso, 002h
 00000891  75 36	   *	    jne    @C002D
 00000893		   *@C002F:
 00000893  80 3D 0000001C R
	   1B		   *	    cmp    PosObs2 + [000h], 01Bh
 0000089A  77 12	   *	    ja	@C002E
 0000089C  80 3D 0000001C R
	   14		   *	    cmp    PosObs2 + [000h], 014h
 000008A3  72 09	   *	    jb	@C002E
 000008A5  80 3D 00000014 R
	   00		   *	    cmp    statusGanso, 000h
 000008AC  75 1B	   *	    jne    @C002D
 000008AE		   *@C002E:
 000008AE  80 3D 0000001C R
	   19		   *	    cmp    PosObs2 + [000h], 019h
 000008B5  77 14	   *	    ja	@C002C
 000008B7  80 3D 0000001C R
	   0B		   *	    cmp    PosObs2 + [000h], 00Bh
 000008BE  72 0B	   *	    jb	@C002C
 000008C0  80 3D 00000014 R
	   02		   *	    cmp    statusGanso, 002h
 000008C7  75 02	   *	    jne    @C002C
 000008C9		   *@C002D:
 000008C9  EB 25					jmp PERDEU_
						.ENDIF
 000008CB		   *@C002C:

						.IF contadorObstaculo >= 2500
 000008CB  81 3D 00000004 R
	   000009C4	   *	    cmp    contadorObstaculo, 009C4h
 000008D5  72 14	   *	    jb	@C0036
 000008D7  E8 FFFFFB1B					call CriaObstaculo
 000008DC  C7 05 00000004 R				mov contadorObstaculo, 0
	   00000000
 000008E6  E9 FFFFFDBD					jmp JOGO_LOOP
						.ENDIF
 000008EB		   *@C0036:
						
						
 000008EB  E9 FFFFFDB8			jmp JOGO_LOOP
 000008F0				PERDEU_:
 000008F0  C3				ret
 000008F1			Jogo2 ENDP
				;====================================================================

				;=======================Atualiza Obstaculos==========================
				;Atualiza posição de todos os obstáculos desenhados na tela
				;Recebe: Lista com posição dos obstáculos existentes
				;Retorna: Lista de posições atualizada e desenhos nas novas posições
				;====================================================================
 000008F1			AtualizaObstaculos PROC USES ecx
					;Obstaculos do tipo 1 =============================
 000008F1  51		   *	    push   ecx
 000008F2  B9 00000000			mov ecx, 0
 000008F7  8A 0D 00000023 R		mov cl, CtrlObs1
 000008FD  80 F9 00			cmp cl, 0
 00000900  74 6C			je TIPO2	;Se não existir obstáculo do tipo 1 pula para tipo 2
 00000902				PERCORRE1:
						;Deletando objeto1 da posição PosObs1[ecx]
 00000902  49					dec ecx
 00000903  8A 99 00000015 R			mov bl, PosObs1[ecx]
 00000909  88 1D 00000011 R			mov PosX, bl
 0000090F  C6 05 00000010 R			mov PosY, Y_OBSTACULO1
	   1A
 00000916  C6 05 00000012 R			mov larguraO, LARGURA_OBJ1
	   05
 0000091D  C6 05 00000013 R			mov alturaO, ALTURA_OBJ1
	   03
 00000924  E8 FFFFF950				call DeletaDesenho

		;Desenhando na nova posição
						.IF PosX >= 3 	;PosX >= 6
 00000929  80 3D 00000011 R
	   03		   *	    cmp    PosX, 003h
 00000930  72 21	   *	    jb	@C0038
 00000932  FE 0D 00000011 R				dec PosX     ;sub PosX, 5
 00000938  8A 1D 00000011 R				mov bl, PosX
 0000093E  88 99 00000015 R				mov PosObs1[ecx], bl
 00000944  88 1D 00000011 R				mov PosX, bl
 0000094A  E8 FFFFF964					call DesenhaObstaculo1
 0000094F  EB 1A					jmp INCREMENTA1
						.ELSE
 00000951  EB 18	   *	    jmp    @C003A
 00000953		   *@C0038:
 00000953  BA 00000015 R				mov edx, OFFSET PosObs1
 00000958  FE 0D 00000023 R				dec CtrlObs1
 0000095E  8A 1D 00000023 R				mov bl, CtrlObs1
 00000964  E8 0000007E					call ShiftLeftVetorPosicao
 00000969  EB 77					jmp INCREMENTA2
						.ENDIF
 0000096B		   *@C003A:
 0000096B					INCREMENTA1:
 0000096B  41					inc ecx
 0000096C  E2 94			loop PERCORRE1
					;=================================================
					;Obstáculos do tipo 2 ============================
 0000096E				TIPO2:
 0000096E  8A 0D 00000024 R		mov cl, CtrlObs2
 00000974  80 F9 00			cmp cl, 0
 00000977  74 6C			je SAIR		;Se não existir obstáculo do tipo 2, sai
 00000979				PERCORRE2:
						;Deletando objeto2 da posição PosObs2[ecx]
 00000979  49					dec ecx
 0000097A  8A 99 0000001C R			mov bl, PosObs2[ecx]
 00000980  88 1D 00000011 R			mov PosX, bl
 00000986  C6 05 00000010 R			mov PosY, Y_OBSTACULO2
	   13
 0000098D  C6 05 00000012 R			mov larguraO, LARGURA_OBJ2
	   05
 00000994  C6 05 00000013 R			mov alturaO, ALTURA_OBJ2
	   03
 0000099B  E8 FFFFF8D9				call DeletaDesenho

						;Desenhando na nova posição
						.IF PosX >= 3
 000009A0  80 3D 00000011 R
	   03		   *	    cmp    PosX, 003h
 000009A7  72 21	   *	    jb	@C003B
 000009A9  FE 0D 00000011 R				dec PosX
 000009AF  8A 1D 00000011 R				mov bl, PosX
 000009B5  88 99 0000001C R				mov PosObs2[ecx], bl
 000009BB  88 1D 00000011 R				mov PosX, bl
 000009C1  E8 FFFFF942					call DesenhaObstaculo2
 000009C6  EB 1A					jmp INCREMENTA2
						.ELSE
 000009C8  EB 18	   *	    jmp    @C003D
 000009CA		   *@C003B:
 000009CA  BA 0000001C R				mov edx, OFFSET PosObs2
 000009CF  FE 0D 00000024 R				dec CtrlObs2
 000009D5  8A 1D 00000024 R				mov bl, CtrlObs2
 000009DB  E8 00000007					call ShiftLeftVetorPosicao
 000009E0  EB 00					jmp INCREMENTA2
						.ENDIF
 000009E2		   *@C003D:
 000009E2					INCREMENTA2:
 000009E2  41					inc ecx
 000009E3  E2 94			loop PERCORRE2
					;=================================================
 000009E5				SAIR:
					ret
 000009E5  59		   *	    pop    ecx
 000009E6  C3		   *	    ret    00000h
 000009E7			AtualizaObstaculos ENDP
				;====================================================================

				;=====================Shift Vetor Posição=========================
				;Recebe: edx = OFFSET do Vetor, ebx = numero de elementos do vetor -1
				;retorna: vetor shiftado para a esquerda
				;====================================================================
 000009E7			ShiftLeftVetorPosicao PROC USES ecx ebx edx
 000009E7  51		   *	    push   ecx
 000009E8  53		   *	    push   ebx
 000009E9  52		   *	    push   edx
 000009EA  8B CB			mov ecx, ebx
 000009EC  83 F9 00			cmp ecx, 0
 000009EF  74 0B			je EXCEPTION_ ;Se ecx = 0 loop não funciona corretamente
 000009F1				PERCORRE:
 000009F1  42					inc edx
 000009F2  8A 1A				mov bl, [edx]
 000009F4  4A					dec edx
 000009F5  88 1A				mov [edx], bl 
 000009F7  42					inc edx
 000009F8  E2 F7			loop PERCORRE
 000009FA  EB 07			jmp SAIR

 000009FC				EXCEPTION_:
 000009FC  42					inc edx
 000009FD  8A 1A				mov bl, [edx]
 000009FF  4A					dec edx
 00000A00  88 1A				mov [edx], bl 
 00000A02  42					inc edx
 00000A03				SAIR:
					ret
 00000A03  5A		   *	    pop    edx
 00000A04  5B		   *	    pop    ebx
 00000A05  59		   *	    pop    ecx
 00000A06  C3		   *	    ret    00000h
 00000A07			ShiftLeftVetorPosicao ENDP
				;====================================================================

				;========================Reset ======================================
				;Recebe: CtrlObs1, CtrlObs2, contadores de tempo, e Pontos
				;Retorna: CtrlObs1 = 0 e CtrlObs2 = 0, todos os contadores = 0 e Pontos = 0
				;====================================================================
 00000A07			Reset PROC
 00000A07  C6 05 00000023 R		mov CtrlObs1, 0
	   00
 00000A0E  C6 05 00000024 R		mov CtrlObs2, 0
	   00
 00000A15  C7 05 00000000 R		mov contadorTempo, 0
	   00000000
 00000A1F  C7 05 00000004 R		mov contadorObstaculo, 0
	   00000000
 00000A29  C7 05 00000008 R		mov contadorPulo, 0
	   00000000
 00000A33  C7 05 0000000C R		mov contadorAgacha, 0
	   00000000
 00000A3D  C6 05 00000015 R		mov PosObs1, 0
	   00
 00000A44  C6 05 0000001C R		mov PosObs2, 0
	   00
 00000A4B  C7 05 00000040 R		mov Pontos, 0
	   00000000
 00000A55  C3				ret
 00000A56			Reset ENDP
				;====================================================================
				;============================Perdeu==================================
				;Recebe: nda
				;Retorna: tela de game over
				;====================================================================
 00000A56			Perdeu PROC
 00000A56  E8 00000000 E		call Clrscr
 00000A5B  B8 00000004			mov eax, red
 00000A60  E8 00000000 E		call SetTextColor
 00000A65  B2 01			mov dl, 1
 00000A67  B6 0A			mov dh, 10
 00000A69  E8 00000000 E		call GotoXY
 00000A6E  BA 000005AA R		mov edx, OFFSET gameover
 00000A73  E8 00000000 E		call WriteString
 00000A78  B8 0000000F			mov eax, white
 00000A7D  E8 00000000 E		call SetTextColor

 00000A82  B2 01			mov dl, 1
 00000A84  B6 16			mov dh, 22
 00000A86  E8 00000000 E		call GotoXY
 00000A8B  BA 0000079C R		mov edx, OFFSET menuFinal
 00000A90  E8 00000000 E		call WriteString
 00000A95  B8 00000004			mov eax, red
 00000A9A  E8 00000000 E		call SetTextColor
 00000A9F  E8 FFFFF597			call Moldura

					;RESULTADO FINAL
 00000AA4  B8 0000000F			mov eax, white
 00000AA9  E8 00000000 E		call SetTextColor
 00000AAE  B2 2D			mov dl, 45
 00000AB0  B6 12			mov dh, 18
 00000AB2  E8 00000000 E		call GotoXY
 00000AB7  A1 00000040 R		mov eax, Pontos
					.IF eax > Recorde
 00000ABC  3B 05 00000044 R *	    cmp    eax, Recorde
 00000AC2  76 1D	   *	    jbe    @C003E
 00000AC4  BA 00000031 R			mov edx, OFFSET NovoRecorde
 00000AC9  E8 00000000 E			call WriteString
 00000ACE  E8 FFFFFF34				call Reset
 00000AD3  E8 00000000 E			call WriteDec
 00000AD8  A3 00000044 R			mov Recorde, eax
 00000ADD  EB 13				jmp ESPERANDO_TECLA
					.ELSE
 00000ADF  EB 11	   *	    jmp    @C0040
 00000AE1		   *@C003E:
 00000AE1  BA 00000025 R			mov edx, OFFSET Score
 00000AE6  E8 00000000 E			call WriteString
 00000AEB  E8 00000000 E			call WriteDec
 00000AF0  EB 00				jmp ESPERANDO_TECLA
					.ENDIF
 00000AF2		   *@C0040:

 00000AF2				ESPERANDO_TECLA:
 00000AF2  B8 00000032				mov  eax,50          ; sleep, to allow OS to time slice
 00000AF7  E8 00000000 E			call Delay           ; (otherwise, some key presses are lost)
 00000AFC  E8 00000000 E			call ReadKey         ; look for keyboard input 

						.IF al == "1"
 00000B01  3C 31	   *	    cmp    al, '1'
 00000B03  75 04	   *	    jne    @C0041
 00000B05  EB 0F					jmp MENU_
						.ELSEIF al == VK_ESCAPE
 00000B07  EB 0B	   *	    jmp    @C0043
 00000B09		   *@C0041:
 00000B09  3C 1B	   *	    cmp    al, VK_ESCAPE
 00000B0B  75 07	   *	    jne    @C0044
							exit
 00000B0D  6A 00	   *	    push   +000000000h
 00000B0F  E8 00000000 E   *	    call   ExitProcess
						.ENDIF
 00000B14		   *@C0044:
 00000B14		   *@C0043:
 00000B14  EB DC			jmp   ESPERANDO_TECLA    ; nenhuma tecla válida pressionada, tenta novamente
					
 00000B16				MENU_:
 00000B16  E8 FFFFFEEC			call Reset
 00000B1B  C3				ret
 00000B1C			Perdeu ENDP
				;====================================================================

 00000B1C			main PROC
 00000B1C				MENU_:
 00000B1C  E8 00000000 E		call Clrscr
					;Desenha menu
 00000B21  E8 FFFFF4DA			call DesenhaMenu  
 00000B26  B8 00000004			mov eax, red     ;cor da moldura
 00000B2B  E8 FFFFF50B			call Moldura

					;Esperando tecla ser pressionada
 00000B30				ESPERANDO_TECLA:
 00000B30  B8 00000032				mov  eax,50          ; sleep, to allow OS to time slice
 00000B35  E8 00000000 E			call Delay           ; (otherwise, some key presses are lost)
 00000B3A  E8 00000000 E			call ReadKey         ; look for keyboard input 

					.IF al == "1"			 ;JOGO FÁCIL
 00000B3F  3C 31	   *	    cmp    al, '1'
 00000B41  75 0E	   *	    jne    @C0046
 00000B43  E8 FFFFF90D				call Jogo
 00000B48  E8 FFFFFF09				call Perdeu
 00000B4D  EB CD				jmp MENU_
					.ELSEIF al == "2"
 00000B4F  EB 1D	   *	    jmp    @C0048
 00000B51		   *@C0046:
 00000B51  3C 32	   *	    cmp    al, '2'
 00000B53  75 0E	   *	    jne    @C0049
 00000B55  E8 FFFFFB49				call Jogo2
 00000B5A  E8 FFFFFEF7				call Perdeu
 00000B5F  EB BB				jmp MENU_
					.ELSEIF al == VK_ESCAPE
 00000B61  EB 0B	   *	    jmp    @C004B
 00000B63		   *@C0049:
 00000B63  3C 1B	   *	    cmp    al, VK_ESCAPE
 00000B65  75 07	   *	    jne    @C004C
						exit
 00000B67  6A 00	   *	    push   +000000000h
 00000B69  E8 00000000 E   *	    call   ExitProcess
					.ENDIF
 00000B6E		   *@C004C:
 00000B6E		   *@C004B:
 00000B6E		   *@C0048:
					
 00000B6E  EB C0			jmp   ESPERANDO_TECLA    ; nenhuma tecla válida pressionada, tenta novamente
 00000B70				SAIR:
 00000B70  B6 28				mov dh, 40
 00000B72  E8 00000000 E			call GotoXY
					exit
 00000B77  6A 00	   *	    push   +000000000h
 00000B79  E8 00000000 E   *	    call   ExitProcess
 00000B7E			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.16.27027.1	    06/15/19 19:17:23
jogo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000823 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000B7E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaObstaculos . . . . . . .	P Near	 000008F1 _TEXT	Length= 000000F6 Public STDCALL
  PERCORRE1  . . . . . . . . . .	L Near	 00000902 _TEXT	
  INCREMENTA1  . . . . . . . . .	L Near	 0000096B _TEXT	
  TIPO2  . . . . . . . . . . . .	L Near	 0000096E _TEXT	
  PERCORRE2  . . . . . . . . . .	L Near	 00000979 _TEXT	
  INCREMENTA2  . . . . . . . . .	L Near	 000009E2 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 000009E5 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CriaObstaculo  . . . . . . . . .	P Near	 000003F7 _TEXT	Length= 0000005E Public STDCALL
  FIM  . . . . . . . . . . . . .	L Near	 00000454 _TEXT	
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeletaDesenho  . . . . . . . . .	P Near	 00000279 _TEXT	Length= 0000003A Public STDCALL
  LINHA  . . . . . . . . . . . .	L Near	 00000296 _TEXT	
  COLUNA . . . . . . . . . . . .	L Near	 0000029E _TEXT	
DesenhaCeu . . . . . . . . . . .	P Near	 0000036E _TEXT	Length= 0000003B Public STDCALL
DesenhaGansoAgachado2  . . . . .	P Near	 000001B1 _TEXT	Length= 000000AB Public STDCALL
DesenhaGansoAgachado . . . . . .	P Near	 0000025C _TEXT	Length= 0000001D Public STDCALL
DesenhaGansoEmPE2  . . . . . . .	P Near	 000000E1 _TEXT	Length= 000000D0 Public STDCALL
DesenhaGansoEmPe . . . . . . . .	P Near	 00000097 _TEXT	Length= 0000004A Public STDCALL
  REMOLDURA  . . . . . . . . . .	L Near	 000000CF _TEXT	
DesenhaMenu  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003B Public STDCALL
DesenhaObstaculo1  . . . . . . .	P Near	 000002B3 _TEXT	Length= 00000055 Public STDCALL
  CIMA . . . . . . . . . . . . .	L Near	 000002CD _TEXT	
  LADOS  . . . . . . . . . . . .	L Near	 000002E8 _TEXT	
DesenhaObstaculo2  . . . . . . .	P Near	 00000308 _TEXT	Length= 00000066 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000034D _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InicializaJogo . . . . . . . . .	P Near	 000003A9 _TEXT	Length= 00000026 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Jogo2  . . . . . . . . . . . . .	P Near	 000006A3 _TEXT	Length= 0000024E Public STDCALL
  JOGO_LOOP  . . . . . . . . . .	L Near	 000006A8 _TEXT	
  NPULANDO . . . . . . . . . . .	L Near	 0000074D _TEXT	
  AGACHADO_  . . . . . . . . . .	L Near	 00000766 _TEXT	
  DELETA_  . . . . . . . . . . .	L Near	 00000774 _TEXT	
  DELAY_MOVIMENTO  . . . . . . .	L Near	 000007A9 _TEXT	
  DELAY_MOVIMENTO2 . . . . . . .	L Near	 000007FE _TEXT	
  ATUALIZA_OBSTACULOS  . . . . .	L Near	 00000853 _TEXT	
  TESTA_COLISAO  . . . . . . . .	L Near	 00000878 _TEXT	
  PERDEU_  . . . . . . . . . . .	L Near	 000008F0 _TEXT	
Jogo . . . . . . . . . . . . . .	P Near	 00000455 _TEXT	Length= 0000024E Public STDCALL
  JOGO_LOOP  . . . . . . . . . .	L Near	 0000045A _TEXT	
  NPULANDO . . . . . . . . . . .	L Near	 000004FF _TEXT	
  AGACHADO_  . . . . . . . . . .	L Near	 00000518 _TEXT	
  DELETA_  . . . . . . . . . . .	L Near	 00000526 _TEXT	
  DELAY_MOVIMENTO  . . . . . . .	L Near	 0000055B _TEXT	
  DELAY_MOVIMENTO2 . . . . . . .	L Near	 000005B0 _TEXT	
  ATUALIZA_OBSTACULOS  . . . . .	L Near	 00000605 _TEXT	
  TESTA_COLISAO  . . . . . . . .	L Near	 0000062A _TEXT	
  PERDEU_  . . . . . . . . . . .	L Near	 000006A2 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Moldura  . . . . . . . . . . . .	P Near	 0000003B _TEXT	Length= 0000005C Public STDCALL
  INFERIOR . . . . . . . . . . .	L Near	 0000004F _TEXT	
  HORIZONTAL . . . . . . . . . .	L Near	 00000058 _TEXT	
  VERTICAL . . . . . . . . . . .	L Near	 00000076 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Perdeu . . . . . . . . . . . . .	P Near	 00000A56 _TEXT	Length= 000000C6 Public STDCALL
  ESPERANDO_TECLA  . . . . . . .	L Near	 00000AF2 _TEXT	
  MENU_  . . . . . . . . . . . .	L Near	 00000B16 _TEXT	
Pontuacao  . . . . . . . . . . .	P Near	 000003CF _TEXT	Length= 00000028 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Reset  . . . . . . . . . . . . .	P Near	 00000A07 _TEXT	Length= 0000004F Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftLeftVetorPosicao  . . . . .	P Near	 000009E7 _TEXT	Length= 00000020 Public STDCALL
  PERCORRE . . . . . . . . . . .	L Near	 000009F1 _TEXT	
  EXCEPTION_ . . . . . . . . . .	L Near	 000009FC _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000A03 _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000B1C _TEXT	Length= 00000062 Public STDCALL
  MENU_  . . . . . . . . . . . .	L Near	 00000B1C _TEXT	
  ESPERANDO_TECLA  . . . . . . .	L Near	 00000B30 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000B70 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALTURA_GANSO_AGACHADO  . . . . .	Number	 00000007h   
ALTURA_GANSO . . . . . . . . . .	Number	 00000009h   
ALTURA_OBJ1  . . . . . . . . . .	Number	 00000003h   
ALTURA_OBJ2  . . . . . . . . . .	Number	 00000003h   
ALTURA . . . . . . . . . . . . .	Number	 0000001Dh   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CtrlObs1 . . . . . . . . . . . .	Byte	 00000023 _DATA	
CtrlObs2 . . . . . . . . . . . .	Byte	 00000024 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LARGURA_GANSO  . . . . . . . . .	Number	 0000000Ch   
LARGURA_OBJ1 . . . . . . . . . .	Number	 00000005h   
LARGURA_OBJ2 . . . . . . . . . .	Number	 00000005h   
LARGURA  . . . . . . . . . . . .	Number	 00000069h   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NovoRecorde  . . . . . . . . . .	Byte	 00000031 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Pontos . . . . . . . . . . . . .	DWord	 00000040 _DATA	
PosObs1  . . . . . . . . . . . .	Byte	 00000015 _DATA	
PosObs2  . . . . . . . . . . . .	Byte	 0000001C _DATA	
PosX . . . . . . . . . . . . . .	Byte	 00000011 _DATA	
PosY . . . . . . . . . . . . . .	Byte	 00000010 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Recorde  . . . . . . . . . . . .	DWord	 00000044 _DATA	
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
Score  . . . . . . . . . . . . .	Byte	 00000025 _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
X_SCORE  . . . . . . . . . . . .	Number	 0000004Dh   
Y_GANSO_AGACHADO . . . . . . . .	Number	 00000016h   
Y_GANSO_EM_PE  . . . . . . . . .	Number	 00000014h   
Y_GANSO_PULANDO  . . . . . . . .	Number	 0000000Fh   
Y_OBSTACULO1 . . . . . . . . . .	Number	 0000001Ah   
Y_OBSTACULO2 . . . . . . . . . .	Number	 00000013h   
Y_SCORE  . . . . . . . . . . . .	Number	 00000005h   
alturaO  . . . . . . . . . . . .	Byte	 00000013 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
contadorAgacha . . . . . . . . .	DWord	 0000000C _DATA	
contadorObstaculo  . . . . . . .	DWord	 00000004 _DATA	
contadorPulo . . . . . . . . . .	DWord	 00000008 _DATA	
contadorTempo  . . . . . . . . .	DWord	 00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gameover . . . . . . . . . . . .	Byte	 000005AA _DATA	
ganso1 . . . . . . . . . . . . .	Byte	 0000026A _DATA	
ganso2 . . . . . . . . . . . . .	Byte	 0000026F _DATA	
ganso3 . . . . . . . . . . . . .	Byte	 00000276 _DATA	
ganso4 . . . . . . . . . . . . .	Byte	 0000027D _DATA	
ganso5 . . . . . . . . . . . . .	Byte	 0000028A _DATA	
ganso6 . . . . . . . . . . . . .	Byte	 00000297 _DATA	
ganso7 . . . . . . . . . . . . .	Byte	 000002A2 _DATA	
ganso8 . . . . . . . . . . . . .	Byte	 000002AA _DATA	
ganso9 . . . . . . . . . . . . .	Byte	 000002B2 _DATA	
ganso_agachado1  . . . . . . . .	Byte	 000002B8 _DATA	
ganso_agachado2  . . . . . . . .	Byte	 000002BD _DATA	
ganso_agachado3  . . . . . . . .	Byte	 000002C4 _DATA	
ganso_agachado4  . . . . . . . .	Byte	 000002D1 _DATA	
ganso_agachado5  . . . . . . . .	Byte	 000002E0 _DATA	
ganso_agachado6  . . . . . . . .	Byte	 000002ED _DATA	
ganso_agachado7  . . . . . . . .	Byte	 000002FA _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
larguraO . . . . . . . . . . . .	Byte	 00000012 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
logo . . . . . . . . . . . . . .	Byte	 00000048 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuFinal  . . . . . . . . . . .	Byte	 0000079C _DATA	
menu . . . . . . . . . . . . . .	Byte	 000001E5 _DATA	
nuvem  . . . . . . . . . . . . .	Byte	 00000305 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sol  . . . . . . . . . . . . . .	Byte	 000004F6 _DATA	
statusGanso  . . . . . . . . . .	Byte	 00000014 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
