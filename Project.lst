Microsoft (R) Macro Assembler Version 14.16.27027.1	    06/15/19 13:33:49
jogo.asm						     Page 1 - 1


				; Implementa��o do jogo Ganso Attack!! em assembly pelos alunos
				; Matheus de Brito Soares Porto RA: 744348
				; Vitor Hugo Guilherme          RA: 744359
				; Da disciplina Arquitetura e Organiza��o de Computadores 2 - DC- UFSCar
				; Professor: Dr. Luciano Neres

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 00000000		outHandle    DWORD ? 
 00000004 0055 0032		scrSize COORD <85,50>
 00000008 00000000		contadorTempo DWORD 0
 0000000C 00000000		contadorObstaculo DWORD 0
 00000010 00000000		contadorPulo DWORD 0 
 00000014 00000000		contadorAgacha DWORD 0

				;constantes utilizadas no desenho da moldura
 = 00000069			LARGURA = 105
 = 0000001E			ALTURA = 30

				;Variáveis auxiliares para impressão e exclusão de objetos da tela
 00000018 00			PosY BYTE ?
 00000019 00			PosX BYTE ?
 0000001A 00			larguraO BYTE ?
 0000001B 00			alturaO BYTE ?

 0000001C 01			statusGanso BYTE 1 ; 0 = Agachado, 1 = em pé, 2 = pulando

				;Tamanho dos desenhos
 = 00000005			LARGURA_OBJ1 = 5
 = 00000003			ALTURA_OBJ1 = 3
 = 00000005			LARGURA_OBJ2 = 5
 = 00000003			ALTURA_OBJ2 = 3
 = 0000000C			LARGURA_GANSO = 12
 = 00000009			ALTURA_GANSO = 9
 = 00000007			ALTURA_GANSO_AGACHADO = 7
				;Posição no eixo Y dos desenhos
 = 00000014			Y_GANSO_EM_PE = 20
 = 0000000F			Y_GANSO_PULANDO =  15
 = 00000016			Y_GANSO_AGACHADO = 22
 = 0000001A			Y_OBSTACULO1 = 26
 = 00000013			Y_OBSTACULO2 = 19

				;Fila de posição dos obstáculos
 0000001D  00000007 [		PosObs1 BYTE 7 DUP(?)
	    00
	   ]
 00000024  00000007 [		PosObs2 BYTE 7 DUP(?)
	    00
	   ]
 0000002B 00			CtrlObs1 BYTE 0			;posições atuais da fila
 0000002C 00			CtrlObs2 BYTE 0


				; Logo do jogo
 0000002D 20 20 20 20 20	logo BYTE "                      ____                            _   _   _             _    _ _ ",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 5F
	   20 20 20 5F 20
	   20 20 5F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5F 20 20 20
	   20 5F 20 5F 20
	   0A 0D
 00000084  09 20 20 20 20		 BYTE "	              / ___| __ _ _ __  ___  ___      / \ | |_| |_ __ _  ___| | _| | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   2F 20 5F 5F 5F
	   7C 20 5F 5F 20
	   5F 20 5F 20 5F
	   5F 20 20 5F 5F
	   5F 20 20 5F 5F
	   5F 20 20 20 20
	   20 20 2F 20 5C
	   20 7C 20 7C 5F
	   7C 20 7C 5F 20
	   5F 5F 20 5F 20
	   20 5F 5F 5F 7C
	   20 7C 20 5F 7C
	   20 7C 20 7C 0A
	   0D
 000000D5  09 20 20 20 20		 BYTE "	             | |  _ / _` | '_ \/ __|/ _ \    / _ \| __| __/ _` |/ __| |/ / | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 20 5F
	   20 2F 20 5F 60
	   20 7C 20 27 5F
	   20 5C 2F 20 5F
	   5F 7C 2F 20 5F
	   20 5C 20 20 20
	   20 2F 20 5F 20
	   5C 7C 20 5F 5F
	   7C 20 5F 5F 2F
	   20 5F 60 20 7C
	   2F 20 5F 5F 7C
	   20 7C 2F 20 2F
	   20 7C 20 7C 0A
	   0D
 00000126  09 20 20 20 20		 BYTE "	             | |_| | (_| | | | \__ \ (_) |  / ___ \ |_| || (_| | (__|   <|_|_|",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 5F 7C 20
	   7C 20 28 5F 7C
	   20 7C 20 7C 20
	   7C 20 5C 5F 5F
	   20 5C 20 28 5F
	   29 20 7C 20 20
	   2F 20 5F 5F 5F
	   20 5C 20 7C 5F
	   7C 20 7C 7C 20
	   28 5F 7C 20 7C
	   20 28 5F 5F 7C
	   20 20 20 3C 7C
	   5F 7C 5F 7C 0A
	   0D
 00000177  09 20 20 20 20		 BYTE "	              \____|\__,_|_| |_|___/\___/  /_/   \_\__|\__\__,_|\___|_|\_(_|_)",0ah, 0dh, 0 
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   7C 5C 5F 5F 2C
	   5F 7C 5F 7C 20
	   7C 5F 7C 5F 5F
	   5F 2F 5C 5F 5F
	   5F 2F 20 20 2F
	   5F 2F 20 20 20
	   5C 5F 5C 5F 5F
	   7C 5C 5F 5F 5C
	   5F 5F 2C 5F 7C
	   5C 5F 5F 5F 7C
	   5F 7C 5C 5F 28
	   5F 7C 5F 29 0A
	   0D 00

				; MENU
 000001C9 53 65 6C 65 63	 menu   BYTE "Selecione uma dificuldade para jogar:",0ah, 0dh, 0ah
	   69 6F 6E 65 20
	   75 6D 61 20 64
	   69 66 69 63 75
	   6C 64 61 64 65
	   20 70 61 72 61
	   20 6A 6F 67 61
	   72 3A 0A 0D 0A
 000001F1  09 09 09 09 20			BYTE "				              1 - Facil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 31 20
	   2D 20 46 61 63
	   69 6C 0A 0D
 0000020E  09 09 09 09 20			BYTE "				              2 - Dificil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 32 20
	   2D 20 44 69 66
	   69 63 69 6C 0A
	   0D
 0000022D  09 09 09 09 20	        BYTE "				              ESC - SAIR",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 45 53
	   43 20 2D 20 53
	   41 49 52 0A 0D
 0000024B  09 09 09 09 00			BYTE "				",0
						
				;Ganso
 00000250 5F 5F 0A 0D 00	ganso1 	BYTE                          "__",0ah,0dh,0  
 00000255 2F 20 20 3E 0A	ganso2	BYTE                         "/  >",0ah,0dh,0  
	   0D 00
 0000025C 2F 20 20 5C 0A	ganso3	BYTE                        "/  \",0ah,0dh,0  
	   0D 00
 00000263 5F 5F 5F 5F 5F	ganso4	BYTE                  "_____/   /",0ah,0dh,0  
	   2F 20 20 20 2F
	   0A 0D 00
 00000270 3C 20 20 20 20	ganso5	BYTE                 "<        /",0ah,0dh,0  
	   20 20 20 20 2F
	   0A 0D 00
 0000027D 5C 5F 20 20 20	ganso6	BYTE                  "\_    _/",0ah,0dh,0  
	   20 5F 2F 0A 0D
	   00
 00000288 7C 20 20 20 7C	ganso7	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 00000290 7C 20 20 20 7C	ganso8	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 00000298 5E 20 20 20 5E	ganso9	BYTE                    "^   ^",0
	   00
					
				; Ganso Agachado
 0000029E 5F 5F 0A 0D 00	ganso_agachado1 	BYTE                         "__",0ah,0dh,0  
 000002A3 2F 20 20 3E 0A	ganso_agachado2		BYTE                       "/  >",0ah,0dh,0  
	   0D 00
 000002AA 5F 5F 5F 5F 5F	ganso_agachado3		BYTE                 "_____/  \ ",0ah,0dh,0  
	   2F 20 20 5C 20
	   0A 0D 00
 000002B7 3C 20 20 20 20	ganso_agachado4		BYTE                "<        /  ",0ah,0dh,0  
	   20 20 20 20 2F
	   20 20 0A 0D 00
 000002C6 5C 5F 20 20 20	ganso_agachado5		BYTE                  "\_   _/   ",0ah,0dh,0  
	   5F 2F 20 20 20
	   0A 0D 00
 000002D3 7C 20 20 20 7C	ganso_agachado6		BYTE                   "|   |     ",0ah,0dh,0  
	   20 20 20 20 20
	   0A 0D 00
 000002E0 5E 20 20 20 5E	ganso_agachado7		BYTE                   "^   ^     ",0
	   20 20 20 20 20
	   00
								
				; Obstaculos
				;obstaculo1 	BYTE "!!!!!",0ah,0dh
				;			BYTE "!   !",0ah,0dh
				;			BYTE "!   !",0ah,0dh,0
							
				;obstaculo2  BYTE " /",0ah,0dh
				;			BYTE "x----",0ah,0dh
				;			BYTE " \ ",0ah,0dh,0

 000002EB 09 09 20 20 20	nuvem   BYTE "		                                         ____     ____        ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 0A
	   0D
 0000032D  09 20 20 20 20	    	BYTE "	                                              __/    \___/    \____   ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 2F
	   20 20 20 20 5C
	   5F 5F 5F 2F 20
	   20 20 20 5C 5F
	   5F 5F 5F 20 20
	   20 0A 0D
 00000376  09 20 20 20 20	       	BYTE "	                                             /                     \  ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 0A 0D
 000003BF  20 20 20 20 20	   		BYTE "                                                    |                       \ ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 0A 0D
 0000040F  09 20 20 20 20	    	BYTE "	                                             \___      __         __| ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   20 20 20 20 20
	   20 5F 5F 20 20
	   20 20 20 20 20
	   20 20 5F 5F 7C
	   20 0A 0D
 00000458  09 20 20 20 20	        BYTE "	                                                 \____/  \       /    ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   2F 20 20 5C 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 0A 0D
 000004A1  20 09 09 09 20	        BYTE " 			                                          \_____/     ",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   5F 5F 2F 20 20
	   20 20 20 00



 000004DC 20 20 20 20 20	sol     BYTE"          \     /      ",0ah,0dh 
	   20 20 20 20 20
	   5C 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 0A 0D
 000004F5  20 20 20 20 20	        BYTE"            \___/       ",0ah,0dh
	   20 20 20 20 20
	   20 20 5C 5F 5F
	   5F 2F 20 20 20
	   20 20 20 20 0A
	   0D
 0000050F  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 00000529  20 20 20 20 20	        BYTE"      ____|       |____ ",0ah,0dh
	   20 5F 5F 5F 5F
	   7C 20 20 20 20
	   20 20 20 7C 5F
	   5F 5F 5F 20 0A
	   0D
 00000543  20 20 20 20 20	        BYTE"           \ ___ /      ",0ah,0dh
	   20 20 20 20 20
	   20 5C 20 5F 5F
	   5F 20 2F 20 20
	   20 20 20 20 0A
	   0D
 0000055D  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 00000577  20 20 20 20 20	        BYTE"          /       \     ",0
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 00

 00000000			.code
				;==================Desenha o menu inicial ==========================
				;Recebe: nda
				;Retorna: Desenho do menu na tela
				;===================================================================
 00000000			DesenhaMenu PROC
 00000000  B8 00000004			mov  eax, red
 00000005  E8 00000000 E		call SetTextColor
 0000000A  B2 01			mov dl, 1
 0000000C  B6 06			mov dh, 6
 0000000E  E8 00000000 E		call GotoXY
 00000013  BA 0000002D R		mov edx, OFFSET logo
 00000018  E8 00000000 E	    call WriteString

 0000001D  B8 0000000F			mov eax, white
 00000022  E8 00000000 E		call SetTextColor
 00000027  B2 20			mov dl,32
 00000029  B6 0F			mov dh, 15
 0000002B  E8 00000000 E		call GotoXY
 00000030  BA 000001C9 R	    mov edx, OFFSET menu   
 00000035  E8 00000000 E		call WriteString  
 0000003A  C3				ret
 0000003B			DesenhaMenu ENDP
				;===================================================================

				;==============Desenha a moldura da tela=============================
				;Recebe: eax com a cor da moldura, LARGURA e ALTURA da tela
				;Retorna: desenho da moldura na tela 
				;====================================================================
 0000003B			Moldura PROC USES edx ecx
 0000003B  52		   *	    push   edx
 0000003C  51		   *	    push   ecx
 0000003D  E8 00000000 E		call SetTextColor

					;Superior
 00000042  B2 01			mov dl, 1
 00000044  B6 01			mov dh, 1
 00000046  B9 00000069			mov ecx, LARGURA ;LARGURA da tela do jogo
 0000004B  B0 DC			mov al, 220	;caracter ASCII que compõe as barras superior e inferior
 0000004D  EB 09			jmp HORIZONTAL

 0000004F				INFERIOR:
 0000004F  B2 01				mov dl, 1
 00000051  B6 1E				mov dh, ALTURA	; posição da barra inferior
 00000053  B9 00000069				mov ecx, LARGURA ;LARGURA da tela do jogo

					;Desenha as barras superior e inferior(uma por vez)
 00000058				HORIZONTAL:          
 00000058  E8 00000000 E			call GotoXY
 0000005D  E8 00000000 E			call WriteChar
 00000062  FE C2				inc dl
 00000064  E2 F2			loop HORIZONTAL
 00000066  80 FE 1E			cmp dh, ALTURA
 00000069  75 E4			jne INFERIOR ;se dh != 24 vai para inferior desenhar a outra barra

					;Laterais
 0000006B  B2 01			mov dl, 1
 0000006D  B6 02			mov dh, 2
 0000006F  B9 0000001D			mov ecx, ALTURA-1
 00000074  B0 DB			mov al, 219 ;caracter que compõe as barras laterais

					;Desenha as barras verticais(as duas juntas)
 00000076				VERTICAL:            
 00000076  E8 00000000 E			call GotoXY
 0000007B  E8 00000000 E			call WriteChar
 00000080  80 C2 68				add dl, LARGURA-1	;pula para a esquerda
 00000083  E8 00000000 E			call GotoXY
 00000088  E8 00000000 E			call WriteChar
 0000008D  80 EA 68				sub dl, LARGURA-1	;volta para a direita
 00000090  FE C6				inc dh
 00000092  E2 E2			loop VERTICAL
					ret
 00000094  59		   *	    pop    ecx
 00000095  5A		   *	    pop    edx
 00000096  C3		   *	    ret    00000h
 00000097			Moldura ENDP

				;======================Desenha o Ganso Em Pe =======================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela
				;===================================================================
 00000097			DesenhaGansoEmPe PROC USES eax edx ecx
 00000097  50		   *	    push   eax
 00000098  52		   *	    push   edx
 00000099  51		   *	    push   ecx
 0000009A  B8 0000000F			mov eax, white
 0000009F  E8 00000000 E		call SetTextColor
 000000A4  B2 01			mov dl,1
 000000A6  8A 35 00000018 R		mov dh,PosY
 000000AC  E8 00000000 E		call GotoXY
					;mov edx, OFFSET ganso
 000000B1  E8 00000000 E		call WriteString
					
					;redesenha moldura que é apagada
 000000B6  B8 00000002			mov eax, green
 000000BB  E8 00000000 E	    call SetTextColor
 000000C0  B2 01			mov dl, 1
 000000C2  8A 35 00000018 R		mov dh, PosY
 000000C8  B9 00000009			mov ecx, 9
 000000CD  B0 DB			mov al, 219
 000000CF				REMOLDURA:
 000000CF  E8 00000000 E			call GotoXY
 000000D4  E8 00000000 E			call WriteChar
 000000D9  FE C6				inc dh
 000000DB  E2 F2			loop REMOLDURA
				ret
 000000DD  59		   *	    pop    ecx
 000000DE  5A		   *	    pop    edx
 000000DF  58		   *	    pop    eax
 000000E0  C3		   *	    ret    00000h
 000000E1			DesenhaGansoEmPe ENDP
				;===================================================================

 000000E1			DesenhaGansoEmPE2 PROC USES edx eax
 000000E1  52		   *	    push   edx
 000000E2  50		   *	    push   eax
 000000E3  B8 0000000F			mov eax, white
 000000E8  E8 00000000 E		call SetTextColor
 000000ED  B2 19		    mov dl, 25
 000000EF  8A 35 00000018 R		mov dh, PosY
 000000F5  52				push edx
 000000F6  E8 00000000 E		call GotoXY
 000000FB  BA 00000250 R		mov edx, OFFSET ganso1
 00000100  E8 00000000 E		call WriteString

 00000105  5A				pop edx
 00000106  B2 18		    mov dl, 24
 00000108  FE C6			inc dh
 0000010A  E8 00000000 E		call GotoXY
 0000010F  52				push edx
 00000110  BA 00000255 R		mov edx, OFFSET ganso2
 00000115  E8 00000000 E		call WriteString

 0000011A  5A			    pop edx
 0000011B  B2 17			mov dl, 23
 0000011D  FE C6			inc dh
 0000011F  E8 00000000 E		call GotoXY
 00000124  52				push edx
 00000125  BA 0000025C R		mov edx, OFFSET ganso3
 0000012A  E8 00000000 E		call WriteString

 0000012F  5A				pop edx
 00000130  B2 11			mov dl, 17
 00000132  FE C6			inc dh
 00000134  E8 00000000 E		call GotoXY
 00000139  52				push edx
 0000013A  BA 00000263 R		mov edx, OFFSET ganso4
 0000013F  E8 00000000 E		call WriteString

 00000144  5A				pop edx
 00000145  B2 10			mov dl, 16
 00000147  FE C6			inc dh
 00000149  E8 00000000 E		call GotoXY
 0000014E  52				push edx
 0000014F  BA 00000270 R		mov edx, OFFSET ganso5
 00000154  E8 00000000 E		call WriteString	

 00000159  5A				pop edx
 0000015A  B2 11			mov dl, 17
 0000015C  FE C6			inc dh
 0000015E  E8 00000000 E		call GotoXY
 00000163  52				push edx
 00000164  BA 0000027D R		mov edx, OFFSET ganso6
 00000169  E8 00000000 E		call WriteString

 0000016E  5A				pop edx
 0000016F  B2 13			mov dl, 19
 00000171  FE C6			inc dh
 00000173  E8 00000000 E		call GotoXY
 00000178  52				push edx
 00000179  BA 00000288 R		mov edx, OFFSET ganso7
 0000017E  E8 00000000 E		call WriteString

 00000183  5A				pop edx
 00000184  B2 13			mov dl, 19
 00000186  FE C6			inc dh
 00000188  E8 00000000 E		call GotoXY
 0000018D  52				push edx
 0000018E  BA 00000290 R		mov edx, OFFSET ganso8
 00000193  E8 00000000 E		call WriteString

 00000198  5A				pop edx
 00000199  B2 13			mov dl, 19
 0000019B  FE C6			inc dh
 0000019D  E8 00000000 E		call GotoXY
 000001A2  52				push edx
 000001A3  BA 00000298 R		mov edx, OFFSET ganso9
 000001A8  E8 00000000 E		call WriteString 
 000001AD  5A				pop edx
					ret
 000001AE  58		   *	    pop    eax
 000001AF  5A		   *	    pop    edx
 000001B0  C3		   *	    ret    00000h
 000001B1			DesenhaGansoEmPE2 ENDP

 000001B1			DesenhaGansoAgachado2 PROC USES eax
 000001B1  50		   *	    push   eax
 000001B2  B8 0000000F		    mov eax, white
 000001B7  E8 00000000 E		call SetTextColor
 000001BC  B2 18		    mov dl, 24
 000001BE  8A 35 00000018 R		mov dh, PosY
 000001C4  52				push edx
 000001C5  E8 00000000 E		call GotoXY
 000001CA  BA 0000029E R		mov edx, OFFSET ganso_agachado1
 000001CF  E8 00000000 E		call WriteString

 000001D4  5A				pop edx
 000001D5  B2 17		    mov dl, 23
 000001D7  FE C6			inc dh
 000001D9  E8 00000000 E		call GotoXY
 000001DE  52				push edx
 000001DF  BA 000002A3 R		mov edx, OFFSET ganso_agachado2
 000001E4  E8 00000000 E		call WriteString

 000001E9  5A				pop edx
 000001EA  B2 11			mov dl, 17
 000001EC  FE C6			inc dh
 000001EE  E8 00000000 E		call GotoXY
 000001F3  52				push edx
 000001F4  BA 000002AA R		mov edx, OFFSET ganso_agachado3
 000001F9  E8 00000000 E		call WriteString

 000001FE  5A				pop edx
 000001FF  B2 10			mov dl, 16
 00000201  FE C6			inc dh
 00000203  E8 00000000 E		call GotoXY
 00000208  52				push edx
 00000209  BA 000002B7 R		mov edx, OFFSET ganso_agachado4
 0000020E  E8 00000000 E		call WriteString

 00000213  5A				pop edx
 00000214  B2 12			mov dl, 18
 00000216  FE C6			inc dh
 00000218  E8 00000000 E		call GotoXY
 0000021D  52				push edx
 0000021E  BA 000002C6 R		mov edx, OFFSET ganso_agachado5
 00000223  E8 00000000 E		call WriteString	

 00000228  5A				pop edx
 00000229  B2 13			mov dl, 19
 0000022B  FE C6			inc dh
 0000022D  E8 00000000 E		call GotoXY
 00000232  52				push edx
 00000233  BA 000002D3 R		mov edx, OFFSET ganso_agachado6
 00000238  E8 00000000 E		call WriteString

 0000023D  5A				pop edx
 0000023E  B2 13			mov dl, 19
 00000240  FE C6			inc dh
 00000242  E8 00000000 E		call GotoXY
 00000247  52				push edx
 00000248  BA 000002E0 R		mov edx, OFFSET ganso_agachado7
 0000024D  E8 00000000 E		call WriteString
 00000252  5A				pop edx

					ret
 00000253  58		   *	    pop    eax
 00000254  C3		   *	    ret    00000h
					exit
 00000255  6A 00	   *	    push   +000000000h
 00000257  E8 00000000 E   *	    call   ExitProcess
 0000025C			DesenhaGansoAgachado2 ENDP

				;======================Desenha o Ganso agachado=====================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela
				;===================================================================
 0000025C			DesenhaGansoAgachado PROC USES eax edx
 0000025C  50		   *	    push   eax
 0000025D  52		   *	    push   edx
 0000025E  B8 0000000F			mov eax, white
 00000263  E8 00000000 E		call SetTextColor
 00000268  B2 01			mov dl,1
 0000026A  B6 16			mov dh,Y_GANSO_AGACHADO
 0000026C  E8 00000000 E		call GotoXY
					;mov edx, OFFSET ganso_agachado
 00000271  E8 00000000 E		call WriteString
				ret
 00000276  5A		   *	    pop    edx
 00000277  58		   *	    pop    eax
 00000278  C3		   *	    ret    00000h
 00000279			DesenhaGansoAgachado ENDP
				;===================================================================

				;======================Deleta Desenho===============================
				;Recebe:PosX, PosY(ganso em pé = 20, obstaculo1 = 26, obstaculo2 = 19),
				;		larguraO, alturaO
				;Retorna:
				;===================================================================
 00000279			DeletaDesenho PROC USES edx eax ecx
 00000279  52		   *	    push   edx
 0000027A  50		   *	    push   eax
 0000027B  51		   *	    push   ecx
 0000027C  8A 15 00000019 R		mov dl, PosX
 00000282  8A 35 00000018 R		mov dh, PosY
 00000288  E8 00000000 E		call GotoXY
					
 0000028D  0F B6 0D			movzx ecx, alturaO   ; Nr de Linhas do Desenho
	   0000001B R
 00000294  B0 20			mov al, 32   ; Barra de Espaço
 00000296				LINHA:
 00000296  51					push ecx
 00000297  0F B6 0D				movzx ecx, larguraO   ; Nr de Colunas do Desenho
	   0000001A R
 0000029E					COLUNA:
 0000029E  E8 00000000 E				call WriteChar
 000002A3  E2 F9				loop COLUNA
 000002A5  59					pop ecx
 000002A6  FE C6				inc dh
 000002A8  E8 00000000 E			call GotoXY
 000002AD  E2 E7			loop LINHA

					ret
 000002AF  59		   *	    pop    ecx
 000002B0  58		   *	    pop    eax
 000002B1  5A		   *	    pop    edx
 000002B2  C3		   *	    ret    00000h
 000002B3			DeletaDesenho ENDP

				;=====================Desenha Obstaculo1============================
				;Recebe: PosX
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 000002B3			DesenhaObstaculo1 PROC USES ecx
 000002B3  51		   *	    push   ecx
 000002B4  B8 00000006			mov eax, brown
 000002B9  E8 00000000 E		call SetTextColor
 000002BE  8A 15 00000019 R		mov dl, PosX
 000002C4  B6 1A			mov dh, Y_OBSTACULO1
 000002C6  B0 21			mov al, "!"
 000002C8  B9 00000005			mov ecx, 5
 000002CD				CIMA:
 000002CD  E8 00000000 E			call GotoXY
 000002D2  E8 00000000 E			call WriteChar
 000002D7  FE C2				inc dl
 000002D9  E2 F2			loop CIMA
					
 000002DB  8A 15 00000019 R		mov dl, PosX
 000002E1  B6 1B			mov dh, 27
 000002E3  B9 00000002			mov ecx, 2
 000002E8				LADOS:
 000002E8  E8 00000000 E			call GotoXY
 000002ED  E8 00000000 E			call WriteChar
 000002F2  80 C2 04				add dl, 4
 000002F5  E8 00000000 E			call GotoXY
 000002FA  E8 00000000 E			call WriteChar
 000002FF  80 EA 04				sub dl, 4
 00000302  FE C6				inc dh
 00000304  E2 E2			loop LADOS
					ret
 00000306  59		   *	    pop    ecx
 00000307  C3		   *	    ret    00000h
 00000308			DesenhaObstaculo1 ENDP
				;====================================================================

				;=====================Desenha Obstaculo2============================
				;Recebe: PosXObstaculo2
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 00000308			DesenhaObstaculo2 PROC USES ecx
 00000308  51		   *	    push   ecx
 00000309  B8 00000004			mov eax, red
 0000030E  E8 00000000 E		call SetTextColor
 00000313  80 05 00000019 R		add PosX, 1
	   01
 0000031A  8A 15 00000019 R		mov dl, PosX
 00000320  B6 13			mov dh, Y_OBSTACULO2
 00000322  FE 0D 00000019 R		dec PosX

 00000328  B0 2F			mov al, "/"
 0000032A  E8 00000000 E		call GotoXY
 0000032F  E8 00000000 E		call WriteChar

 00000334  FE C6			inc dh
 00000336  FE CA			dec dl
 00000338  B0 78			mov al, "x"
 0000033A  E8 00000000 E		call GotoXY
 0000033F  E8 00000000 E		call WriteChar

 00000344  FE C2			inc dl
 00000346  B0 2D			mov al, "-"
 00000348  B9 00000004			mov ecx, 4
 0000034D				L1: 
 0000034D  E8 00000000 E			call GotoXY
 00000352  E8 00000000 E			call WriteChar
 00000357  FE C2				inc dl
 00000359  E2 F2			loop L1

 0000035B  FE C6			inc dh
 0000035D  80 EA 04			sub dl, 4
 00000360  B0 5C			mov al, "\"
 00000362  E8 00000000 E		call GotoXY
 00000367  E8 00000000 E		call WriteChar
					ret
 0000036C  59		   *	    pop    ecx
 0000036D  C3		   *	    ret    00000h
 0000036E			DesenhaObstaculo2 ENDP
				;====================================================================

				;=========================Desenha Céu===============================
				;Recebe: nda
				;Retorna: dsenho do ceu do jogo na tela
				;===================================================================
 0000036E			DesenhaCeu PROC 
					;SOL
 0000036E  B8 0000000E			mov eax, yellow
 00000373  E8 00000000 E		call SetTextColor
 00000378  B2 01			mov dl, 1
 0000037A  B6 03			mov dh, 3
 0000037C  E8 00000000 E		call GotoXY
 00000381  BA 000004DC R		mov edx, OFFSET sol
 00000386  E8 00000000 E		call WriteString
					;NUVEM
 0000038B  B8 0000000F			mov eax, white
 00000390  E8 00000000 E		call SetTextColor
 00000395  B2 01			mov dl, 1
 00000397  B6 0A			mov dh, 10
 00000399  E8 00000000 E		call GotoXY
 0000039E  BA 000002EB R		mov edx, OFFSET nuvem
 000003A3  E8 00000000 E		call WriteString
 000003A8  C3				ret
 000003A9			DesenhaCeu ENDP
				;==================================================================

				;=======================Inicializa Jogo==============================
				;Recebe: nda
				;Retorna: Tela inicial do jogo
				;====================================================================
 000003A9			InicializaJogo PROC
 000003A9  E8 00000000 E		call Clrscr
 000003AE  C6 05 00000018 R		mov PosY, Y_GANSO_EM_PE
	   14
 000003B5  E8 FFFFFD27			call DesenhaGansoEmPE2
 000003BA  E8 FFFFFFAF			call DesenhaCeu
 000003BF  B8 00000002			mov eax, green	;cor da moldura
 000003C4  E8 FFFFFC72			call Moldura
					
 000003C9  E8 00000007			call CriaObstaculo
 000003CE  C3				ret
 000003CF			InicializaJogo ENDP
				;====================================================================

				;============================Perdeu==================================
				;Recebe: nda
				;Retorna: tela de game over
				;====================================================================

 000003CF			Perdeu PROC
 000003CF  E8 00000000 E		call Clrscr
 000003D4  C3				ret
 000003D5			Perdeu ENDP


				;=====================Cria Obstaculo ================================
				;Gera os obstáculos de forma aleatória
				;Recebe: nda
				;Retorna: um obstáculo(ou nada) na tela
				;====================================================================
 000003D5			CriaObstaculo PROC
 000003D5  E8 00000000 E		call Randomize
 000003DA  B8 00000003			mov eax, 3
 000003DF  E8 00000000 E		call RandomRange
					.IF al == 1
 000003E4  3C 01	   *	    cmp    al, 001h
 000003E6  75 24	   *	    jne    @C0001
 000003E8  C6 05 00000019 R			mov PosX, 100
	   64
 000003EF  E8 FFFFFEBF				call DesenhaObstaculo1
 000003F4  0F B6 1D				movzx ebx, CtrlObs1
	   0000002B R
 000003FB  C6 83 0000001D R			mov PosObs1[ebx], 100
	   64
 00000402  FE 05 0000002B R			inc CtrlObs1
 00000408  EB 28				jmp FIM
					.ELSEIF al == 2
 0000040A  EB 26	   *	    jmp    @C0003
 0000040C		   *@C0001:
 0000040C  3C 02	   *	    cmp    al, 002h
 0000040E  75 22	   *	    jne    @C0004
 00000410  C6 05 00000019 R			mov PosX, 99
	   63
 00000417  E8 FFFFFEEC				call DesenhaObstaculo2
 0000041C  0F B6 1D				movzx ebx, CtrlObs2
	   0000002C R
 00000423  C6 83 00000024 R			mov PosObs2[ebx], 100
	   64
 0000042A  FE 05 0000002C R			inc CtrlObs2
 00000430  EB 00				jmp FIM
					.ENDIF
 00000432		   *@C0004:
 00000432		   *@C0003:
 00000432				FIM:
 00000432  C3				ret
 00000433			CriaObstaculo ENDP
				;====================================================================

				;=======================JOGO=========================================
				;Rotina do jogo. Faz a leitura da tecla de salto(W) e agachamento (S) e chama os 
				;procedimentos de movimentação e criação de obstaculos
				;Recebe: nda
				;Retorna: jogo na tela
				;====================================================================
 00000433			Jogo PROC
 00000433				JOGO_LOOP:
 00000433  B8 00000032				mov eax, 50
 00000438  E8 00000000 E			call Delay
 0000043D  E8 00000000 E			call ReadKey
 00000442  83 05 00000008 R			add contadorTempo, 50
	   32
 00000449  83 05 0000000C R			add contadorObstaculo, 50
	   32
 00000450  83 05 00000010 R			add contadorPulo, 50
	   32
 00000457  83 05 00000014 R			add contadorAgacha, 50
	   32
						
						.IF al == "w"        ;Faz o Ganso Pular
 0000045E  3C 77	   *	    cmp    al, 'w'
 00000460  75 4C	   *	    jne    @C0006
							;Deletando o Desenho do Ganso
 00000462  C6 05 0000001C R				mov statusGanso, 2
	   02
 00000469  C6 05 00000019 R				mov PosX,16
	   10
 00000470  C6 05 00000018 R				mov PosY, Y_GANSO_EM_PE
	   14
 00000477  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 0000047E  C6 05 0000001B R				mov alturaO,ALTURA_GANSO
	   09
 00000485  E8 FFFFFDEF					call DeletaDesenho
							;Desenhando o Ganso no Ar
 0000048A  C6 05 00000018 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000491  C7 05 00000010 R				mov contadorPulo, 0
	   00000000
 0000049B  C7 05 00000014 R				mov contadorAgacha, 0
	   00000000
 000004A5  E8 FFFFFC37					call DesenhaGansoEmPe2
 000004AA  EB 6F					jmp DELAY_MOVIMENTO
						
						.ELSEIF al ==  "s"    ;Faz o Ganso Agachar
 000004AC  EB 6D	   *	    jmp    @C0008
 000004AE		   *@C0006:
 000004AE  3C 73	   *	    cmp    al, 's'
 000004B0  75 69	   *	    jne    @C0009
							;Deletando o Desenho do Ganso
 000004B2  C6 05 00000019 R				mov PosX,16
	   10
 000004B9  80 3D 0000001C R				cmp statusGanso, 2
	   02
 000004C0  75 09					jne NPULANDO
 000004C2  C6 05 00000018 R					mov PosY, Y_GANSO_PULANDO
	   0F
 000004C9  EB 14						jmp DELETA_
 000004CB						NPULANDO:
 000004CB  80 3D 0000001C R				cmp statusGanso, 1
	   01
 000004D2  75 09					jne AGACHADO_
 000004D4  C6 05 00000018 R					mov PosY, Y_GANSO_EM_PE
	   14
 000004DB  EB 02						jmp DELETA_
 000004DD						AGACHADO_:
 000004DD  EB 3C						jmp DELAY_MOVIMENTO
 000004DF						DELETA_:
 000004DF  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 000004E6  C6 05 0000001B R				mov alturaO,ALTURA_GANSO
	   09
 000004ED  E8 FFFFFD87					call DeletaDesenho
							;Desenhando o Ganso Agachado
 000004F2  C6 05 00000018 R				mov PosY, Y_GANSO_AGACHADO
	   16
 000004F9  C7 05 00000014 R				mov contadorAgacha, 0
	   00000000
 00000503  C7 05 00000010 R				mov contadorPulo, 0
	   00000000
 0000050D  E8 FFFFFC9F					call DesenhaGansoAgachado2
 00000512  C6 05 0000001C R				mov statusGanso, 0
	   00
 00000519  EB 00					jmp DELAY_MOVIMENTO
							
						.ENDIF
 0000051B		   *@C0009:
 0000051B		   *@C0008:
						
 0000051B					DELAY_MOVIMENTO:
						.IF contadorPulo == 1700 && statusGanso == 2
 0000051B  81 3D 00000010 R
	   000006A4	   *	    cmp    contadorPulo, 006A4h
 00000525  75 49	   *	    jne    @C000B
 00000527  80 3D 0000001C R
	   02		   *	    cmp    statusGanso, 002h
 0000052E  75 40	   *	    jne    @C000B
							;Deleta o Ganso no Ar
 00000530  C6 05 0000001C R				mov statusGanso, 1
	   01
 00000537  C6 05 00000019 R				mov PosX, 16
	   10
 0000053E  C6 05 00000018 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000545  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 0000054C  C6 05 0000001B R				mov alturaO, ALTURA_GANSO
	   09
 00000553  E8 FFFFFD21					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 00000558  C6 05 00000018 R				mov PosY, Y_GANSO_EM_PE
	   14
 0000055F  E8 FFFFFB7D					call DesenhaGansoEmPe2
							
 00000564  C7 05 00000010 R				mov contadorPulo, 0
	   00000000
 0000056E  EB 00					jmp DELAY_MOVIMENTO2
						.ENDIF
 00000570		   *@C000B:

 00000570					DELAY_MOVIMENTO2:
						.IF contadorAgacha == 1500 && statusGanso == 0
 00000570  81 3D 00000014 R
	   000005DC	   *	    cmp    contadorAgacha, 005DCh
 0000057A  75 49	   *	    jne    @C000E
 0000057C  80 3D 0000001C R
	   00		   *	    cmp    statusGanso, 000h
 00000583  75 40	   *	    jne    @C000E
							;Deleta o Ganso agachado
 00000585  C6 05 0000001C R				mov statusGanso, 1
	   01
 0000058C  C6 05 00000019 R				mov PosX, 16
	   10
 00000593  C6 05 00000018 R				mov PosY, Y_GANSO_AGACHADO-1
	   15
 0000059A  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 000005A1  C6 05 0000001B R				mov alturaO, ALTURA_GANSO
	   09
 000005A8  E8 FFFFFCCC					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 000005AD  C6 05 00000018 R				mov PosY, Y_GANSO_EM_PE
	   14
 000005B4  E8 FFFFFB28					call DesenhaGansoEmPe2
							
 000005B9  C7 05 00000014 R				mov contadorAgacha, 0
	   00000000
 000005C3  EB 00					jmp ATUALIZA_OBSTACULOS
						.ENDIF
 000005C5		   *@C000E:
						
 000005C5					ATUALIZA_OBSTACULOS:
						.IF contadorTempo == 500
 000005C5  81 3D 00000008 R
	   000001F4	   *	    cmp    contadorTempo, 001F4h
 000005CF  75 11	   *	    jne    @C0011
 000005D1  E8 0000005A					call AtualizaObstaculos
 000005D6  C7 05 00000008 R				mov contadorTempo, 0
	   00000000
 000005E0  EB 00					jmp OBSTACULOS
						.ENDIF
 000005E2		   *@C0011:

 000005E2					OBSTACULOS:
						.IF contadorObstaculo >= 2500
 000005E2  81 3D 0000000C R
	   000009C4	   *	    cmp    contadorObstaculo, 009C4h
 000005EC  72 11	   *	    jb	@C0013
 000005EE  E8 FFFFFDE2					call CriaObstaculo
 000005F3  C7 05 0000000C R				mov contadorObstaculo, 0
	   00000000
 000005FD  EB 00					jmp TESTA_COLISAO
						.ENDIF
 000005FF		   *@C0013:
						
 000005FF					TESTA_COLISAO:
						.IF (PosObs1[0]==20 && statusGanso != 2) ||  (PosObs2[0]==20 && statusGanso != 0)
 000005FF  80 3D 0000001D R
	   14		   *	    cmp    PosObs1 + [000h], 014h
 00000606  75 09	   *	    jne    @C0017
 00000608  80 3D 0000001C R
	   02		   *	    cmp    statusGanso, 002h
 0000060F  75 12	   *	    jne    @C0016
 00000611		   *@C0017:
 00000611  80 3D 00000024 R
	   14		   *	    cmp    PosObs2 + [000h], 014h
 00000618  75 10	   *	    jne    @C0015
 0000061A  80 3D 0000001C R
	   00		   *	    cmp    statusGanso, 000h
 00000621  74 07	   *	    je	@C0015
 00000623		   *@C0016:
 00000623  E8 FFFFFDA7					call Perdeu
 00000628  EB 05					jmp FIM
						.ENDIF
 0000062A		   *@C0015:
 0000062A  E9 FFFFFE04			jmp JOGO_LOOP
 0000062F			FIM:
 0000062F  C3				ret
 00000630			Jogo ENDP
				;====================================================================

				;=======================Atualiza Obstaculos==========================
				;Atualiza posição de todos os obstáculos desenhados na tela
				;Recebe: Lista com posição dos obstáculos existentes
				;Retorna: Lista de posições atualizada
				;====================================================================
 00000630			AtualizaObstaculos PROC USES ecx
					;Obstaculos do tipo 1 =============================
 00000630  51		   *	    push   ecx
 00000631  B9 00000000			mov ecx, 0
 00000636  8A 0D 0000002B R		mov cl, CtrlObs1
 0000063C  80 F9 00			cmp cl, 0
 0000063F  74 6D			je TIPO2	;Se não existir obstáculo do tipo 1 pula para tipo 2
 00000641				PERCORRE1:
						;Deletando objeto1 da posição PosObs1[ecx]
 00000641  49					dec ecx
 00000642  8A 99 0000001D R			mov bl, PosObs1[ecx]
 00000648  88 1D 00000019 R			mov PosX, bl
 0000064E  C6 05 00000018 R			mov PosY, Y_OBSTACULO1
	   1A
 00000655  C6 05 0000001A R			mov larguraO, LARGURA_OBJ1
	   05
 0000065C  C6 05 0000001B R			mov alturaO, ALTURA_OBJ1
	   03
 00000663  E8 FFFFFC11				call DeletaDesenho

						;Desenhando na nova posição
						.IF PosX >= 6 
 00000668  80 3D 00000019 R
	   06		   *	    cmp    PosX, 006h
 0000066F  72 22	   *	    jb	@C001A
 00000671  80 2D 00000019 R				sub PosX, 5
	   05
 00000678  8A 1D 00000019 R				mov bl, PosX
 0000067E  88 99 0000001D R				mov PosObs1[ecx], bl
 00000684  88 1D 00000019 R				mov PosX, bl
 0000068A  E8 FFFFFC24					call DesenhaObstaculo1
 0000068F  EB 1A					jmp INCREMENTA1
						.ELSE
 00000691  EB 18	   *	    jmp    @C001C
 00000693		   *@C001A:
 00000693  BA 0000001D R				mov edx, OFFSET PosObs1
 00000698  FE 0D 0000002B R				dec CtrlObs1
 0000069E  8A 1D 0000002B R				mov bl, CtrlObs1
 000006A4  E8 0000007F					call ShiftLeftVetorPosicao
 000006A9  EB 78					jmp INCREMENTA2
						.ENDIF
 000006AB		   *@C001C:
 000006AB					INCREMENTA1:
 000006AB  41					inc ecx
 000006AC  E2 93			loop PERCORRE1
					;=================================================

					;Obstáculos do tipo 2 ============================
 000006AE				TIPO2:
 000006AE  8A 0D 0000002C R		mov cl, CtrlObs2
 000006B4  80 F9 00			cmp cl, 0
 000006B7  74 6D			je SAIR		;Se não existir obstáculo do tipo 2, sai
 000006B9				PERCORRE2:
						;Deletando objeto2 da posição PosObs2[ecx]
 000006B9  49					dec ecx
 000006BA  8A 99 00000024 R			mov bl, PosObs2[ecx]
 000006C0  88 1D 00000019 R			mov PosX, bl
 000006C6  C6 05 00000018 R			mov PosY, Y_OBSTACULO2
	   13
 000006CD  C6 05 0000001A R			mov larguraO, LARGURA_OBJ2
	   05
 000006D4  C6 05 0000001B R			mov alturaO, ALTURA_OBJ2
	   03
 000006DB  E8 FFFFFB99				call DeletaDesenho

						;Desenhando na nova posição
						.IF PosX >= 6
 000006E0  80 3D 00000019 R
	   06		   *	    cmp    PosX, 006h
 000006E7  72 22	   *	    jb	@C001D
 000006E9  80 2D 00000019 R				sub PosX, 5
	   05
 000006F0  8A 1D 00000019 R				mov bl, PosX
 000006F6  88 99 00000024 R				mov PosObs2[ecx], bl
 000006FC  88 1D 00000019 R				mov PosX, bl
 00000702  E8 FFFFFC01					call DesenhaObstaculo2
 00000707  EB 1A					jmp INCREMENTA2
						.ELSE
 00000709  EB 18	   *	    jmp    @C001F
 0000070B		   *@C001D:
 0000070B  BA 00000024 R				mov edx, OFFSET PosObs2
 00000710  FE 0D 0000002C R				dec CtrlObs2
 00000716  8A 1D 0000002C R				mov bl, CtrlObs2
 0000071C  E8 00000007					call ShiftLeftVetorPosicao
 00000721  EB 00					jmp INCREMENTA2
						.ENDIF
 00000723		   *@C001F:
 00000723					INCREMENTA2:
 00000723  41					inc ecx
 00000724  E2 93			loop PERCORRE2
					;=================================================

 00000726				SAIR:
					ret
 00000726  59		   *	    pop    ecx
 00000727  C3		   *	    ret    00000h
 00000728			AtualizaObstaculos ENDP
				;====================================================================

				;=====================Shift Vetor Posição=========================
				;Recebe: edx = OFFSET do Vetor, ebx = numero de elementos do vetor -1
				;retorna: 
				;====================================================================
 00000728			ShiftLeftVetorPosicao PROC USES ecx ebx edx
 00000728  51		   *	    push   ecx
 00000729  53		   *	    push   ebx
 0000072A  52		   *	    push   edx
 0000072B  8B CB			mov ecx, ebx
 0000072D  83 F9 00			cmp ecx, 0
 00000730  74 0B			je EXCEPTION_ ;Se ecx = 0 loop não funciona corretamente
 00000732				PERCORRE:
 00000732  42					inc edx
 00000733  8A 1A				mov bl, [edx]
 00000735  4A					dec edx
 00000736  88 1A				mov [edx], bl 
 00000738  42					inc edx
 00000739  E2 F7			loop PERCORRE
 0000073B  EB 07			jmp SAIR

 0000073D				EXCEPTION_:
 0000073D  42					inc edx
 0000073E  8A 1A				mov bl, [edx]
 00000740  4A					dec edx
 00000741  88 1A				mov [edx], bl 
 00000743  42					inc edx
 00000744				SAIR:
					ret
 00000744  5A		   *	    pop    edx
 00000745  5B		   *	    pop    ebx
 00000746  59		   *	    pop    ecx
 00000747  C3		   *	    ret    00000h
 00000748			ShiftLeftVetorPosicao ENDP
				;====================================================================

 00000748			main PROC
					;INVOKE GetStdHandle,STD_OUTPUT_HANDLE 
					;mov outHandle, eax										;DESCOBRIR O QUE FAZ (???)
					;INVOKE SetConsoleScreenBufferSize,outHandle,scrSize
 00000748  E8 00000000 E		call Clrscr
					
					;Desenha menu
 0000074D  E8 FFFFF8AE			call DesenhaMenu  
 00000752  B8 00000004			mov eax, red     ;cor da moldura
 00000757  E8 FFFFF8DF			call Moldura

					;Esperando tecla ser pressionada
 0000075C				EsperandoTecla:
 0000075C  B8 00000032				mov  eax,50          ; sleep, to allow OS to time slice
 00000761  E8 00000000 E			call Delay           ; (otherwise, some key presses are lost)
 00000766  E8 00000000 E			call ReadKey         ; look for keyboard input 
 0000076B  52					push edx

					.IF al == "1"
 0000076C  3C 31	   *	    cmp    al, '1'
 0000076E  75 0E	   *	    jne    @C0020
						;TODO jogo fácil
 00000770  E8 FFFFFC34				call InicializaJogo
 00000775  E8 FFFFFCB9				call Jogo
 0000077A  EB 21				jmp SAIR
					.ELSEIF al == "2"
 0000077C  EB 1D	   *	    jmp    @C0022
 0000077E		   *@C0020:
 0000077E  3C 32	   *	    cmp    al, '2'
 00000780  75 0E	   *	    jne    @C0023
						;TODO jogo dificil
 00000782  E8 00000000 E			call Clrscr
 00000787  E8 FFFFF8AF				call moldura
 0000078C  EB 0F				jmp SAIR
					.ELSEIF al == VK_ESCAPE
 0000078E  EB 0B	   *	    jmp    @C0025
 00000790		   *@C0023:
 00000790  3C 1B	   *	    cmp    al, VK_ESCAPE
 00000792  75 07	   *	    jne    @C0026
						exit
 00000794  6A 00	   *	    push   +000000000h
 00000796  E8 00000000 E   *	    call   ExitProcess
					.ENDIF
 0000079B		   *@C0026:
 0000079B		   *@C0025:
 0000079B		   *@C0022:
					
 0000079B  EB BF			jmp   EsperandoTecla    ; nenhuma tecla válida pressionada, tenta novamente
 0000079D			SAIR:
 0000079D  B6 28			mov dh, 40
 0000079F  E8 00000000 E		call GotoXY
					exit
 000007A4  6A 00	   *	    push   +000000000h
 000007A6  E8 00000000 E   *	    call   ExitProcess
 000007AB			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.16.27027.1	    06/15/19 13:33:49
jogo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000590 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000007AB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaObstaculos . . . . . . .	P Near	 00000630 _TEXT	Length= 000000F8 Public STDCALL
  PERCORRE1  . . . . . . . . . .	L Near	 00000641 _TEXT	
  INCREMENTA1  . . . . . . . . .	L Near	 000006AB _TEXT	
  TIPO2  . . . . . . . . . . . .	L Near	 000006AE _TEXT	
  PERCORRE2  . . . . . . . . . .	L Near	 000006B9 _TEXT	
  INCREMENTA2  . . . . . . . . .	L Near	 00000723 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000726 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CriaObstaculo  . . . . . . . . .	P Near	 000003D5 _TEXT	Length= 0000005E Public STDCALL
  FIM  . . . . . . . . . . . . .	L Near	 00000432 _TEXT	
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeletaDesenho  . . . . . . . . .	P Near	 00000279 _TEXT	Length= 0000003A Public STDCALL
  LINHA  . . . . . . . . . . . .	L Near	 00000296 _TEXT	
  COLUNA . . . . . . . . . . . .	L Near	 0000029E _TEXT	
DesenhaCeu . . . . . . . . . . .	P Near	 0000036E _TEXT	Length= 0000003B Public STDCALL
DesenhaGansoAgachado2  . . . . .	P Near	 000001B1 _TEXT	Length= 000000AB Public STDCALL
DesenhaGansoAgachado . . . . . .	P Near	 0000025C _TEXT	Length= 0000001D Public STDCALL
DesenhaGansoEmPE2  . . . . . . .	P Near	 000000E1 _TEXT	Length= 000000D0 Public STDCALL
DesenhaGansoEmPe . . . . . . . .	P Near	 00000097 _TEXT	Length= 0000004A Public STDCALL
  REMOLDURA  . . . . . . . . . .	L Near	 000000CF _TEXT	
DesenhaMenu  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003B Public STDCALL
DesenhaObstaculo1  . . . . . . .	P Near	 000002B3 _TEXT	Length= 00000055 Public STDCALL
  CIMA . . . . . . . . . . . . .	L Near	 000002CD _TEXT	
  LADOS  . . . . . . . . . . . .	L Near	 000002E8 _TEXT	
DesenhaObstaculo2  . . . . . . .	P Near	 00000308 _TEXT	Length= 00000066 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000034D _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InicializaJogo . . . . . . . . .	P Near	 000003A9 _TEXT	Length= 00000026 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Jogo . . . . . . . . . . . . . .	P Near	 00000433 _TEXT	Length= 000001FD Public STDCALL
  JOGO_LOOP  . . . . . . . . . .	L Near	 00000433 _TEXT	
  NPULANDO . . . . . . . . . . .	L Near	 000004CB _TEXT	
  AGACHADO_  . . . . . . . . . .	L Near	 000004DD _TEXT	
  DELETA_  . . . . . . . . . . .	L Near	 000004DF _TEXT	
  DELAY_MOVIMENTO  . . . . . . .	L Near	 0000051B _TEXT	
  DELAY_MOVIMENTO2 . . . . . . .	L Near	 00000570 _TEXT	
  ATUALIZA_OBSTACULOS  . . . . .	L Near	 000005C5 _TEXT	
  OBSTACULOS . . . . . . . . . .	L Near	 000005E2 _TEXT	
  TESTA_COLISAO  . . . . . . . .	L Near	 000005FF _TEXT	
  FIM  . . . . . . . . . . . . .	L Near	 0000062F _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Moldura  . . . . . . . . . . . .	P Near	 0000003B _TEXT	Length= 0000005C Public STDCALL
  INFERIOR . . . . . . . . . . .	L Near	 0000004F _TEXT	
  HORIZONTAL . . . . . . . . . .	L Near	 00000058 _TEXT	
  VERTICAL . . . . . . . . . . .	L Near	 00000076 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Perdeu . . . . . . . . . . . . .	P Near	 000003CF _TEXT	Length= 00000006 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftLeftVetorPosicao  . . . . .	P Near	 00000728 _TEXT	Length= 00000020 Public STDCALL
  PERCORRE . . . . . . . . . . .	L Near	 00000732 _TEXT	
  EXCEPTION_ . . . . . . . . . .	L Near	 0000073D _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000744 _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000748 _TEXT	Length= 00000063 Public STDCALL
  EsperandoTecla . . . . . . . .	L Near	 0000075C _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 0000079D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALTURA_GANSO_AGACHADO  . . . . .	Number	 00000007h   
ALTURA_GANSO . . . . . . . . . .	Number	 00000009h   
ALTURA_OBJ1  . . . . . . . . . .	Number	 00000003h   
ALTURA_OBJ2  . . . . . . . . . .	Number	 00000003h   
ALTURA . . . . . . . . . . . . .	Number	 0000001Eh   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CtrlObs1 . . . . . . . . . . . .	Byte	 0000002B _DATA	
CtrlObs2 . . . . . . . . . . . .	Byte	 0000002C _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LARGURA_GANSO  . . . . . . . . .	Number	 0000000Ch   
LARGURA_OBJ1 . . . . . . . . . .	Number	 00000005h   
LARGURA_OBJ2 . . . . . . . . . .	Number	 00000005h   
LARGURA  . . . . . . . . . . . .	Number	 00000069h   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PosObs1  . . . . . . . . . . . .	Byte	 0000001D _DATA	
PosObs2  . . . . . . . . . . . .	Byte	 00000024 _DATA	
PosX . . . . . . . . . . . . . .	Byte	 00000019 _DATA	
PosY . . . . . . . . . . . . . .	Byte	 00000018 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
Y_GANSO_AGACHADO . . . . . . . .	Number	 00000016h   
Y_GANSO_EM_PE  . . . . . . . . .	Number	 00000014h   
Y_GANSO_PULANDO  . . . . . . . .	Number	 0000000Fh   
Y_OBSTACULO1 . . . . . . . . . .	Number	 0000001Ah   
Y_OBSTACULO2 . . . . . . . . . .	Number	 00000013h   
alturaO  . . . . . . . . . . . .	Byte	 0000001B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
contadorAgacha . . . . . . . . .	DWord	 00000014 _DATA	
contadorObstaculo  . . . . . . .	DWord	 0000000C _DATA	
contadorPulo . . . . . . . . . .	DWord	 00000010 _DATA	
contadorTempo  . . . . . . . . .	DWord	 00000008 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
ganso1 . . . . . . . . . . . . .	Byte	 00000250 _DATA	
ganso2 . . . . . . . . . . . . .	Byte	 00000255 _DATA	
ganso3 . . . . . . . . . . . . .	Byte	 0000025C _DATA	
ganso4 . . . . . . . . . . . . .	Byte	 00000263 _DATA	
ganso5 . . . . . . . . . . . . .	Byte	 00000270 _DATA	
ganso6 . . . . . . . . . . . . .	Byte	 0000027D _DATA	
ganso7 . . . . . . . . . . . . .	Byte	 00000288 _DATA	
ganso8 . . . . . . . . . . . . .	Byte	 00000290 _DATA	
ganso9 . . . . . . . . . . . . .	Byte	 00000298 _DATA	
ganso_agachado1  . . . . . . . .	Byte	 0000029E _DATA	
ganso_agachado2  . . . . . . . .	Byte	 000002A3 _DATA	
ganso_agachado3  . . . . . . . .	Byte	 000002AA _DATA	
ganso_agachado4  . . . . . . . .	Byte	 000002B7 _DATA	
ganso_agachado5  . . . . . . . .	Byte	 000002C6 _DATA	
ganso_agachado6  . . . . . . . .	Byte	 000002D3 _DATA	
ganso_agachado7  . . . . . . . .	Byte	 000002E0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
larguraO . . . . . . . . . . . .	Byte	 0000001A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
logo . . . . . . . . . . . . . .	Byte	 0000002D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menu . . . . . . . . . . . . . .	Byte	 000001C9 _DATA	
nuvem  . . . . . . . . . . . . .	Byte	 000002EB _DATA	
outHandle  . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scrSize  . . . . . . . . . . . .	COORD	 00000004 _DATA	
sol  . . . . . . . . . . . . . .	Byte	 000004DC _DATA	
statusGanso  . . . . . . . . . .	Byte	 0000001C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
