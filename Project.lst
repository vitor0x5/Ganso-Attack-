Microsoft (R) Macro Assembler Version 14.16.27030.1	    06/28/19 16:44:48
jogo.asm						     Page 1 - 1


				; Implementação do jogo Ganso Attack!! em assembly pelos alunos
				; Matheus de Brito Soares Porto RA: 744348
				; Vitor Hugo Guilherme          RA: 744359
				; Da disciplina Arquitetura e Organização de Computadores 2 - DC- UFSCar
				; Professor: Dr. Luciano Neres

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				includelib Winmm.lib

				;==========Função que dispara os sons===============================
				PlaySound PROTO,
				        pszSound:PTR BYTE, 
				        hmod:DWORD, 
				        fdwSound:DWORD
				;==================================================================

 00000000			.data
 00000000 44 65 76 69 63	deviceConnect BYTE "DeviceConnect",0
	   65 43 6F 6E 6E
	   65 63 74 00
 0000000E 63 3A 2F 2F 71	fileQuack BYTE "c://quack.wav",0
	   75 61 63 6B 2E
	   77 61 76 00
 0000001C 00000001		SND_ASYNC    DWORD 00000001h
 00000020 00040005		SND_RESOURCE DWORD 00040005h
 00000024 00020000		SND_FILENAME DWORD 00020000h

				;Contadores de tempo para execução dos procedimentos do jogo
 00000028 00000000		contadorTempo DWORD 0
 0000002C 00000000		contadorObstaculo DWORD 0
 00000030 00000000		contadorPulo DWORD 0 
 00000034 00000000		contadorAgacha DWORD 0

				;constantes utilizadas no desenho da moldura
 = 00000069			LARGURA = 105
 = 0000001D			ALTURA = 29

				;Variáveis auxiliares para impressão e exclusão de objetos da tela
 00000038 00			PosY BYTE ?
 00000039 00			PosX BYTE ?
 0000003A 00			larguraO BYTE ?
 0000003B 00			alturaO BYTE ?

 0000003C 01			statusGanso BYTE 1 ; 0 = Agachado, 1 = em pé, 2 = pulando

				;Dificuldade do jogo que é o atraso usado na função delay
 0000003D 00			dificuldade BYTE ?
 = 00000032			FACIL = 50
 = 00000014			DIFICIL = 20

				;Tamanho dos desenhos
 = 00000005			LARGURA_OBJ1 = 5
 = 00000003			ALTURA_OBJ1 = 3
 = 00000005			LARGURA_OBJ2 = 5
 = 00000003			ALTURA_OBJ2 = 3
 = 0000000C			LARGURA_GANSO = 12
 = 00000009			ALTURA_GANSO = 9
 = 00000007			ALTURA_GANSO_AGACHADO = 7
				;Posição no eixo Y dos desenhos
 = 00000014			Y_GANSO_EM_PE = 20
 = 0000000F			Y_GANSO_PULANDO =  15
 = 00000016			Y_GANSO_AGACHADO = 22
 = 0000001A			Y_OBSTACULO1 = 26
 = 00000013			Y_OBSTACULO2 = 19
				;Posição do score
 = 0000004D			X_SCORE = 77
 = 00000005			Y_SCORE = 5
				;Posições finais da tela
 = 00000003			FINAL_ESQUERDA = 3
 = 00000064			FINAL_DIREITA = 100

				;Fila de posição dos obstáculos
 0000003E  00000007 [		PosObs1 BYTE 7 DUP(?)
	    00
	   ]
 00000045  00000007 [		PosObs2 BYTE 7 DUP(?)
	    00
	   ]
 0000004C 00			CtrlObs1 BYTE 0			;Posições finais das filas
 0000004D 00			CtrlObs2 BYTE 0

				;Placar e pontuação
 0000004E 20 20 20 20 53	Score BYTE       "    SCORE: ",0
	   43 4F 52 45 3A
	   20 00
 0000005A 4E 4F 56 4F 20	NovoRecorde BYTE "NOVO RECORDE: ",0
	   52 45 43 4F 52
	   44 45 3A 20 00
 00000069 00000000		Pontos DWORD 0
 0000006D 00000000		Recorde DWORD 0

				; Logo do jogo
 00000071 20 20 20 20 20	logo BYTE "                       ____                            _   _   _             _    _ _ ",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 20 20 20 5F
	   20 20 20 5F 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 20 20
	   20 20 5F 20 5F
	   20 0A 0D
 000000C9  09 20 20 20 20		 BYTE "	              / ___| __ _ _ __  ___  ___      / \ | |_| |_ __ _  ___| | _| | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   2F 20 5F 5F 5F
	   7C 20 5F 5F 20
	   5F 20 5F 20 5F
	   5F 20 20 5F 5F
	   5F 20 20 5F 5F
	   5F 20 20 20 20
	   20 20 2F 20 5C
	   20 7C 20 7C 5F
	   7C 20 7C 5F 20
	   5F 5F 20 5F 20
	   20 5F 5F 5F 7C
	   20 7C 20 5F 7C
	   20 7C 20 7C 0A
	   0D
 0000011A  09 20 20 20 20		 BYTE "	             | |  _ / _` | '_ \/ __|/ _ \    / _ \| __| __/ _` |/ __| |/ / | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 20 5F
	   20 2F 20 5F 60
	   20 7C 20 27 5F
	   20 5C 2F 20 5F
	   5F 7C 2F 20 5F
	   20 5C 20 20 20
	   20 2F 20 5F 20
	   5C 7C 20 5F 5F
	   7C 20 5F 5F 2F
	   20 5F 60 20 7C
	   2F 20 5F 5F 7C
	   20 7C 2F 20 2F
	   20 7C 20 7C 0A
	   0D
 0000016B  09 20 20 20 20		 BYTE "	             | |_| | (_| | | | \__ \ (_) |  / ___ \ |_| || (_| | (__|   <|_|_|",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 5F 7C 20
	   7C 20 28 5F 7C
	   20 7C 20 7C 20
	   7C 20 5C 5F 5F
	   20 5C 20 28 5F
	   29 20 7C 20 20
	   2F 20 5F 5F 5F
	   20 5C 20 7C 5F
	   7C 20 7C 7C 20
	   28 5F 7C 20 7C
	   20 28 5F 5F 7C
	   20 20 20 3C 7C
	   5F 7C 5F 7C 0A
	   0D
 000001BC  09 20 20 20 20		 BYTE "	              \____|\__,_|_| |_|___/\___/  /_/   \_\__|\__\__,_|\___|_|\_(_|_)",0ah, 0dh, 0 
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   7C 5C 5F 5F 2C
	   5F 7C 5F 7C 20
	   7C 5F 7C 5F 5F
	   5F 2F 5C 5F 5F
	   5F 2F 20 20 2F
	   5F 2F 20 20 20
	   5C 5F 5C 5F 5F
	   7C 5C 5F 5F 5C
	   5F 5F 2C 5F 7C
	   5C 5F 5F 5F 7C
	   5F 7C 5C 5F 28
	   5F 7C 5F 29 0A
	   0D 00

				; MENU
 0000020E 53 65 6C 65 63	 menu   BYTE "Selecione uma dificuldade para jogar:",0ah, 0dh, 0ah
	   69 6F 6E 65 20
	   75 6D 61 20 64
	   69 66 69 63 75
	   6C 64 61 64 65
	   20 70 61 72 61
	   20 6A 6F 67 61
	   72 3A 0A 0D 0A
 00000236  09 09 09 09 20			BYTE "				              1 - Facil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 31 20
	   2D 20 46 61 63
	   69 6C 0A 0D
 00000253  09 09 09 09 20			BYTE "				              2 - Dificil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 32 20
	   2D 20 44 69 66
	   69 63 69 6C 0A
	   0D
 00000272  09 09 09 09 20	        BYTE "				            ESC - SAIR",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 45 53 43 20
	   2D 20 53 41 49
	   52 0A 0D
 0000028E  09 09 09 09 00			BYTE "				",0
						
				;Ganso
 00000293 5F 5F 0A 0D 00	ganso1 	BYTE                          "__",0ah,0dh,0  
 00000298 2F 20 20 3E 0A	ganso2	BYTE                         "/  >",0ah,0dh,0  
	   0D 00
 0000029F 2F 20 20 5C 0A	ganso3	BYTE                        "/  \",0ah,0dh,0  
	   0D 00
 000002A6 5F 5F 5F 5F 5F	ganso4	BYTE                  "_____/   /",0ah,0dh,0  
	   2F 20 20 20 2F
	   0A 0D 00
 000002B3 3C 20 20 20 20	ganso5	BYTE                 "<        /",0ah,0dh,0  
	   20 20 20 20 2F
	   0A 0D 00
 000002C0 5C 5F 20 20 20	ganso6	BYTE                  "\_    _/",0ah,0dh,0  
	   20 5F 2F 0A 0D
	   00
 000002CB 7C 20 20 20 7C	ganso7	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 000002D3 7C 20 20 20 7C	ganso8	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 000002DB 5E 20 20 20 5E	ganso9	BYTE                    "^   ^",0
	   00
					
				; Ganso Agachado
 000002E1 5F 5F 0A 0D 00	ganso_agachado1 	BYTE                         "__",0ah,0dh,0  
 000002E6 2F 20 20 3E 0A	ganso_agachado2		BYTE                       "/  >",0ah,0dh,0  
	   0D 00
 000002ED 5F 5F 5F 5F 5F	ganso_agachado3		BYTE                 "_____/  \ ",0ah,0dh,0  
	   2F 20 20 5C 20
	   0A 0D 00
 000002FA 3C 20 20 20 20	ganso_agachado4		BYTE                "<        /  ",0ah,0dh,0  
	   20 20 20 20 2F
	   20 20 0A 0D 00
 00000309 5C 5F 20 20 20	ganso_agachado5		BYTE                  "\_   _/   ",0ah,0dh,0  
	   5F 2F 20 20 20
	   0A 0D 00
 00000316 7C 20 20 20 7C	ganso_agachado6		BYTE                   "|   |     ",0ah,0dh,0  
	   20 20 20 20 20
	   0A 0D 00
 00000323 5E 20 20 20 5E	ganso_agachado7		BYTE                   "^   ^     ",0
	   20 20 20 20 20
	   00

 0000032E 09 09 20 20 20	nuvem   BYTE "		                                         ____     ____        ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 0A
	   0D
 00000370  09 20 20 20 20	    	BYTE "	                                              __/    \___/    \____   ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 2F
	   20 20 20 20 5C
	   5F 5F 5F 2F 20
	   20 20 20 5C 5F
	   5F 5F 5F 20 20
	   20 0A 0D
 000003B9  09 20 20 20 20	       	BYTE "	                                             /                     \  ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 0A 0D
 00000402  20 20 20 20 20	   		BYTE "                                                    |                       \ ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 0A 0D
 00000452  09 20 20 20 20	    	BYTE "	                                             \___      __         __| ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   20 20 20 20 20
	   20 5F 5F 20 20
	   20 20 20 20 20
	   20 20 5F 5F 7C
	   20 0A 0D
 0000049B  09 20 20 20 20	        BYTE "	                                                 \____/  \       /    ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   2F 20 20 5C 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 0A 0D
 000004E4  20 09 09 09 20	        BYTE " 			                                          \_____/     ",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   5F 5F 2F 20 20
	   20 20 20 00

 0000051F 20 20 20 20 20	sol     BYTE"          \     /      ",0ah,0dh 
	   20 20 20 20 20
	   5C 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 0A 0D
 00000538  20 20 20 20 20	        BYTE"            \___/       ",0ah,0dh
	   20 20 20 20 20
	   20 20 5C 5F 5F
	   5F 2F 20 20 20
	   20 20 20 20 0A
	   0D
 00000552  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 0000056C  20 20 20 20 20	        BYTE"      ____|       |____ ",0ah,0dh
	   20 5F 5F 5F 5F
	   7C 20 20 20 20
	   20 20 20 7C 5F
	   5F 5F 5F 20 0A
	   0D
 00000586  20 20 20 20 20	        BYTE"           \ ___ /      ",0ah,0dh
	   20 20 20 20 20
	   20 5C 20 5F 5F
	   5F 20 2F 20 20
	   20 20 20 20 0A
	   0D
 000005A0  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 000005BA  20 20 20 20 20	        BYTE"          /       \     ",0
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 00

 000005D3 20 20 20 20 20	gameover BYTE "                     _____          __  __ ______    ______      ________ _____",0ah,0dh   
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 20
	   20 5F 5F 20 20
	   5F 5F 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 5F 5F
	   5F 5F 5F 5F 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 5F
	   5F 5F 5F 5F 0A
	   0D
 00000624  20 20 20 20 20		 BYTE "                     / ____|   /\   |  \/  |  ____|  / __ \ \    / /  ____|  __ \",0ah,0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 5F 5F
	   5F 5F 7C 20 20
	   20 2F 5C 20 20
	   20 7C 20 20 5C
	   2F 20 20 7C 20
	   20 5F 5F 5F 5F
	   7C 20 20 2F 20
	   5F 5F 20 5C 20
	   5C 20 20 20 20
	   2F 20 2F 20 20
	   5F 5F 5F 5F 7C
	   20 20 5F 5F 20
	   5C 0A 0D
 00000677  20 20 20 20 20		 BYTE "                    | |  __   /  \  | \  / | |__    | |  | \ \  / /| |__  | |__) |",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 20 20
	   5F 5F 20 20 20
	   2F 20 20 5C 20
	   20 7C 20 5C 20
	   20 2F 20 7C 20
	   7C 5F 5F 20 20
	   20 20 7C 20 7C
	   20 20 7C 20 5C
	   20 5C 20 20 2F
	   20 2F 7C 20 7C
	   5F 5F 20 20 7C
	   20 7C 5F 5F 29
	   20 7C 0A 0D
 000006CB  20 20 20 20 20		 BYTE "                    | | |_ | / /\ \ | |\/| |  __|   | |  | |\ \/ / |  __| |  _  /",0ah,0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 20 7C
	   5F 20 7C 20 2F
	   20 2F 5C 20 5C
	   20 7C 20 7C 5C
	   2F 7C 20 7C 20
	   20 5F 5F 7C 20
	   20 20 7C 20 7C
	   20 20 7C 20 7C
	   5C 20 5C 2F 20
	   2F 20 7C 20 20
	   5F 5F 7C 20 7C
	   20 20 5F 20 20
	   2F 0A 0D
 0000071E  20 20 20 20 20		 BYTE "                    | |__| |/ ____ \| |  | | |____  | |__| | \  /  | |____| | \ \ ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 7C 5F 5F
	   7C 20 7C 2F 20
	   5F 5F 5F 5F 20
	   5C 7C 20 7C 20
	   20 7C 20 7C 20
	   7C 5F 5F 5F 5F
	   20 20 7C 20 7C
	   5F 5F 7C 20 7C
	   20 5C 20 20 2F
	   20 20 7C 20 7C
	   5F 5F 5F 5F 7C
	   20 7C 20 5C 20
	   5C 20 0A 0D
 00000772  20 20 20 20 20		 BYTE "                     \_____/_/    \_\_|  |_|______|  \____/   \/   |______|_|  \_\",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   5F 5F 2F 5F 2F
	   20 20 20 20 5C
	   5F 5C 5F 7C 20
	   20 7C 5F 7C 5F
	   5F 5F 5F 5F 5F
	   7C 20 20 5C 5F
	   5F 5F 5F 2F 20
	   20 20 5C 2F 20
	   20 20 7C 5F 5F
	   5F 5F 5F 5F 7C
	   5F 7C 20 20 5C
	   5F 5C 00
					
 000007C5 20 20 20 20 20	menuFinal BYTE "                                             Selecione uma opcao:",0ah, 0dh, 0ah
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   53 65 6C 65 63
	   69 6F 6E 65 20
	   75 6D 61 20 6F
	   70 63 61 6F 3A
	   0A 0D 0A
 00000809  09 09 09 09 20			  BYTE "				                1 - Menu inicial",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   31 20 2D 20 4D
	   65 6E 75 20 69
	   6E 69 63 69 61
	   6C 0A 0D
 0000082F  09 09 09 09 20	          BYTE "				              ESC - SAIR",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 45 53
	   43 20 2D 20 53
	   41 49 52 00
					
 00000000			.code
				;==================Desenha o menu inicial ==========================
				;Recebe: nda
				;Retorna: Desenho do menu na tela
				;===================================================================
 00000000			DesenhaMenu PROC
 00000000  B8 00000004			mov  eax, red
 00000005  E8 00000000 E		call SetTextColor
 0000000A  B2 01			mov dl, 1
 0000000C  B6 06			mov dh, 6
 0000000E  E8 00000000 E		call GotoXY
 00000013  BA 00000071 R		mov edx, OFFSET logo
 00000018  E8 00000000 E	    call WriteString

 0000001D  B8 0000000F			mov eax, white
 00000022  E8 00000000 E		call SetTextColor
 00000027  B2 20			mov dl,32
 00000029  B6 0F			mov dh, 15
 0000002B  E8 00000000 E		call GotoXY
 00000030  BA 0000020E R	    mov edx, OFFSET menu   
 00000035  E8 00000000 E		call WriteString  
 0000003A  C3				ret
 0000003B			DesenhaMenu ENDP
				;===================================================================

				;==============Desenha a moldura da tela=============================
				;Recebe: eax com a cor da moldura, LARGURA e ALTURA da tela
				;Retorna: desenho da moldura na tela 
				;====================================================================
 0000003B			Moldura PROC USES edx ecx
 0000003B  52		   *	    push   edx
 0000003C  51		   *	    push   ecx
 0000003D  E8 00000000 E		call SetTextColor

					;Superior
 00000042  B2 01			mov dl, 1
 00000044  B6 01			mov dh, 1
 00000046  B9 00000069			mov ecx, LARGURA ;LARGURA da tela do jogo
 0000004B  B0 DC			mov al, 220	;caracter ASCII que compõe as barras superior e inferior
 0000004D  EB 09			jmp HORIZONTAL

 0000004F				INFERIOR:
 0000004F  B2 01				mov dl, 1
 00000051  B6 1D				mov dh, ALTURA	; posição da barra inferior
 00000053  B9 00000069				mov ecx, LARGURA ;LARGURA da tela do jogo

					;Desenha as barras superior e inferior(uma por vez)
 00000058				HORIZONTAL:          
 00000058  E8 00000000 E			call GotoXY
 0000005D  E8 00000000 E			call WriteChar
 00000062  FE C2				inc dl
 00000064  E2 F2			loop HORIZONTAL
 00000066  80 FE 1D			cmp dh, ALTURA
 00000069  75 E4			jne INFERIOR ;se dh != 24 vai para inferior desenhar a outra barra

					;Laterais
 0000006B  B2 01			mov dl, 1
 0000006D  B6 02			mov dh, 2
 0000006F  B9 0000001C			mov ecx, ALTURA-1
 00000074  B0 DB			mov al, 219 ;caracter que compõe as barras laterais

					;Desenha as barras verticais(as duas juntas)
 00000076				VERTICAL:            
 00000076  E8 00000000 E			call GotoXY
 0000007B  E8 00000000 E			call WriteChar
 00000080  80 C2 68				add dl, LARGURA-1	;pula para a esquerda
 00000083  E8 00000000 E			call GotoXY
 00000088  E8 00000000 E			call WriteChar
 0000008D  80 EA 68				sub dl, LARGURA-1	;volta para a direita
 00000090  FE C6				inc dh
 00000092  E2 E2			loop VERTICAL
					ret
 00000094  59		   *	    pop    ecx
 00000095  5A		   *	    pop    edx
 00000096  C3		   *	    ret    00000h
 00000097			Moldura ENDP
				;===================================================================

				;======================Desenha o Ganso Em Pe =======================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela em pé no chão ou no ar
				;===================================================================
 00000097			DesenhaGansoEmPE PROC USES edx eax
 00000097  52		   *	    push   edx
 00000098  50		   *	    push   eax
 00000099  B8 0000000F			mov eax, white
 0000009E  E8 00000000 E		call SetTextColor
 000000A3  B2 19		    mov dl, 25
 000000A5  8A 35 00000038 R		mov dh, PosY
 000000AB  52				push edx
 000000AC  E8 00000000 E		call GotoXY
 000000B1  BA 00000293 R		mov edx, OFFSET ganso1
 000000B6  E8 00000000 E		call WriteString

 000000BB  5A				pop edx
 000000BC  B2 18		    mov dl, 24
 000000BE  FE C6			inc dh
 000000C0  E8 00000000 E		call GotoXY
 000000C5  52				push edx
 000000C6  BA 00000298 R		mov edx, OFFSET ganso2
 000000CB  E8 00000000 E		call WriteString

 000000D0  5A			    pop edx
 000000D1  B2 17			mov dl, 23
 000000D3  FE C6			inc dh
 000000D5  E8 00000000 E		call GotoXY
 000000DA  52				push edx
 000000DB  BA 0000029F R		mov edx, OFFSET ganso3
 000000E0  E8 00000000 E		call WriteString

 000000E5  5A				pop edx
 000000E6  B2 11			mov dl, 17
 000000E8  FE C6			inc dh
 000000EA  E8 00000000 E		call GotoXY
 000000EF  52				push edx
 000000F0  BA 000002A6 R		mov edx, OFFSET ganso4
 000000F5  E8 00000000 E		call WriteString

 000000FA  5A				pop edx
 000000FB  B2 10			mov dl, 16
 000000FD  FE C6			inc dh
 000000FF  E8 00000000 E		call GotoXY
 00000104  52				push edx
 00000105  BA 000002B3 R		mov edx, OFFSET ganso5
 0000010A  E8 00000000 E		call WriteString	

 0000010F  5A				pop edx
 00000110  B2 11			mov dl, 17
 00000112  FE C6			inc dh
 00000114  E8 00000000 E		call GotoXY
 00000119  52				push edx
 0000011A  BA 000002C0 R		mov edx, OFFSET ganso6
 0000011F  E8 00000000 E		call WriteString

 00000124  5A				pop edx
 00000125  B2 13			mov dl, 19
 00000127  FE C6			inc dh
 00000129  E8 00000000 E		call GotoXY
 0000012E  52				push edx
 0000012F  BA 000002CB R		mov edx, OFFSET ganso7
 00000134  E8 00000000 E		call WriteString

 00000139  5A				pop edx
 0000013A  B2 13			mov dl, 19
 0000013C  FE C6			inc dh
 0000013E  E8 00000000 E		call GotoXY
 00000143  52				push edx
 00000144  BA 000002D3 R		mov edx, OFFSET ganso8
 00000149  E8 00000000 E		call WriteString

 0000014E  5A				pop edx
 0000014F  B2 13			mov dl, 19
 00000151  FE C6			inc dh
 00000153  E8 00000000 E		call GotoXY
 00000158  52				push edx
 00000159  BA 000002DB R		mov edx, OFFSET ganso9
 0000015E  E8 00000000 E		call WriteString 
 00000163  5A				pop edx
					ret
 00000164  58		   *	    pop    eax
 00000165  5A		   *	    pop    edx
 00000166  C3		   *	    ret    00000h
 00000167			DesenhaGansoEmPE ENDP
				;===================================================================

				;======================Desenha o Ganso agachado ====================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela em pé no chão ou no ar
				;===================================================================
 00000167			DesenhaGansoAgachado PROC USES eax
 00000167  50		   *	    push   eax
 00000168  B8 0000000F		    mov eax, white
 0000016D  E8 00000000 E		call SetTextColor
 00000172  B2 18		    mov dl, 24
 00000174  8A 35 00000038 R		mov dh, PosY
 0000017A  52				push edx
 0000017B  E8 00000000 E		call GotoXY
 00000180  BA 000002E1 R		mov edx, OFFSET ganso_agachado1
 00000185  E8 00000000 E		call WriteString

 0000018A  5A				pop edx
 0000018B  B2 17		    mov dl, 23
 0000018D  FE C6			inc dh
 0000018F  E8 00000000 E		call GotoXY
 00000194  52				push edx
 00000195  BA 000002E6 R		mov edx, OFFSET ganso_agachado2
 0000019A  E8 00000000 E		call WriteString

 0000019F  5A				pop edx
 000001A0  B2 11			mov dl, 17
 000001A2  FE C6			inc dh
 000001A4  E8 00000000 E		call GotoXY
 000001A9  52				push edx
 000001AA  BA 000002ED R		mov edx, OFFSET ganso_agachado3
 000001AF  E8 00000000 E		call WriteString

 000001B4  5A				pop edx
 000001B5  B2 10			mov dl, 16
 000001B7  FE C6			inc dh
 000001B9  E8 00000000 E		call GotoXY
 000001BE  52				push edx
 000001BF  BA 000002FA R		mov edx, OFFSET ganso_agachado4
 000001C4  E8 00000000 E		call WriteString

 000001C9  5A				pop edx
 000001CA  B2 12			mov dl, 18
 000001CC  FE C6			inc dh
 000001CE  E8 00000000 E		call GotoXY
 000001D3  52				push edx
 000001D4  BA 00000309 R		mov edx, OFFSET ganso_agachado5
 000001D9  E8 00000000 E		call WriteString	

 000001DE  5A				pop edx
 000001DF  B2 13			mov dl, 19
 000001E1  FE C6			inc dh
 000001E3  E8 00000000 E		call GotoXY
 000001E8  52				push edx
 000001E9  BA 00000316 R		mov edx, OFFSET ganso_agachado6
 000001EE  E8 00000000 E		call WriteString

 000001F3  5A				pop edx
 000001F4  B2 13			mov dl, 19
 000001F6  FE C6			inc dh
 000001F8  E8 00000000 E		call GotoXY
 000001FD  52				push edx
 000001FE  BA 00000323 R		mov edx, OFFSET ganso_agachado7
 00000203  E8 00000000 E		call WriteString
 00000208  5A				pop edx

					ret
 00000209  58		   *	    pop    eax
 0000020A  C3		   *	    ret    00000h
					exit
 0000020B  6A 00	   *	    push   +000000000h
 0000020D  E8 00000000 E   *	    call   ExitProcess
 00000212			DesenhaGansoAgachado ENDP
				;===================================================================

				;======================Deleta Desenho===============================
				;Recebe:PosX, PosY(ganso em pé = 20, obstaculo1 = 26, obstaculo2 = 19),
				;		larguraO, alturaO
				;Retorna:
				;===================================================================
 00000212			DeletaDesenho PROC USES edx eax ecx
 00000212  52		   *	    push   edx
 00000213  50		   *	    push   eax
 00000214  51		   *	    push   ecx
 00000215  8A 15 00000039 R		mov dl, PosX
 0000021B  8A 35 00000038 R		mov dh, PosY
 00000221  E8 00000000 E		call GotoXY
					
 00000226  0F B6 0D			movzx ecx, alturaO   ; Nr de Linhas do Desenho
	   0000003B R
 0000022D  B0 20			mov al, 32   ; Barra de Espaço
 0000022F				LINHA:
 0000022F  51					push ecx
 00000230  0F B6 0D				movzx ecx, larguraO   ; Nr de Colunas do Desenho
	   0000003A R
 00000237					COLUNA:
 00000237  E8 00000000 E				call WriteChar
 0000023C  E2 F9				loop COLUNA
 0000023E  59					pop ecx
 0000023F  FE C6				inc dh
 00000241  E8 00000000 E			call GotoXY
 00000246  E2 E7			loop LINHA

					ret
 00000248  59		   *	    pop    ecx
 00000249  58		   *	    pop    eax
 0000024A  5A		   *	    pop    edx
 0000024B  C3		   *	    ret    00000h
 0000024C			DeletaDesenho ENDP

				;=====================Desenha Obstaculo1============================
				;Recebe: PosX
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 0000024C			DesenhaObstaculo1 PROC USES ecx
 0000024C  51		   *	    push   ecx
 0000024D  B8 00000006			mov eax, brown
 00000252  E8 00000000 E		call SetTextColor
 00000257  8A 15 00000039 R		mov dl, PosX			;Posição que vai desenhar
 0000025D  B6 1A			mov dh, Y_OBSTACULO1	
 0000025F  B0 21			mov al, "!"
 00000261  B9 00000005			mov ecx, 5
 00000266				CIMA:
 00000266  E8 00000000 E			call GotoXY
 0000026B  E8 00000000 E			call WriteChar
 00000270  FE C2				inc dl
 00000272  E2 F2			loop CIMA
					
 00000274  8A 15 00000039 R		mov dl, PosX
 0000027A  B6 1B			mov dh, 27
 0000027C  B9 00000002			mov ecx, 2
 00000281				LADOS:
 00000281  E8 00000000 E			call GotoXY
 00000286  E8 00000000 E			call WriteChar
 0000028B  80 C2 04				add dl, 4
 0000028E  E8 00000000 E			call GotoXY
 00000293  E8 00000000 E			call WriteChar
 00000298  80 EA 04				sub dl, 4
 0000029B  FE C6				inc dh
 0000029D  E2 E2			loop LADOS
					ret
 0000029F  59		   *	    pop    ecx
 000002A0  C3		   *	    ret    00000h
 000002A1			DesenhaObstaculo1 ENDP
				;====================================================================

				;=====================Desenha Obstaculo2============================
				;Recebe: PosX
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 000002A1			DesenhaObstaculo2 PROC USES ecx
 000002A1  51		   *	    push   ecx
 000002A2  B8 00000004			mov eax, red
 000002A7  E8 00000000 E		call SetTextColor
 000002AC  80 05 00000039 R		add PosX, 1		;Posição que vai desenhar
	   01
 000002B3  8A 15 00000039 R		mov dl, PosX
 000002B9  B6 13			mov dh, Y_OBSTACULO2
 000002BB  FE 0D 00000039 R		dec PosX

 000002C1  B0 2F			mov al, "/"
 000002C3  E8 00000000 E		call GotoXY
 000002C8  E8 00000000 E		call WriteChar

 000002CD  FE C6			inc dh
 000002CF  FE CA			dec dl
 000002D1  B0 78			mov al, "x"
 000002D3  E8 00000000 E		call GotoXY
 000002D8  E8 00000000 E		call WriteChar

 000002DD  FE C2			inc dl
 000002DF  B0 2D			mov al, "-"
 000002E1  B9 00000004			mov ecx, 4
 000002E6				L1: 
 000002E6  E8 00000000 E			call GotoXY
 000002EB  E8 00000000 E			call WriteChar
 000002F0  FE C2				inc dl
 000002F2  E2 F2			loop L1

 000002F4  FE C6			inc dh
 000002F6  80 EA 04			sub dl, 4
 000002F9  B0 5C			mov al, "\"
 000002FB  E8 00000000 E		call GotoXY
 00000300  E8 00000000 E		call WriteChar
					ret
 00000305  59		   *	    pop    ecx
 00000306  C3		   *	    ret    00000h
 00000307			DesenhaObstaculo2 ENDP
				;====================================================================

				;=========================Desenha Céu===============================
				;Recebe: nda
				;Retorna: desenho do ceu do jogo na tela
				;===================================================================
 00000307			DesenhaCeu PROC 
					;SOL
 00000307  B8 0000000E			mov eax, yellow
 0000030C  E8 00000000 E		call SetTextColor
 00000311  B2 01			mov dl, 1
 00000313  B6 03			mov dh, 3
 00000315  E8 00000000 E		call GotoXY
 0000031A  BA 0000051F R		mov edx, OFFSET sol
 0000031F  E8 00000000 E		call WriteString
					;NUVEM
 00000324  B8 0000000F			mov eax, white
 00000329  E8 00000000 E		call SetTextColor
 0000032E  B2 01			mov dl, 1
 00000330  B6 0A			mov dh, 10
 00000332  E8 00000000 E		call GotoXY
 00000337  BA 0000032E R		mov edx, OFFSET nuvem
 0000033C  E8 00000000 E		call WriteString
 00000341  C3				ret
 00000342			DesenhaCeu ENDP
				;==================================================================

				;=======================Inicializa Jogo==============================
				;Recebe: nda
				;Retorna: Tela inicial do jogo
				;====================================================================
 00000342			InicializaJogo PROC
 00000342  E8 00000000 E		call Clrscr
 00000347  C6 05 00000038 R		mov PosY, Y_GANSO_EM_PE
	   14
 0000034E  E8 FFFFFD44			call DesenhaGansoEmPE
 00000353  E8 FFFFFFAF			call DesenhaCeu
 00000358  B8 00000002			mov eax, green	;cor da moldura
 0000035D  E8 FFFFFCD9			call Moldura
					
 00000362  E8 00000029			call CriaObstaculo
 00000367  C3				ret
 00000368			InicializaJogo ENDP
				;====================================================================

				;==========================Pontuação=================================
				;Recebe: Pontuação
				;Retorna: pontuação no canto direito da tela
				;====================================================================
 00000368			Pontuacao PROC
 00000368  B8 00000002			mov eax, green
 0000036D  E8 00000000 E		call SetTextColor
 00000372  B2 4D			mov dl, X_SCORE
 00000374  B6 05			mov dh, Y_SCORE
 00000376  E8 00000000 E		call GotoXY
 0000037B  BA 0000004E R		mov edx , OFFSET Score
 00000380  E8 00000000 E		call WriteString

 00000385  A1 00000069 R		mov eax, Pontos
 0000038A  E8 00000000 E		call WriteDec
 0000038F  C3				ret
 00000390			Pontuacao ENDP

				;=====================Cria Obstaculo ================================
				;Gera os obstáculos de forma aleatória
				;Recebe: PosObs1 , PosObs2, CtrlObs1 e CtrlObs2
				;Retorna: um obstáculo(ou nada) na tela
				;====================================================================
 00000390			CriaObstaculo PROC
 00000390  E8 00000000 E		call Randomize		;Gera um valor aleatorio: 0= nda, 1= cria obstaculo do tipo 1, 2 = cria obstaculo do tipo 2
 00000395  B8 00000003			mov eax, 3
 0000039A  E8 00000000 E		call RandomRange
					.IF al == 1
 0000039F  3C 01	   *	    cmp    al, 001h
 000003A1  75 24	   *	    jne    @C0001
 000003A3  C6 05 00000039 R			mov PosX, FINAL_DIREITA			;Pos final da tela(esquerda)
	   64
 000003AA  E8 FFFFFE9D				call DesenhaObstaculo1
 000003AF  0F B6 1D				movzx ebx, CtrlObs1
	   0000004C R
 000003B6  C6 83 0000003E R			mov PosObs1[ebx], FINAL_DIREITA	;Adiciona posição do obstáculo criado ao vetor de posições
	   64
 000003BD  FE 05 0000004C R			inc CtrlObs1			;Incrementa contador da fila
 000003C3  EB 28				jmp FIM
					.ELSEIF al == 2
 000003C5  EB 26	   *	    jmp    @C0003
 000003C7		   *@C0001:
 000003C7  3C 02	   *	    cmp    al, 002h
 000003C9  75 22	   *	    jne    @C0004
 000003CB  C6 05 00000039 R			mov PosX, 99			;Pos final da tela(esquerda)
	   63
 000003D2  E8 FFFFFECA				call DesenhaObstaculo2
 000003D7  0F B6 1D				movzx ebx, CtrlObs2
	   0000004D R
 000003DE  C6 83 00000045 R			mov PosObs2[ebx], FINAL_DIREITA	;Adiciona posição do obstáculo criado ao vetor de posições
	   64
 000003E5  FE 05 0000004D R			inc CtrlObs2			;Incrementa contador da fila
 000003EB  EB 00				jmp FIM
					.ENDIF
 000003ED		   *@C0004:
 000003ED		   *@C0003:
 000003ED				FIM:
 000003ED  C3				ret
 000003EE			CriaObstaculo ENDP
				;====================================================================

				;=======================JOGO=========================================
				;Rotina do jogo. Faz a leitura da tecla de salto(W) e agachamento (S), chama os 
				;procedimentos de movimentação e criação de obstaculos e testa colisões
				;Recebe: add contadorTempo, contadorObstaculo, contadorPulo,contadorAgacha, statusGanso,
				;PosX, PosY, constantes de posição e tamanho, Pontos, dificuldade
				;Retorna: jogo na tela
				;====================================================================
 000003EE			Jogo PROC
 000003EE  E8 FFFFFF4F			call InicializaJogo
 000003F3				JOGO_LOOP:
 000003F3  0F B6 05				movzx eax, dificuldade
	   0000003D R
 000003FA  E8 00000000 E			call Delay
 000003FF  E8 00000000 E			call ReadKey
						;contadores que controlam a atualização da tela e movimentação dos desenhos
 00000404  83 05 00000028 R			add contadorTempo, 50
	   32
 0000040B  83 05 0000002C R			add contadorObstaculo, 50
	   32
 00000412  83 05 00000030 R			add contadorPulo, 50
	   32
 00000419  83 05 00000034 R			add contadorAgacha, 50
	   32
						
						.IF al == "w"        ;Faz o Ganso Pular
 00000420  3C 77	   *	    cmp    al, 'w'
 00000422  75 63	   *	    jne    @C0006
							;Deletando o Desenho do Ganso
							INVOKE PlaySound, OFFSET fileQuack, NULL, 00020001h
 00000424  68 00020001	   *	    push   +000020001h
 00000429  6A 00	   *	    push   +000000000h
 0000042B  68 0000000E R   *	    push   dword  ptr OFFSET FLAT: fileQuack
 00000430  E8 00000000 E   *	    call   PlaySound
 00000435  C6 05 0000003C R				mov statusGanso, 2
	   02
 0000043C  C6 05 00000039 R				mov PosX,16
	   10
 00000443  C6 05 00000038 R				mov PosY, Y_GANSO_EM_PE
	   14
 0000044A  C6 05 0000003A R				mov larguraO, LARGURA_GANSO
	   0C
 00000451  C6 05 0000003B R				mov alturaO,ALTURA_GANSO
	   09
 00000458  E8 FFFFFDB5					call DeletaDesenho
							;Desenhando o Ganso no Ar
 0000045D  C6 05 00000038 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000464  C7 05 00000030 R				mov contadorPulo, 0
	   00000000
 0000046E  C7 05 00000034 R				mov contadorAgacha, 0
	   00000000
 00000478  E8 FFFFFC1A					call DesenhaGansoEmPE
 0000047D  E9 0000009A					jmp DELAY_MOVIMENTO
						
						.ELSEIF al ==  "s"    ;Faz o Ganso Agachar
 00000482  E9 00000095	   *	    jmp    @C0008
 00000487		   *@C0006:
 00000487  3C 73	   *	    cmp    al, 's'
 00000489  0F 85 0000008D  *	    jne    @C0009
							;Deletando o Desenho do Ganso
							INVOKE PlaySound, OFFSET fileQuack, NULL, 00020001h
 0000048F  68 00020001	   *	    push   +000020001h
 00000494  6A 00	   *	    push   +000000000h
 00000496  68 0000000E R   *	    push   dword  ptr OFFSET FLAT: fileQuack
 0000049B  E8 00000000 E   *	    call   PlaySound
 000004A0  C6 05 00000039 R				mov PosX,16
	   10
 000004A7  80 3D 0000003C R				cmp statusGanso, 2
	   02
 000004AE  75 10					jne NPULANDO
 000004B0  C6 05 00000038 R					mov PosY, Y_GANSO_PULANDO
	   0F
 000004B7  C6 05 0000003B R				    mov alturaO,ALTURA_GANSO
	   09
 000004BE  EB 27						jmp DELETA_
 000004C0						NPULANDO:
 000004C0  80 3D 0000003C R				cmp statusGanso, 1
	   01
 000004C7  75 10					jne AGACHADO_
 000004C9  C6 05 00000038 R					mov PosY, Y_GANSO_EM_PE
	   14
 000004D0  C6 05 0000003B R					mov alturaO,ALTURA_GANSO
	   09
 000004D7  EB 0E						jmp DELETA_
 000004D9						AGACHADO_:
 000004D9  C6 05 00000038 R					mov PosY, Y_GANSO_AGACHADO
	   16
 000004E0  C6 05 0000003B R					mov alturaO,ALTURA_GANSO_AGACHADO
	   07
 000004E7						DELETA_:
 000004E7  C6 05 0000003A R				mov larguraO, LARGURA_GANSO
	   0C
 000004EE  E8 FFFFFD1F					call DeletaDesenho
							;Desenhando o Ganso Agachado
 000004F3  C6 05 00000038 R				mov PosY, Y_GANSO_AGACHADO
	   16
 000004FA  C7 05 00000034 R				mov contadorAgacha, 0
	   00000000
 00000504  C7 05 00000030 R				mov contadorPulo, 0
	   00000000
 0000050E  E8 FFFFFC54					call DesenhaGansoAgachado
 00000513  C6 05 0000003C R				mov statusGanso, 0
	   00
 0000051A  EB 00					jmp DELAY_MOVIMENTO
							
						.ENDIF
 0000051C		   *@C0009:
 0000051C		   *@C0008:
						
 0000051C					DELAY_MOVIMENTO:
						.IF contadorPulo == 1700 && statusGanso == 2
 0000051C  81 3D 00000030 R
	   000006A4	   *	    cmp    contadorPulo, 006A4h
 00000526  75 49	   *	    jne    @C000B
 00000528  80 3D 0000003C R
	   02		   *	    cmp    statusGanso, 002h
 0000052F  75 40	   *	    jne    @C000B
							;Deleta o Ganso no Ar
 00000531  C6 05 0000003C R				mov statusGanso, 1
	   01
 00000538  C6 05 00000039 R				mov PosX, 16
	   10
 0000053F  C6 05 00000038 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000546  C6 05 0000003A R				mov larguraO, LARGURA_GANSO
	   0C
 0000054D  C6 05 0000003B R				mov alturaO, ALTURA_GANSO
	   09
 00000554  E8 FFFFFCB9					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 00000559  C6 05 00000038 R				mov PosY, Y_GANSO_EM_PE
	   14
 00000560  E8 FFFFFB32					call DesenhaGansoEmPE
							
 00000565  C7 05 00000030 R				mov contadorPulo, 0
	   00000000
 0000056F  EB 00					jmp DELAY_MOVIMENTO2
						.ENDIF
 00000571		   *@C000B:

 00000571					DELAY_MOVIMENTO2:
						.IF contadorAgacha == 1500 && statusGanso == 0
 00000571  81 3D 00000034 R
	   000005DC	   *	    cmp    contadorAgacha, 005DCh
 0000057B  75 49	   *	    jne    @C000E
 0000057D  80 3D 0000003C R
	   00		   *	    cmp    statusGanso, 000h
 00000584  75 40	   *	    jne    @C000E
							;Deleta o Ganso agachado
 00000586  C6 05 0000003C R				mov statusGanso, 1
	   01
 0000058D  C6 05 00000039 R				mov PosX, 16
	   10
 00000594  C6 05 00000038 R				mov PosY, Y_GANSO_AGACHADO-2
	   14
 0000059B  C6 05 0000003A R				mov larguraO, LARGURA_GANSO
	   0C
 000005A2  C6 05 0000003B R				mov alturaO, ALTURA_GANSO
	   09
 000005A9  E8 FFFFFC64					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 000005AE  C6 05 00000038 R				mov PosY, Y_GANSO_EM_PE
	   14
 000005B5  E8 FFFFFADD					call DesenhaGansoEmPE
							
 000005BA  C7 05 00000034 R				mov contadorAgacha, 0
	   00000000
 000005C4  EB 00					jmp ATUALIZA_OBSTACULOS
						.ENDIF
 000005C6		   *@C000E:
						
 000005C6					ATUALIZA_OBSTACULOS:
						.IF contadorTempo == 100    
 000005C6  83 3D 00000028 R
	   64		   *	    cmp    contadorTempo, 064h
 000005CD  75 1C	   *	    jne    @C0011
 000005CF  E8 00000090					call AtualizaObstaculos
 000005D4  C7 05 00000028 R				mov contadorTempo, 0
	   00000000
 000005DE  FF 05 00000069 R				inc Pontos
 000005E4  E8 FFFFFD7F					call Pontuacao
 000005E9  EB 00					jmp TESTA_COLISAO
						.ENDIF
 000005EB		   *@C0011:

 000005EB					TESTA_COLISAO:
						.IF (PosObs1[0] <= 23 && PosObs1[0] >= 13 && statusGanso != 2) || (PosObs2[0] <= 27 && PosObs2[0] >= 20 && statusGanso != 0 ) || (PosObs2[0] <= 25 && PosObs2[0] >= 11 && statusGanso == 2)
 000005EB  80 3D 0000003E R
	   17		   *	    cmp    PosObs1 + [000h], 017h
 000005F2  77 12	   *	    ja	@C0016
 000005F4  80 3D 0000003E R
	   0D		   *	    cmp    PosObs1 + [000h], 00Dh
 000005FB  72 09	   *	    jb	@C0016
 000005FD  80 3D 0000003C R
	   02		   *	    cmp    statusGanso, 002h
 00000604  75 36	   *	    jne    @C0014
 00000606		   *@C0016:
 00000606  80 3D 00000045 R
	   1B		   *	    cmp    PosObs2 + [000h], 01Bh
 0000060D  77 12	   *	    ja	@C0015
 0000060F  80 3D 00000045 R
	   14		   *	    cmp    PosObs2 + [000h], 014h
 00000616  72 09	   *	    jb	@C0015
 00000618  80 3D 0000003C R
	   00		   *	    cmp    statusGanso, 000h
 0000061F  75 1B	   *	    jne    @C0014
 00000621		   *@C0015:
 00000621  80 3D 00000045 R
	   19		   *	    cmp    PosObs2 + [000h], 019h
 00000628  77 14	   *	    ja	@C0013
 0000062A  80 3D 00000045 R
	   0B		   *	    cmp    PosObs2 + [000h], 00Bh
 00000631  72 0B	   *	    jb	@C0013
 00000633  80 3D 0000003C R
	   02		   *	    cmp    statusGanso, 002h
 0000063A  75 02	   *	    jne    @C0013
 0000063C		   *@C0014:
 0000063C  EB 25					jmp PERDEU_
						.ENDIF
 0000063E		   *@C0013:

						.IF contadorObstaculo >= 2500
 0000063E  81 3D 0000002C R
	   000009C4	   *	    cmp    contadorObstaculo, 009C4h
 00000648  72 14	   *	    jb	@C001D
 0000064A  E8 FFFFFD41					call CriaObstaculo
 0000064F  C7 05 0000002C R				mov contadorObstaculo, 0
	   00000000
 00000659  E9 FFFFFD95					jmp JOGO_LOOP
						.ENDIF
 0000065E		   *@C001D:
						
						
 0000065E  E9 FFFFFD90			jmp JOGO_LOOP
 00000663				PERDEU_:
 00000663  C3				ret
 00000664			Jogo ENDP
				;=====================================================================

				;=======================Atualiza Obstaculos==========================
				;Atualiza posição de todos os obstáculos desenhados na tela
				;Recebe: Lista com posição dos obstáculos existentes
				;Retorna: Lista de posições atualizada e desenhos nas novas posições
				;====================================================================
 00000664			AtualizaObstaculos PROC USES ecx
					;Obstaculos do tipo 1 =============================
 00000664  51		   *	    push   ecx
 00000665  B9 00000000			mov ecx, 0
 0000066A  8A 0D 0000004C R		mov cl, CtrlObs1	;final da fila de posições +1  
 00000670  80 F9 00			cmp cl, 0
 00000673  74 6C			je TIPO2	;Se não existir obstáculo do tipo 1 pula para tipo 2
 00000675				PERCORRE1:
						;Deletando objeto1 da posição PosObs1[ecx]
 00000675  49					dec ecx	;elemento anterior da fila 
 00000676  8A 99 0000003E R			mov bl, PosObs1[ecx]	;bl = posição do elemento da fila
 0000067C  88 1D 00000039 R			mov PosX, bl
 00000682  C6 05 00000038 R			mov PosY, Y_OBSTACULO1
	   1A
 00000689  C6 05 0000003A R			mov larguraO, LARGURA_OBJ1
	   05
 00000690  C6 05 0000003B R			mov alturaO, ALTURA_OBJ1
	   03
 00000697  E8 FFFFFB76				call DeletaDesenho

						;Desenhando na nova posição após apagar da posição anterior
						.IF PosX >= 3 	;Final da tela(esquerda)
 0000069C  80 3D 00000039 R
	   03		   *	    cmp    PosX, 003h
 000006A3  72 21	   *	    jb	@C001F
 000006A5  FE 0D 00000039 R				dec PosX     ;movimenta uma unidade para a esquerda
 000006AB  8A 1D 00000039 R				mov bl, PosX
 000006B1  88 99 0000003E R				mov PosObs1[ecx], bl	;Atualizando vetor de posições
 000006B7  88 1D 00000039 R				mov PosX, bl
 000006BD  E8 FFFFFB8A					call DesenhaObstaculo1
 000006C2  EB 1A					jmp INCREMENTA1
						.ELSE					;Obstáculo chegou ao fim da tela => deleta 
 000006C4  EB 18	   *	    jmp    @C0021
 000006C6		   *@C001F:
 000006C6  BA 0000003E R				mov edx, OFFSET PosObs1
 000006CB  FE 0D 0000004C R				dec CtrlObs1	;Diminui um elemento da fila
 000006D1  8A 1D 0000004C R				mov bl, CtrlObs1
 000006D7  E8 0000007E					call ShiftLeftVetorPosicao 	;shifta o vetor PosObs1 para a esquerda
 000006DC  EB 00					jmp INCREMENTA1
						.ENDIF
 000006DE		   *@C0021:
 000006DE					INCREMENTA1:
 000006DE  41					inc ecx
 000006DF  E2 94			loop PERCORRE1
					;=================================================
					;Obstáculos do tipo 2 ============================
 000006E1				TIPO2:
 000006E1  8A 0D 0000004D R		mov cl, CtrlObs2
 000006E7  80 F9 00			cmp cl, 0
 000006EA  74 6C			je SAIR		;Se não existir obstáculo do tipo 2, sai
 000006EC				PERCORRE2:
						;Deletando objeto2 da posição PosObs2[ecx]
 000006EC  49					dec ecx     ;elemento anterior da fila 
 000006ED  8A 99 00000045 R			mov bl, PosObs2[ecx]	;bl = posição do elemento da fila
 000006F3  88 1D 00000039 R			mov PosX, bl
 000006F9  C6 05 00000038 R			mov PosY, Y_OBSTACULO2
	   13
 00000700  C6 05 0000003A R			mov larguraO, LARGURA_OBJ2
	   05
 00000707  C6 05 0000003B R			mov alturaO, ALTURA_OBJ2
	   03
 0000070E  E8 FFFFFAFF				call DeletaDesenho

						;Desenhando na nova posição após apagar da posição anterior
						.IF PosX >= 3   ;Final da tela(esquerda)
 00000713  80 3D 00000039 R
	   03		   *	    cmp    PosX, 003h
 0000071A  72 21	   *	    jb	@C0022
 0000071C  FE 0D 00000039 R				dec PosX	;movimenta uma unidade para a esquerda
 00000722  8A 1D 00000039 R				mov bl, PosX
 00000728  88 99 00000045 R				mov PosObs2[ecx], bl
 0000072E  88 1D 00000039 R				mov PosX, bl
 00000734  E8 FFFFFB68					call DesenhaObstaculo2
 00000739  EB 1A					jmp INCREMENTA2
						.ELSE
 0000073B  EB 18	   *	    jmp    @C0024
 0000073D		   *@C0022:
 0000073D  BA 00000045 R				mov edx, OFFSET PosObs2
 00000742  FE 0D 0000004D R				dec CtrlObs2		;Diminui um elemento da fila
 00000748  8A 1D 0000004D R				mov bl, CtrlObs2
 0000074E  E8 00000007					call ShiftLeftVetorPosicao		;shifta o vetor PosObs2 para a esquerda
 00000753  EB 00					jmp INCREMENTA2
						.ENDIF
 00000755		   *@C0024:
 00000755					INCREMENTA2:
 00000755  41					inc ecx
 00000756  E2 94			loop PERCORRE2
					;=================================================
 00000758				SAIR:
					ret
 00000758  59		   *	    pop    ecx
 00000759  C3		   *	    ret    00000h
 0000075A			AtualizaObstaculos ENDP
				;====================================================================

				;=====================Shift Vetor Posição=========================
				;Recebe: edx = OFFSET do Vetor, ebx = numero de elementos do vetor -1
				;retorna: vetor shiftado para a esquerda
				;====================================================================
 0000075A			ShiftLeftVetorPosicao PROC USES ecx ebx edx
 0000075A  51		   *	    push   ecx
 0000075B  53		   *	    push   ebx
 0000075C  52		   *	    push   edx
 0000075D  8B CB			mov ecx, ebx
 0000075F  83 F9 00			cmp ecx, 0
 00000762  74 0B			je EXCEPTION_ ;Se ecx = 0 loop não funciona corretamente
 00000764				PERCORRE:
 00000764  42					inc edx
 00000765  8A 1A				mov bl, [edx]
 00000767  4A					dec edx
 00000768  88 1A				mov [edx], bl 
 0000076A  42					inc edx
 0000076B  E2 F7			loop PERCORRE
 0000076D  EB 07			jmp SAIR

 0000076F				EXCEPTION_:
 0000076F  42					inc edx
 00000770  8A 1A				mov bl, [edx]
 00000772  4A					dec edx
 00000773  88 1A				mov [edx], bl 
 00000775  42					inc edx
 00000776				SAIR:
					ret
 00000776  5A		   *	    pop    edx
 00000777  5B		   *	    pop    ebx
 00000778  59		   *	    pop    ecx
 00000779  C3		   *	    ret    00000h
 0000077A			ShiftLeftVetorPosicao ENDP
				;====================================================================

				;========================Reset ======================================
				;Recebe: CtrlObs1, CtrlObs2, contadores de tempo, e Pontos
				;Retorna: CtrlObs1 = 0 e CtrlObs2 = 0, todos os contadores = 0, Pontos = 0
				;PosObs1 = 0, PosObs2 = 0
				;====================================================================
 0000077A			Reset PROC
 0000077A  C6 05 0000004C R		mov CtrlObs1, 0
	   00
 00000781  C6 05 0000004D R		mov CtrlObs2, 0
	   00
 00000788  C7 05 00000028 R		mov contadorTempo, 0
	   00000000
 00000792  C7 05 0000002C R		mov contadorObstaculo, 0
	   00000000
 0000079C  C7 05 00000030 R		mov contadorPulo, 0
	   00000000
 000007A6  C7 05 00000034 R		mov contadorAgacha, 0
	   00000000
 000007B0  C6 05 0000003E R		mov PosObs1, 0
	   00
 000007B7  C6 05 00000045 R		mov PosObs2, 0
	   00
 000007BE  C7 05 00000069 R		mov Pontos, 0
	   00000000
 000007C8  C3				ret
 000007C9			Reset ENDP
				;====================================================================
				;============================Perdeu==================================
				;Recebe: Pontos, Recorde
				;Retorna: tela de game over
				;====================================================================
 000007C9			Perdeu PROC
 000007C9  E8 00000000 E		call Clrscr
 000007CE  B8 00000004			mov eax, red
 000007D3  E8 00000000 E		call SetTextColor
 000007D8  B2 01			mov dl, 1
 000007DA  B6 0A			mov dh, 10
 000007DC  E8 00000000 E		call GotoXY
 000007E1  BA 000005D3 R		mov edx, OFFSET gameover
 000007E6  E8 00000000 E		call WriteString
 000007EB  B8 0000000F			mov eax, white
 000007F0  E8 00000000 E		call SetTextColor

 000007F5  B2 01			mov dl, 1
 000007F7  B6 16			mov dh, 22
 000007F9  E8 00000000 E		call GotoXY
 000007FE  BA 000007C5 R		mov edx, OFFSET menuFinal
 00000803  E8 00000000 E		call WriteString
 00000808  B8 00000004			mov eax, red
 0000080D  E8 00000000 E		call SetTextColor
 00000812  E8 FFFFF824			call Moldura

					;RESULTADO FINAL
 00000817  B8 0000000F			mov eax, white
 0000081C  E8 00000000 E		call SetTextColor
 00000821  B2 2D			mov dl, 45
 00000823  B6 12			mov dh, 18
 00000825  E8 00000000 E		call GotoXY
 0000082A  A1 00000069 R		mov eax, Pontos
					.IF eax > Recorde
 0000082F  3B 05 0000006D R *	    cmp    eax, Recorde
 00000835  76 1D	   *	    jbe    @C0025
 00000837  BA 0000005A R			mov edx, OFFSET NovoRecorde
 0000083C  E8 00000000 E			call WriteString
 00000841  E8 FFFFFF34				call Reset
 00000846  E8 00000000 E			call WriteDec
 0000084B  A3 0000006D R			mov Recorde, eax
 00000850  EB 13				jmp ESPERANDO_TECLA
					.ELSE
 00000852  EB 11	   *	    jmp    @C0027
 00000854		   *@C0025:
 00000854  BA 0000004E R			mov edx, OFFSET Score
 00000859  E8 00000000 E			call WriteString
 0000085E  E8 00000000 E			call WriteDec
 00000863  EB 00				jmp ESPERANDO_TECLA
					.ENDIF
 00000865		   *@C0027:

 00000865				ESPERANDO_TECLA:
 00000865  B8 00000032				mov  eax,50          ; sleep, to allow OS to time slice
 0000086A  E8 00000000 E			call Delay           ; (otherwise, some key presses are lost)
 0000086F  E8 00000000 E			call ReadKey         ; look for keyboard input 

						.IF al == "1"
 00000874  3C 31	   *	    cmp    al, '1'
 00000876  75 04	   *	    jne    @C0028
 00000878  EB 0F					jmp MENU_
						.ELSEIF al == VK_ESCAPE
 0000087A  EB 0B	   *	    jmp    @C002A
 0000087C		   *@C0028:
 0000087C  3C 1B	   *	    cmp    al, VK_ESCAPE
 0000087E  75 07	   *	    jne    @C002B
							exit
 00000880  6A 00	   *	    push   +000000000h
 00000882  E8 00000000 E   *	    call   ExitProcess
						.ENDIF
 00000887		   *@C002B:
 00000887		   *@C002A:
 00000887  EB DC			jmp   ESPERANDO_TECLA    ; nenhuma tecla válida pressionada, tenta novamente
					
 00000889				MENU_:
 00000889  E8 FFFFFEEC			call Reset
 0000088E  C3				ret
 0000088F			Perdeu ENDP
				;====================================================================

 0000088F			main PROC
 0000088F				MENU_:
 0000088F  E8 00000000 E		call Clrscr
					;Desenha menu
 00000894  E8 FFFFF767			call DesenhaMenu  
 00000899  B8 00000004			mov eax, red     ;cor da moldura
 0000089E  E8 FFFFF798			call Moldura

					;Esperando tecla ser pressionada
 000008A3				ESPERANDO_TECLA:
 000008A3  B8 00000032				mov  eax,50          ; sleep, to allow OS to time slice
 000008A8  E8 00000000 E			call Delay           ; (otherwise, some key presses are lost)
 000008AD  E8 00000000 E			call ReadKey         ; look for keyboard input 

					.IF al == "1"			 ;JOGO FÁCIL
 000008B2  3C 31	   *	    cmp    al, '1'
 000008B4  75 15	   *	    jne    @C002D
 000008B6  C6 05 0000003D R			mov dificuldade, FACIL	;setando dificuldade
	   32
 000008BD  E8 FFFFFB2C				call Jogo
 000008C2  E8 FFFFFF02				call Perdeu
 000008C7  EB C6				jmp MENU_
					.ELSEIF al == "2"	;JOGO DIFICIL
 000008C9  EB 24	   *	    jmp    @C002F
 000008CB		   *@C002D:
 000008CB  3C 32	   *	    cmp    al, '2'
 000008CD  75 15	   *	    jne    @C0030
 000008CF  C6 05 0000003D R			mov dificuldade, DIFICIL
	   14
 000008D6  E8 FFFFFB13				call Jogo
 000008DB  E8 FFFFFEE9				call Perdeu
 000008E0  EB AD				jmp MENU_
					.ELSEIF al == VK_ESCAPE	;sair
 000008E2  EB 0B	   *	    jmp    @C0032
 000008E4		   *@C0030:
 000008E4  3C 1B	   *	    cmp    al, VK_ESCAPE
 000008E6  75 07	   *	    jne    @C0033
						exit
 000008E8  6A 00	   *	    push   +000000000h
 000008EA  E8 00000000 E   *	    call   ExitProcess
					.ENDIF
 000008EF		   *@C0033:
 000008EF		   *@C0032:
 000008EF		   *@C002F:
					
 000008EF  EB B2			jmp   ESPERANDO_TECLA    ; nenhuma tecla válida pressionada, tenta novamente
 000008F1				SAIR:
 000008F1  B6 28				mov dh, 40
 000008F3  E8 00000000 E			call GotoXY
					exit
 000008F8  6A 00	   *	    push   +000000000h
 000008FA  E8 00000000 E   *	    call   ExitProcess
 000008FF			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.16.27030.1	    06/28/19 16:44:48
jogo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000084C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000008FF Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaObstaculos . . . . . . .	P Near	 00000664 _TEXT	Length= 000000F6 Public STDCALL
  PERCORRE1  . . . . . . . . . .	L Near	 00000675 _TEXT	
  INCREMENTA1  . . . . . . . . .	L Near	 000006DE _TEXT	
  TIPO2  . . . . . . . . . . . .	L Near	 000006E1 _TEXT	
  PERCORRE2  . . . . . . . . . .	L Near	 000006EC _TEXT	
  INCREMENTA2  . . . . . . . . .	L Near	 00000755 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000758 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CriaObstaculo  . . . . . . . . .	P Near	 00000390 _TEXT	Length= 0000005E Public STDCALL
  FIM  . . . . . . . . . . . . .	L Near	 000003ED _TEXT	
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeletaDesenho  . . . . . . . . .	P Near	 00000212 _TEXT	Length= 0000003A Public STDCALL
  LINHA  . . . . . . . . . . . .	L Near	 0000022F _TEXT	
  COLUNA . . . . . . . . . . . .	L Near	 00000237 _TEXT	
DesenhaCeu . . . . . . . . . . .	P Near	 00000307 _TEXT	Length= 0000003B Public STDCALL
DesenhaGansoAgachado . . . . . .	P Near	 00000167 _TEXT	Length= 000000AB Public STDCALL
DesenhaGansoEmPE . . . . . . . .	P Near	 00000097 _TEXT	Length= 000000D0 Public STDCALL
DesenhaMenu  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003B Public STDCALL
DesenhaObstaculo1  . . . . . . .	P Near	 0000024C _TEXT	Length= 00000055 Public STDCALL
  CIMA . . . . . . . . . . . . .	L Near	 00000266 _TEXT	
  LADOS  . . . . . . . . . . . .	L Near	 00000281 _TEXT	
DesenhaObstaculo2  . . . . . . .	P Near	 000002A1 _TEXT	Length= 00000066 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002E6 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InicializaJogo . . . . . . . . .	P Near	 00000342 _TEXT	Length= 00000026 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Jogo . . . . . . . . . . . . . .	P Near	 000003EE _TEXT	Length= 00000276 Public STDCALL
  JOGO_LOOP  . . . . . . . . . .	L Near	 000003F3 _TEXT	
  NPULANDO . . . . . . . . . . .	L Near	 000004C0 _TEXT	
  AGACHADO_  . . . . . . . . . .	L Near	 000004D9 _TEXT	
  DELETA_  . . . . . . . . . . .	L Near	 000004E7 _TEXT	
  DELAY_MOVIMENTO  . . . . . . .	L Near	 0000051C _TEXT	
  DELAY_MOVIMENTO2 . . . . . . .	L Near	 00000571 _TEXT	
  ATUALIZA_OBSTACULOS  . . . . .	L Near	 000005C6 _TEXT	
  TESTA_COLISAO  . . . . . . . .	L Near	 000005EB _TEXT	
  PERDEU_  . . . . . . . . . . .	L Near	 00000663 _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Moldura  . . . . . . . . . . . .	P Near	 0000003B _TEXT	Length= 0000005C Public STDCALL
  INFERIOR . . . . . . . . . . .	L Near	 0000004F _TEXT	
  HORIZONTAL . . . . . . . . . .	L Near	 00000058 _TEXT	
  VERTICAL . . . . . . . . . . .	L Near	 00000076 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Perdeu . . . . . . . . . . . . .	P Near	 000007C9 _TEXT	Length= 000000C6 Public STDCALL
  ESPERANDO_TECLA  . . . . . . .	L Near	 00000865 _TEXT	
  MENU_  . . . . . . . . . . . .	L Near	 00000889 _TEXT	
PlaySound  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Pontuacao  . . . . . . . . . . .	P Near	 00000368 _TEXT	Length= 00000028 Public STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Reset  . . . . . . . . . . . . .	P Near	 0000077A _TEXT	Length= 0000004F Public STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftLeftVetorPosicao  . . . . .	P Near	 0000075A _TEXT	Length= 00000020 Public STDCALL
  PERCORRE . . . . . . . . . . .	L Near	 00000764 _TEXT	
  EXCEPTION_ . . . . . . . . . .	L Near	 0000076F _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000776 _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 0000088F _TEXT	Length= 00000070 Public STDCALL
  MENU_  . . . . . . . . . . . .	L Near	 0000088F _TEXT	
  ESPERANDO_TECLA  . . . . . . .	L Near	 000008A3 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 000008F1 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALTURA_GANSO_AGACHADO  . . . . .	Number	 00000007h   
ALTURA_GANSO . . . . . . . . . .	Number	 00000009h   
ALTURA_OBJ1  . . . . . . . . . .	Number	 00000003h   
ALTURA_OBJ2  . . . . . . . . . .	Number	 00000003h   
ALTURA . . . . . . . . . . . . .	Number	 0000001Dh   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CtrlObs1 . . . . . . . . . . . .	Byte	 0000004C _DATA	
CtrlObs2 . . . . . . . . . . . .	Byte	 0000004D _DATA	
DIFICIL  . . . . . . . . . . . .	Number	 00000014h   
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FACIL  . . . . . . . . . . . . .	Number	 00000032h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FINAL_DIREITA  . . . . . . . . .	Number	 00000064h   
FINAL_ESQUERDA . . . . . . . . .	Number	 00000003h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LARGURA_GANSO  . . . . . . . . .	Number	 0000000Ch   
LARGURA_OBJ1 . . . . . . . . . .	Number	 00000005h   
LARGURA_OBJ2 . . . . . . . . . .	Number	 00000005h   
LARGURA  . . . . . . . . . . . .	Number	 00000069h   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NovoRecorde  . . . . . . . . . .	Byte	 0000005A _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
Pontos . . . . . . . . . . . . .	DWord	 00000069 _DATA	
PosObs1  . . . . . . . . . . . .	Byte	 0000003E _DATA	
PosObs2  . . . . . . . . . . . .	Byte	 00000045 _DATA	
PosX . . . . . . . . . . . . . .	Byte	 00000039 _DATA	
PosY . . . . . . . . . . . . . .	Byte	 00000038 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
Recorde  . . . . . . . . . . . .	DWord	 0000006D _DATA	
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SND_ASYNC  . . . . . . . . . . .	DWord	 0000001C _DATA	
SND_FILENAME . . . . . . . . . .	DWord	 00000024 _DATA	
SND_RESOURCE . . . . . . . . . .	DWord	 00000020 _DATA	
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
Score  . . . . . . . . . . . . .	Byte	 0000004E _DATA	
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
X_SCORE  . . . . . . . . . . . .	Number	 0000004Dh   
Y_GANSO_AGACHADO . . . . . . . .	Number	 00000016h   
Y_GANSO_EM_PE  . . . . . . . . .	Number	 00000014h   
Y_GANSO_PULANDO  . . . . . . . .	Number	 0000000Fh   
Y_OBSTACULO1 . . . . . . . . . .	Number	 0000001Ah   
Y_OBSTACULO2 . . . . . . . . . .	Number	 00000013h   
Y_SCORE  . . . . . . . . . . . .	Number	 00000005h   
alturaO  . . . . . . . . . . . .	Byte	 0000003B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
contadorAgacha . . . . . . . . .	DWord	 00000034 _DATA	
contadorObstaculo  . . . . . . .	DWord	 0000002C _DATA	
contadorPulo . . . . . . . . . .	DWord	 00000030 _DATA	
contadorTempo  . . . . . . . . .	DWord	 00000028 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deviceConnect  . . . . . . . . .	Byte	 00000000 _DATA	
dificuldade  . . . . . . . . . .	Byte	 0000003D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileQuack  . . . . . . . . . . .	Byte	 0000000E _DATA	
gameover . . . . . . . . . . . .	Byte	 000005D3 _DATA	
ganso1 . . . . . . . . . . . . .	Byte	 00000293 _DATA	
ganso2 . . . . . . . . . . . . .	Byte	 00000298 _DATA	
ganso3 . . . . . . . . . . . . .	Byte	 0000029F _DATA	
ganso4 . . . . . . . . . . . . .	Byte	 000002A6 _DATA	
ganso5 . . . . . . . . . . . . .	Byte	 000002B3 _DATA	
ganso6 . . . . . . . . . . . . .	Byte	 000002C0 _DATA	
ganso7 . . . . . . . . . . . . .	Byte	 000002CB _DATA	
ganso8 . . . . . . . . . . . . .	Byte	 000002D3 _DATA	
ganso9 . . . . . . . . . . . . .	Byte	 000002DB _DATA	
ganso_agachado1  . . . . . . . .	Byte	 000002E1 _DATA	
ganso_agachado2  . . . . . . . .	Byte	 000002E6 _DATA	
ganso_agachado3  . . . . . . . .	Byte	 000002ED _DATA	
ganso_agachado4  . . . . . . . .	Byte	 000002FA _DATA	
ganso_agachado5  . . . . . . . .	Byte	 00000309 _DATA	
ganso_agachado6  . . . . . . . .	Byte	 00000316 _DATA	
ganso_agachado7  . . . . . . . .	Byte	 00000323 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
larguraO . . . . . . . . . . . .	Byte	 0000003A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
logo . . . . . . . . . . . . . .	Byte	 00000071 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuFinal  . . . . . . . . . . .	Byte	 000007C5 _DATA	
menu . . . . . . . . . . . . . .	Byte	 0000020E _DATA	
nuvem  . . . . . . . . . . . . .	Byte	 0000032E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sol  . . . . . . . . . . . . . .	Byte	 0000051F _DATA	
statusGanso  . . . . . . . . . .	Byte	 0000003C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
