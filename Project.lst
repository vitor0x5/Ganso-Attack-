Microsoft (R) Macro Assembler Version 14.16.27030.1	    06/14/19 18:50:49
jogo.asm						     Page 1 - 1


				; Implementa��o do jogo Ganso Attack!! em assembly pelos alunos
				; Matheus de Brito Soares Porto RA: 744348
				; Vitor Hugo Guilherme          RA: 744359
				; Da disciplina Arquitetura e Organiza��o de Computadores 2 - DC- UFSCar
				; Professor: Dr. Luciano Neres

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 00000000		outHandle    DWORD ? 
 00000004 0055 0032		scrSize COORD <85,50>
 00000008 00000000		contadorTempo DWORD 0
 0000000C 00000000		contadorObstaculo DWORD 0
 00000010 00000000		contadorPulo DWORD 0 
 00000014 00000000		contadorAgacha DWORD 0

				;constantes utilizadas no desenho da moldura
 = 00000069			LARGURA = 105
 = 0000001E			ALTURA = 30

				;Variáveis auxiliares para impressão e exclusão de objetos da tela
 00000018 00			PosY BYTE ?
 00000019 00			PosX BYTE ?
 0000001A 00			larguraO BYTE ?
 0000001B 00			alturaO BYTE ?

 0000001C 01			statusGanso BYTE 1 ; 0 = Agachado, 1 = em pé, 2 = pulando

				;Tamanho dos desenhos
 = 00000005			LARGURA_OBJ1 = 5
 = 00000003			ALTURA_OBJ1 = 3
 = 00000005			LARGURA_OBJ2 = 5
 = 00000003			ALTURA_OBJ2 = 3
 = 0000000C			LARGURA_GANSO = 12
 = 00000009			ALTURA_GANSO = 9
 = 00000007			ALTURA_GANSO_AGACHADO = 7
				;Posição no eixo Y dos desenhos
 = 00000014			Y_GANSO_EM_PE = 20
 = 0000000F			Y_GANSO_PULANDO =  15
 = 00000016			Y_GANSO_AGACHADO = 22
 = 0000001A			Y_OBSTACULO1 = 26
 = 00000013			Y_OBSTACULO2 = 19

				;Fila de posição dos obstáculos
 0000001D  00000007 [		PosObs1 BYTE 7 DUP(?)
	    00
	   ]
 00000024  00000007 [		PosObs2 BYTE 7 DUP(?)
	    00
	   ]
 0000002B 00			CtrlObs1 BYTE 0			;posições atuais da fila
 0000002C 00			CtrlObs2 BYTE 0


				; Logo do jogo
 0000002D 20 20 20 20 20	logo BYTE "                      ____                            _   _   _             _    _ _ ",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 5F
	   20 20 20 5F 20
	   20 20 5F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5F 20 20 20
	   20 5F 20 5F 20
	   0A 0D
 00000084  09 20 20 20 20		 BYTE "	              / ___| __ _ _ __  ___  ___      / \ | |_| |_ __ _  ___| | _| | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 20
	   2F 20 5F 5F 5F
	   7C 20 5F 5F 20
	   5F 20 5F 20 5F
	   5F 20 20 5F 5F
	   5F 20 20 5F 5F
	   5F 20 20 20 20
	   20 20 2F 20 5C
	   20 7C 20 7C 5F
	   7C 20 7C 5F 20
	   5F 5F 20 5F 20
	   20 5F 5F 5F 7C
	   20 7C 20 5F 7C
	   20 7C 20 7C 0A
	   0D
 000000D5  09 20 20 20 20		 BYTE "	             | |  _ / _` | '_ \/ __|/ _ \    / _ \| __| __/ _` |/ __| |/ / | |",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 20 20 5F
	   20 2F 20 5F 60
	   20 7C 20 27 5F
	   20 5C 2F 20 5F
	   5F 7C 2F 20 5F
	   20 5C 20 20 20
	   20 2F 20 5F 20
	   5C 7C 20 5F 5F
	   7C 20 5F 5F 2F
	   20 5F 60 20 7C
	   2F 20 5F 5F 7C
	   20 7C 2F 20 2F
	   20 7C 20 7C 0A
	   0D
 00000126  09 20 20 20 20		 BYTE "	             | |_| | (_| | | | \__ \ (_) |  / ___ \ |_| || (_| | (__|   <|_|_|",0ah, 0dh  
	   20 20 20 20 20
	   20 20 20 20 7C
	   20 7C 5F 7C 20
	   7C 20 28 5F 7C
	   20 7C 20 7C 20
	   7C 20 5C 5F 5F
	   20 5C 20 28 5F
	   29 20 7C 20 20
	   2F 20 5F 5F 5F
	   20 5C 20 7C 5F
	   7C 20 7C 7C 20
	   28 5F 7C 20 7C
	   20 28 5F 5F 7C
	   20 20 20 3C 7C
	   5F 7C 5F 7C 0A
	   0D
 00000177  09 20 20 20 20		 BYTE "	              \____|\__,_|_| |_|___/\___/  /_/   \_\__|\__\__,_|\___|_|\_(_|_)",0ah, 0dh, 0 
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   7C 5C 5F 5F 2C
	   5F 7C 5F 7C 20
	   7C 5F 7C 5F 5F
	   5F 2F 5C 5F 5F
	   5F 2F 20 20 2F
	   5F 2F 20 20 20
	   5C 5F 5C 5F 5F
	   7C 5C 5F 5F 5C
	   5F 5F 2C 5F 7C
	   5C 5F 5F 5F 7C
	   5F 7C 5C 5F 28
	   5F 7C 5F 29 0A
	   0D 00

				; MENU
 000001C9 09 20 20 20 20	 menu   BYTE "	                  Selecione uma dificuldade para jogar:",0ah, 0dh, 0ah
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 53
	   65 6C 65 63 69
	   6F 6E 65 20 75
	   6D 61 20 64 69
	   66 69 63 75 6C
	   64 61 64 65 20
	   70 61 72 61 20
	   6A 6F 67 61 72
	   3A 0A 0D 0A
 00000204  09 09 09 09 20			BYTE "				              1 - Facil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 31 20
	   2D 20 46 61 63
	   69 6C 0A 0D
 00000221  09 09 09 09 20			BYTE "				              2 - Dificil",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 32 20
	   2D 20 44 69 66
	   69 63 69 6C 0A
	   0D
 00000240  09 09 09 09 20	        BYTE "				              ESC - SAIR",0ah, 0dh
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 45 53
	   43 20 2D 20 53
	   41 49 52 0A 0D
 0000025E  09 09 09 09 00			BYTE "				",0
						
				;Ganso
 00000263 5F 5F 0A 0D 00	ganso1 	BYTE                          "__",0ah,0dh,0  
 00000268 2F 20 20 3E 0A	ganso2	BYTE                         "/  >",0ah,0dh,0  
	   0D 00
 0000026F 2F 20 20 5C 0A	ganso3	BYTE                        "/  \",0ah,0dh,0  
	   0D 00
 00000276 5F 5F 5F 5F 5F	ganso4	BYTE                  "_____/   /",0ah,0dh,0  
	   2F 20 20 20 2F
	   0A 0D 00
 00000283 3C 20 20 20 20	ganso5	BYTE                 "<        /",0ah,0dh,0  
	   20 20 20 20 2F
	   0A 0D 00
 00000290 5C 5F 20 20 20	ganso6	BYTE                  "\_    _/",0ah,0dh,0  
	   20 5F 2F 0A 0D
	   00
 0000029B 7C 20 20 20 7C	ganso7	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 000002A3 7C 20 20 20 7C	ganso8	BYTE                    "|   |",0ah,0dh,0  
	   0A 0D 00
 000002AB 5E 20 20 20 5E	ganso9	BYTE                    "^   ^",0
	   00
					
				; Ganso Agachado
 000002B1 5F 5F 0A 0D 00	ganso_agachado1 	BYTE                         "__",0ah,0dh,0  
 000002B6 2F 20 20 3E 0A	ganso_agachado2		BYTE                       "/  >",0ah,0dh,0  
	   0D 00
 000002BD 5F 5F 5F 5F 5F	ganso_agachado3		BYTE                 "_____/  \ ",0ah,0dh,0  
	   2F 20 20 5C 20
	   0A 0D 00
 000002CA 3C 20 20 20 20	ganso_agachado4		BYTE                "<        /  ",0ah,0dh,0  
	   20 20 20 20 2F
	   20 20 0A 0D 00
 000002D9 5C 5F 20 20 20	ganso_agachado5		BYTE                  "\_   _/   ",0ah,0dh,0  
	   5F 2F 20 20 20
	   0A 0D 00
 000002E6 7C 20 20 20 7C	ganso_agachado6		BYTE                   "|   |     ",0ah,0dh,0  
	   20 20 20 20 20
	   0A 0D 00
 000002F3 5E 20 20 20 5E	ganso_agachado7		BYTE                   "^   ^     ",0
	   20 20 20 20 20
	   00
								
				; Obstaculos
				;obstaculo1 	BYTE "!!!!!",0ah,0dh
				;			BYTE "!   !",0ah,0dh
				;			BYTE "!   !",0ah,0dh,0
							
				;obstaculo2  BYTE " /",0ah,0dh
				;			BYTE "x----",0ah,0dh
				;			BYTE " \ ",0ah,0dh,0

 000002FE 09 09 20 20 20	nuvem   BYTE "		                                         ____     ____        ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 20 20 20
	   20 20 5F 5F 5F
	   5F 20 20 20 20
	   20 20 20 20 0A
	   0D
 00000340  09 20 20 20 20	    	BYTE "	                                              __/    \___/    \____   ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 2F
	   20 20 20 20 5C
	   5F 5F 5F 2F 20
	   20 20 20 5C 5F
	   5F 5F 5F 20 20
	   20 0A 0D
 00000389  09 20 20 20 20	       	BYTE "	                                             /                     \  ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 20
	   20 0A 0D
 000003D2  20 20 20 20 20	   		BYTE "                                                    |                       \ ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 0A 0D
 00000422  09 20 20 20 20	    	BYTE "	                                             \___      __         __| ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   20 20 20 20 20
	   20 5F 5F 20 20
	   20 20 20 20 20
	   20 20 5F 5F 7C
	   20 0A 0D
 0000046B  09 20 20 20 20	        BYTE "	                                                 \____/  \       /    ",0ah,0dh 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 5F 5F 5F 5F
	   2F 20 20 5C 20
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 0A 0D
 000004B4  20 09 09 09 20	        BYTE " 			                                          \_____/     ",0 
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 5F 5F 5F
	   5F 5F 2F 20 20
	   20 20 20 00



 000004EF 20 20 20 20 20	sol     BYTE"          \     /      ",0ah,0dh 
	   20 20 20 20 20
	   5C 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 0A 0D
 00000508  20 20 20 20 20	        BYTE"            \___/       ",0ah,0dh
	   20 20 20 20 20
	   20 20 5C 5F 5F
	   5F 2F 20 20 20
	   20 20 20 20 0A
	   0D
 00000522  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 0000053C  20 20 20 20 20	        BYTE"      ____|       |____ ",0ah,0dh
	   20 5F 5F 5F 5F
	   7C 20 20 20 20
	   20 20 20 7C 5F
	   5F 5F 5F 20 0A
	   0D
 00000556  20 20 20 20 20	        BYTE"           \ ___ /      ",0ah,0dh
	   20 20 20 20 20
	   20 5C 20 5F 5F
	   5F 20 2F 20 20
	   20 20 20 20 0A
	   0D
 00000570  20 20 20 20 20	        BYTE"           /     \      ",0ah,0dh
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 5C 20 20
	   20 20 20 20 0A
	   0D
 0000058A  20 20 20 20 20	        BYTE"          /       \     ",0
	   20 20 20 20 20
	   2F 20 20 20 20
	   20 20 20 5C 20
	   20 20 20 20 00

 00000000			.code
				;==================Desenha o menu inicial ==========================
				;Recebe: nda
				;Retorna: Desenho do menu na tela
				;===================================================================
 00000000			DesenhaMenu PROC
 00000000  B8 00000004			mov  eax, red
 00000005  E8 00000000 E		call SetTextColor
 0000000A  B2 01			mov dl, 1
 0000000C  B6 06			mov dh, 6
 0000000E  E8 00000000 E		call GotoXY
 00000013  BA 0000002D R		mov edx, OFFSET logo
 00000018  E8 00000000 E	    call WriteString

 0000001D  B8 0000000F			mov eax, white
 00000022  E8 00000000 E		call SetTextColor 
 00000027  B6 0F			mov dh, 15
 00000029  E8 00000000 E		call GotoXY
 0000002E  BA 000001C9 R	    mov edx, OFFSET menu   
 00000033  E8 00000000 E		call WriteString  
 00000038  C3				ret
 00000039			DesenhaMenu ENDP
				;===================================================================

				;==============Desenha a moldura da tela=============================
				;Recebe: eax com a cor da moldura, LARGURA e ALTURA da tela
				;Retorna: desenho da moldura na tela 
				;====================================================================
 00000039			Moldura PROC USES edx ecx
 00000039  52		   *	    push   edx
 0000003A  51		   *	    push   ecx
 0000003B  E8 00000000 E		call SetTextColor

					;Superior
 00000040  B2 01			mov dl, 1
 00000042  B6 01			mov dh, 1
 00000044  B9 00000069			mov ecx, LARGURA ;LARGURA da tela do jogo
 00000049  B0 DC			mov al, 220	;caracter ASCII que compõe as barras superior e inferior
 0000004B  EB 09			jmp HORIZONTAL

 0000004D				INFERIOR:
 0000004D  B2 01				mov dl, 1
 0000004F  B6 1E				mov dh, ALTURA	; posição da barra inferior
 00000051  B9 00000069				mov ecx, LARGURA ;LARGURA da tela do jogo

					;Desenha as barras superior e inferior(uma por vez)
 00000056				HORIZONTAL:          
 00000056  E8 00000000 E			call GotoXY
 0000005B  E8 00000000 E			call WriteChar
 00000060  FE C2				inc dl
 00000062  E2 F2			loop HORIZONTAL
 00000064  80 FE 1E			cmp dh, ALTURA
 00000067  75 E4			jne INFERIOR ;se dh != 24 vai para inferior desenhar a outra barra

					;Laterais
 00000069  B2 01			mov dl, 1
 0000006B  B6 02			mov dh, 2
 0000006D  B9 0000001D			mov ecx, ALTURA-1
 00000072  B0 DB			mov al, 219 ;caracter que compõe as barras laterais

					;Desenha as barras verticais(as duas juntas)
 00000074				VERTICAL:            
 00000074  E8 00000000 E			call GotoXY
 00000079  E8 00000000 E			call WriteChar
 0000007E  80 C2 68				add dl, LARGURA-1	;pula para a esquerda
 00000081  E8 00000000 E			call GotoXY
 00000086  E8 00000000 E			call WriteChar
 0000008B  80 EA 68				sub dl, LARGURA-1	;volta para a direita
 0000008E  FE C6				inc dh
 00000090  E2 E2			loop VERTICAL
					ret
 00000092  59		   *	    pop    ecx
 00000093  5A		   *	    pop    edx
 00000094  C3		   *	    ret    00000h
 00000095			Moldura ENDP

				;======================Desenha o Ganso Em Pe =======================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela
				;===================================================================
 00000095			DesenhaGansoEmPe PROC USES eax edx ecx
 00000095  50		   *	    push   eax
 00000096  52		   *	    push   edx
 00000097  51		   *	    push   ecx
 00000098  B8 0000000F			mov eax, white
 0000009D  E8 00000000 E		call SetTextColor
 000000A2  B2 01			mov dl,1
 000000A4  8A 35 00000018 R		mov dh,PosY
 000000AA  E8 00000000 E		call GotoXY
					;mov edx, OFFSET ganso
 000000AF  E8 00000000 E		call WriteString
					
					;redesenha moldura que é apagada
 000000B4  B8 00000002			mov eax, green
 000000B9  E8 00000000 E	    call SetTextColor
 000000BE  B2 01			mov dl, 1
 000000C0  8A 35 00000018 R		mov dh, PosY
 000000C6  B9 00000009			mov ecx, 9
 000000CB  B0 DB			mov al, 219
 000000CD				REMOLDURA:
 000000CD  E8 00000000 E			call GotoXY
 000000D2  E8 00000000 E			call WriteChar
 000000D7  FE C6				inc dh
 000000D9  E2 F2			loop REMOLDURA
				ret
 000000DB  59		   *	    pop    ecx
 000000DC  5A		   *	    pop    edx
 000000DD  58		   *	    pop    eax
 000000DE  C3		   *	    ret    00000h
 000000DF			DesenhaGansoEmPe ENDP
				;===================================================================

 000000DF			DesenhaGansoEmPE2 PROC USES edx eax
 000000DF  52		   *	    push   edx
 000000E0  50		   *	    push   eax
 000000E1  B8 0000000F			mov eax, white
 000000E6  E8 00000000 E		call SetTextColor
 000000EB  B2 19		    mov dl, 25
 000000ED  8A 35 00000018 R		mov dh, PosY
 000000F3  52				push edx
 000000F4  E8 00000000 E		call GotoXY
 000000F9  BA 00000263 R		mov edx, OFFSET ganso1
 000000FE  E8 00000000 E		call WriteString

 00000103  5A				pop edx
 00000104  B2 18		    mov dl, 24
 00000106  FE C6			inc dh
 00000108  E8 00000000 E		call GotoXY
 0000010D  52				push edx
 0000010E  BA 00000268 R		mov edx, OFFSET ganso2
 00000113  E8 00000000 E		call WriteString

 00000118  5A			    pop edx
 00000119  B2 17			mov dl, 23
 0000011B  FE C6			inc dh
 0000011D  E8 00000000 E		call GotoXY
 00000122  52				push edx
 00000123  BA 0000026F R		mov edx, OFFSET ganso3
 00000128  E8 00000000 E		call WriteString

 0000012D  5A				pop edx
 0000012E  B2 11			mov dl, 17
 00000130  FE C6			inc dh
 00000132  E8 00000000 E		call GotoXY
 00000137  52				push edx
 00000138  BA 00000276 R		mov edx, OFFSET ganso4
 0000013D  E8 00000000 E		call WriteString

 00000142  5A				pop edx
 00000143  B2 10			mov dl, 16
 00000145  FE C6			inc dh
 00000147  E8 00000000 E		call GotoXY
 0000014C  52				push edx
 0000014D  BA 00000283 R		mov edx, OFFSET ganso5
 00000152  E8 00000000 E		call WriteString	

 00000157  5A				pop edx
 00000158  B2 11			mov dl, 17
 0000015A  FE C6			inc dh
 0000015C  E8 00000000 E		call GotoXY
 00000161  52				push edx
 00000162  BA 00000290 R		mov edx, OFFSET ganso6
 00000167  E8 00000000 E		call WriteString

 0000016C  5A				pop edx
 0000016D  B2 13			mov dl, 19
 0000016F  FE C6			inc dh
 00000171  E8 00000000 E		call GotoXY
 00000176  52				push edx
 00000177  BA 0000029B R		mov edx, OFFSET ganso7
 0000017C  E8 00000000 E		call WriteString

 00000181  5A				pop edx
 00000182  B2 13			mov dl, 19
 00000184  FE C6			inc dh
 00000186  E8 00000000 E		call GotoXY
 0000018B  52				push edx
 0000018C  BA 000002A3 R		mov edx, OFFSET ganso8
 00000191  E8 00000000 E		call WriteString

 00000196  5A				pop edx
 00000197  B2 13			mov dl, 19
 00000199  FE C6			inc dh
 0000019B  E8 00000000 E		call GotoXY
 000001A0  52				push edx
 000001A1  BA 000002AB R		mov edx, OFFSET ganso9
 000001A6  E8 00000000 E		call WriteString 
 000001AB  5A				pop edx
					ret
 000001AC  58		   *	    pop    eax
 000001AD  5A		   *	    pop    edx
 000001AE  C3		   *	    ret    00000h
 000001AF			DesenhaGansoEmPE2 ENDP

 000001AF			DesenhaGansoAgachado2 PROC USES eax
 000001AF  50		   *	    push   eax
 000001B0  B8 0000000F		    mov eax, white
 000001B5  E8 00000000 E		call SetTextColor
 000001BA  B2 18		    mov dl, 24
 000001BC  8A 35 00000018 R		mov dh, PosY
 000001C2  52				push edx
 000001C3  E8 00000000 E		call GotoXY
 000001C8  BA 000002B1 R		mov edx, OFFSET ganso_agachado1
 000001CD  E8 00000000 E		call WriteString

 000001D2  5A				pop edx
 000001D3  B2 17		    mov dl, 23
 000001D5  FE C6			inc dh
 000001D7  E8 00000000 E		call GotoXY
 000001DC  52				push edx
 000001DD  BA 000002B6 R		mov edx, OFFSET ganso_agachado2
 000001E2  E8 00000000 E		call WriteString

 000001E7  5A				pop edx
 000001E8  B2 11			mov dl, 17
 000001EA  FE C6			inc dh
 000001EC  E8 00000000 E		call GotoXY
 000001F1  52				push edx
 000001F2  BA 000002BD R		mov edx, OFFSET ganso_agachado3
 000001F7  E8 00000000 E		call WriteString

 000001FC  5A				pop edx
 000001FD  B2 10			mov dl, 16
 000001FF  FE C6			inc dh
 00000201  E8 00000000 E		call GotoXY
 00000206  52				push edx
 00000207  BA 000002CA R		mov edx, OFFSET ganso_agachado4
 0000020C  E8 00000000 E		call WriteString

 00000211  5A				pop edx
 00000212  B2 12			mov dl, 18
 00000214  FE C6			inc dh
 00000216  E8 00000000 E		call GotoXY
 0000021B  52				push edx
 0000021C  BA 000002D9 R		mov edx, OFFSET ganso_agachado5
 00000221  E8 00000000 E		call WriteString	

 00000226  5A				pop edx
 00000227  B2 13			mov dl, 19
 00000229  FE C6			inc dh
 0000022B  E8 00000000 E		call GotoXY
 00000230  52				push edx
 00000231  BA 000002E6 R		mov edx, OFFSET ganso_agachado6
 00000236  E8 00000000 E		call WriteString

 0000023B  5A				pop edx
 0000023C  B2 13			mov dl, 19
 0000023E  FE C6			inc dh
 00000240  E8 00000000 E		call GotoXY
 00000245  52				push edx
 00000246  BA 000002F3 R		mov edx, OFFSET ganso_agachado7
 0000024B  E8 00000000 E		call WriteString
 00000250  5A				pop edx

					ret
 00000251  58		   *	    pop    eax
 00000252  C3		   *	    ret    00000h
					exit
 00000253  6A 00	   *	    push   +000000000h
 00000255  E8 00000000 E   *	    call   ExitProcess
 0000025A			DesenhaGansoAgachado2 ENDP

				;======================Desenha o Ganso agachado=====================
				;Recebe: PosY
				;Retorna: desenho do ganso na tela
				;===================================================================
 0000025A			DesenhaGansoAgachado PROC USES eax edx
 0000025A  50		   *	    push   eax
 0000025B  52		   *	    push   edx
 0000025C  B8 0000000F			mov eax, white
 00000261  E8 00000000 E		call SetTextColor
 00000266  B2 01			mov dl,1
 00000268  B6 16			mov dh,Y_GANSO_AGACHADO
 0000026A  E8 00000000 E		call GotoXY
					;mov edx, OFFSET ganso_agachado
 0000026F  E8 00000000 E		call WriteString
				ret
 00000274  5A		   *	    pop    edx
 00000275  58		   *	    pop    eax
 00000276  C3		   *	    ret    00000h
 00000277			DesenhaGansoAgachado ENDP
				;===================================================================

				;======================Deleta Desenho===============================
				;Recebe:PosX, PosY(ganso em pé = 20, obstaculo1 = 26, obstaculo2 = 19),
				;		larguraO, alturaO
				;Retorna:
				;===================================================================
 00000277			DeletaDesenho PROC USES edx eax ecx
 00000277  52		   *	    push   edx
 00000278  50		   *	    push   eax
 00000279  51		   *	    push   ecx
 0000027A  8A 15 00000019 R		mov dl, PosX
 00000280  8A 35 00000018 R		mov dh, PosY
 00000286  E8 00000000 E		call GotoXY
					
 0000028B  0F B6 0D			movzx ecx, alturaO   ; Nr de Linhas do Desenho
	   0000001B R
 00000292  B0 20			mov al, 32   ; Barra de Espaço
 00000294				LINHA:
 00000294  51					push ecx
 00000295  0F B6 0D				movzx ecx, larguraO   ; Nr de Colunas do Desenho
	   0000001A R
 0000029C					COLUNA:
 0000029C  E8 00000000 E				call WriteChar
 000002A1  E2 F9				loop COLUNA
 000002A3  59					pop ecx
 000002A4  FE C6				inc dh
 000002A6  E8 00000000 E			call GotoXY
 000002AB  E2 E7			loop LINHA

					ret
 000002AD  59		   *	    pop    ecx
 000002AE  58		   *	    pop    eax
 000002AF  5A		   *	    pop    edx
 000002B0  C3		   *	    ret    00000h
 000002B1			DeletaDesenho ENDP

				;=====================Desenha Obstaculo1============================
				;Recebe: PosX
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 000002B1			DesenhaObstaculo1 PROC USES ecx
 000002B1  51		   *	    push   ecx
 000002B2  B8 00000006			mov eax, brown
 000002B7  E8 00000000 E		call SetTextColor
 000002BC  8A 15 00000019 R		mov dl, PosX
 000002C2  B6 1A			mov dh, Y_OBSTACULO1
 000002C4  B0 21			mov al, "!"
 000002C6  B9 00000005			mov ecx, 5
 000002CB				CIMA:
 000002CB  E8 00000000 E			call GotoXY
 000002D0  E8 00000000 E			call WriteChar
 000002D5  FE C2				inc dl
 000002D7  E2 F2			loop CIMA
					
 000002D9  8A 15 00000019 R		mov dl, PosX
 000002DF  B6 1B			mov dh, 27
 000002E1  B9 00000002			mov ecx, 2
 000002E6				LADOS:
 000002E6  E8 00000000 E			call GotoXY
 000002EB  E8 00000000 E			call WriteChar
 000002F0  80 C2 04				add dl, 4
 000002F3  E8 00000000 E			call GotoXY
 000002F8  E8 00000000 E			call WriteChar
 000002FD  80 EA 04				sub dl, 4
 00000300  FE C6				inc dh
 00000302  E2 E2			loop LADOS
					ret
 00000304  59		   *	    pop    ecx
 00000305  C3		   *	    ret    00000h
 00000306			DesenhaObstaculo1 ENDP
				;====================================================================

				;=====================Desenha Obstaculo2============================
				;Recebe: PosXObstaculo2
				;Retorna: obstaculo desenhado na tela
				;===================================================================
 00000306			DesenhaObstaculo2 PROC USES ecx
 00000306  51		   *	    push   ecx
 00000307  B8 00000004			mov eax, red
 0000030C  E8 00000000 E		call SetTextColor
 00000311  80 05 00000019 R		add PosX, 1
	   01
 00000318  8A 15 00000019 R		mov dl, PosX
 0000031E  B6 13			mov dh, Y_OBSTACULO2
 00000320  FE 0D 00000019 R		dec PosX

 00000326  B0 2F			mov al, "/"
 00000328  E8 00000000 E		call GotoXY
 0000032D  E8 00000000 E		call WriteChar

 00000332  FE C6			inc dh
 00000334  FE CA			dec dl
 00000336  B0 78			mov al, "x"
 00000338  E8 00000000 E		call GotoXY
 0000033D  E8 00000000 E		call WriteChar

 00000342  FE C2			inc dl
 00000344  B0 2D			mov al, "-"
 00000346  B9 00000004			mov ecx, 4
 0000034B				L1: 
 0000034B  E8 00000000 E			call GotoXY
 00000350  E8 00000000 E			call WriteChar
 00000355  FE C2				inc dl
 00000357  E2 F2			loop L1

 00000359  FE C6			inc dh
 0000035B  80 EA 04			sub dl, 4
 0000035E  B0 5C			mov al, "\"
 00000360  E8 00000000 E		call GotoXY
 00000365  E8 00000000 E		call WriteChar
					ret
 0000036A  59		   *	    pop    ecx
 0000036B  C3		   *	    ret    00000h
 0000036C			DesenhaObstaculo2 ENDP
				;====================================================================

				;=========================Desenha Céu===============================
				;Recebe: nda
				;Retorna: dsenho do ceu do jogo na tela
				;===================================================================
 0000036C			DesenhaCeu PROC 
					;SOL
 0000036C  B8 0000000E			mov eax, yellow
 00000371  E8 00000000 E		call SetTextColor
 00000376  B2 01			mov dl, 1
 00000378  B6 03			mov dh, 3
 0000037A  E8 00000000 E		call GotoXY
 0000037F  BA 000004EF R		mov edx, OFFSET sol
 00000384  E8 00000000 E		call WriteString
					;NUVEM
 00000389  B8 0000000F			mov eax, white
 0000038E  E8 00000000 E		call SetTextColor
 00000393  B2 01			mov dl, 1
 00000395  B6 0A			mov dh, 10
 00000397  E8 00000000 E		call GotoXY
 0000039C  BA 000002FE R		mov edx, OFFSET nuvem
 000003A1  E8 00000000 E		call WriteString
 000003A6  C3				ret
 000003A7			DesenhaCeu ENDP
				;==================================================================

				;=======================Inicializa Jogo==============================
				;Recebe: nda
				;Retorna: Tela inicial do jogo
				;====================================================================
 000003A7			InicializaJogo PROC
 000003A7  E8 00000000 E		call Clrscr
 000003AC  C6 05 00000018 R		mov PosY, Y_GANSO_EM_PE
	   14
 000003B3  E8 FFFFFD27			call DesenhaGansoEmPE2
 000003B8  E8 FFFFFFAF			call DesenhaCeu
 000003BD  B8 00000002			mov eax, green	;cor da moldura
 000003C2  E8 FFFFFC72			call Moldura
					
 000003C7  E8 00000001			call CriaObstaculo
 000003CC  C3				ret
 000003CD			InicializaJogo ENDP
				;====================================================================

				;=====================Cria Obstaculo ================================
				;Gera os obstáculos de forma aleatória
				;Recebe: nda
				;Retorna: um obstáculo(ou nada) na tela
				;====================================================================
 000003CD			CriaObstaculo PROC
 000003CD  E8 00000000 E		call Randomize
 000003D2  B8 00000003			mov eax, 3
 000003D7  E8 00000000 E		call RandomRange
					.IF al == 1
 000003DC  3C 01	   *	    cmp    al, 001h
 000003DE  75 24	   *	    jne    @C0001
 000003E0  C6 05 00000019 R			mov PosX, 100
	   64
 000003E7  E8 FFFFFEC5				call DesenhaObstaculo1
 000003EC  0F B6 1D				movzx ebx, CtrlObs1
	   0000002B R
 000003F3  C6 83 0000001D R			mov PosObs1[ebx], 100
	   64
 000003FA  FE 05 0000002B R			inc CtrlObs1
 00000400  EB 28				jmp FIM
					.ELSEIF al == 2
 00000402  EB 26	   *	    jmp    @C0003
 00000404		   *@C0001:
 00000404  3C 02	   *	    cmp    al, 002h
 00000406  75 22	   *	    jne    @C0004
 00000408  C6 05 00000019 R			mov PosX, 99
	   63
 0000040F  E8 FFFFFEF2				call DesenhaObstaculo2
 00000414  0F B6 1D				movzx ebx, CtrlObs2
	   0000002C R
 0000041B  C6 83 00000024 R			mov PosObs2[ebx], 100
	   64
 00000422  FE 05 0000002C R			inc CtrlObs2
 00000428  EB 00				jmp FIM
					.ENDIF
 0000042A		   *@C0004:
 0000042A		   *@C0003:
 0000042A				FIM:
 0000042A  C3				ret
 0000042B			CriaObstaculo ENDP
				;====================================================================

				;=======================JOGO=========================================
				;Rotina do jogo. Faz a leitura da tecla de salto(W) e chama os 
				;procedimentos de movimentação e criação de obstaculos
				;Recebe: nda
				;Retorna: jogo na tela
				;====================================================================
 0000042B			Jogo PROC
 0000042B				JOGO_LOOP:
 0000042B  B8 00000032				mov eax, 50
 00000430  E8 00000000 E			call Delay
 00000435  E8 00000000 E			call ReadKey
 0000043A  83 05 00000008 R			add contadorTempo, 50
	   32
 00000441  83 05 0000000C R			add contadorObstaculo, 50
	   32
 00000448  83 05 00000010 R			add contadorPulo, 50
	   32
 0000044F  83 05 00000014 R			add contadorAgacha, 50
	   32
						
						.IF al == "w"        ;Faz o Ganso Pular
 00000456  3C 77	   *	    cmp    al, 'w'
 00000458  75 4C	   *	    jne    @C0006
							;Deletando o Desenho do Ganso
 0000045A  C6 05 0000001C R				mov statusGanso, 2
	   02
 00000461  C6 05 00000019 R				mov PosX,16
	   10
 00000468  C6 05 00000018 R				mov PosY, Y_GANSO_EM_PE
	   14
 0000046F  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 00000476  C6 05 0000001B R				mov alturaO,ALTURA_GANSO
	   09
 0000047D  E8 FFFFFDF5					call DeletaDesenho
							;Desenhando o Ganso no Ar
 00000482  C6 05 00000018 R				mov PosY, Y_GANSO_PULANDO
	   0F
 00000489  C7 05 00000010 R				mov contadorPulo, 0
	   00000000
 00000493  C7 05 00000014 R				mov contadorAgacha, 0
	   00000000
 0000049D  E8 FFFFFC3D					call DesenhaGansoEmPe2
 000004A2  EB 6F					jmp DELAY_MOVIMENTO
						
						.ELSEIF al ==  "s"    ;Faz o Ganso Agachar
 000004A4  EB 6D	   *	    jmp    @C0008
 000004A6		   *@C0006:
 000004A6  3C 73	   *	    cmp    al, 's'
 000004A8  75 69	   *	    jne    @C0009
							;Deletando o Desenho do Ganso
 000004AA  C6 05 00000019 R				mov PosX,16
	   10
 000004B1  80 3D 0000001C R				cmp statusGanso, 2
	   02
 000004B8  75 09					jne NPULANDO
 000004BA  C6 05 00000018 R					mov PosY, Y_GANSO_PULANDO
	   0F
 000004C1  EB 14						jmp DELETA_
 000004C3						NPULANDO:
 000004C3  80 3D 0000001C R				cmp statusGanso, 1
	   01
 000004CA  75 09					jne AGACHADO_
 000004CC  C6 05 00000018 R					mov PosY, Y_GANSO_EM_PE
	   14
 000004D3  EB 02						jmp DELETA_
 000004D5						AGACHADO_:
 000004D5  EB 3C						jmp DELAY_MOVIMENTO
 000004D7						DELETA_:
 000004D7  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 000004DE  C6 05 0000001B R				mov alturaO,ALTURA_GANSO
	   09
 000004E5  E8 FFFFFD8D					call DeletaDesenho
							;Desenhando o Ganso Agachado
 000004EA  C6 05 00000018 R				mov PosY, Y_GANSO_AGACHADO
	   16
 000004F1  C7 05 00000014 R				mov contadorAgacha, 0
	   00000000
 000004FB  C7 05 00000010 R				mov contadorPulo, 0
	   00000000
 00000505  E8 FFFFFCA5					call DesenhaGansoAgachado2
 0000050A  C6 05 0000001C R				mov statusGanso, 0
	   00
 00000511  EB 00					jmp DELAY_MOVIMENTO
							
						.ENDIF
 00000513		   *@C0009:
 00000513		   *@C0008:
						
 00000513					DELAY_MOVIMENTO:
						.IF contadorPulo == 1500 && statusGanso == 2
 00000513  81 3D 00000010 R
	   000005DC	   *	    cmp    contadorPulo, 005DCh
 0000051D  75 49	   *	    jne    @C000B
 0000051F  80 3D 0000001C R
	   02		   *	    cmp    statusGanso, 002h
 00000526  75 40	   *	    jne    @C000B
							;Deleta o Ganso no Ar
 00000528  C6 05 0000001C R				mov statusGanso, 1
	   01
 0000052F  C6 05 00000019 R				mov PosX, 16
	   10
 00000536  C6 05 00000018 R				mov PosY, Y_GANSO_PULANDO
	   0F
 0000053D  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 00000544  C6 05 0000001B R				mov alturaO, ALTURA_GANSO
	   09
 0000054B  E8 FFFFFD27					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 00000550  C6 05 00000018 R				mov PosY, Y_GANSO_EM_PE
	   14
 00000557  E8 FFFFFB83					call DesenhaGansoEmPe2
							
 0000055C  C7 05 00000010 R				mov contadorPulo, 0
	   00000000
 00000566  EB 00					jmp DELAY_MOVIMENTO2
						.ENDIF
 00000568		   *@C000B:

 00000568					DELAY_MOVIMENTO2:
						.IF contadorAgacha == 1500 && statusGanso == 0
 00000568  81 3D 00000014 R
	   000005DC	   *	    cmp    contadorAgacha, 005DCh
 00000572  75 49	   *	    jne    @C000E
 00000574  80 3D 0000001C R
	   00		   *	    cmp    statusGanso, 000h
 0000057B  75 40	   *	    jne    @C000E
							;Deleta o Ganso agachado
 0000057D  C6 05 0000001C R				mov statusGanso, 1
	   01
 00000584  C6 05 00000019 R				mov PosX, 16
	   10
 0000058B  C6 05 00000018 R				mov PosY, Y_GANSO_AGACHADO
	   16
 00000592  C6 05 0000001A R				mov larguraO, LARGURA_GANSO
	   0C
 00000599  C6 05 0000001B R				mov alturaO, ALTURA_GANSO
	   09
 000005A0  E8 FFFFFCD2					call DeletaDesenho
							;Desenha o Ganso de volta ao chao
 000005A5  C6 05 00000018 R				mov PosY, Y_GANSO_EM_PE
	   14
 000005AC  E8 FFFFFB2E					call DesenhaGansoEmPe2
							
 000005B1  C7 05 00000014 R				mov contadorAgacha, 0
	   00000000
 000005BB  EB 00					jmp ATUALIZA_OBSTACULOS
						.ENDIF
 000005BD		   *@C000E:
						
 000005BD					ATUALIZA_OBSTACULOS:
						.IF contadorTempo == 500
 000005BD  81 3D 00000008 R
	   000001F4	   *	    cmp    contadorTempo, 001F4h
 000005C7  75 11	   *	    jne    @C0011
 000005C9  E8 00000032					call AtualizaObstaculos
 000005CE  C7 05 00000008 R				mov contadorTempo, 0
	   00000000
 000005D8  EB 00					jmp OBSTACULOS
						.ENDIF
 000005DA		   *@C0011:

 000005DA					OBSTACULOS:
						.IF contadorObstaculo >= 2500
 000005DA  81 3D 0000000C R
	   000009C4	   *	    cmp    contadorObstaculo, 009C4h
 000005E4  72 14	   *	    jb	@C0013
 000005E6  E8 FFFFFDE2					call CriaObstaculo
 000005EB  C7 05 0000000C R				mov contadorObstaculo, 0
	   00000000
 000005F5  E9 FFFFFE31					jmp JOGO_LOOP
						.ENDIF
 000005FA		   *@C0013:
 000005FA  E9 FFFFFE2C			jmp JOGO_LOOP

 000005FF  C3				ret
 00000600			Jogo ENDP
				;====================================================================

				;=======================Atualiza Obstaculos==========================
				;Atualiza posição de todos os obstáculos desenhados na tela
				;Recebe: Lista com posição dos obstáculos existentes
				;Retorna: Lista de posições atualizada
				;====================================================================
 00000600			AtualizaObstaculos PROC USES ecx
					;Obstaculos do tipo 1 =============================
 00000600  51		   *	    push   ecx
 00000601  B9 00000000			mov ecx, 0
 00000606  8A 0D 0000002B R		mov cl, CtrlObs1
 0000060C  80 F9 00			cmp cl, 0
 0000060F  74 6D			je TIPO2	;Se não existir obstáculo do tipo 1 pula para tipo 2
 00000611				PERCORRE1:
						;Deletando objeto1 da posição PosObs1[ecx]
 00000611  49					dec ecx
 00000612  8A 99 0000001D R			mov bl, PosObs1[ecx]
 00000618  88 1D 00000019 R			mov PosX, bl
 0000061E  C6 05 00000018 R			mov PosY, Y_OBSTACULO1
	   1A
 00000625  C6 05 0000001A R			mov larguraO, LARGURA_OBJ1
	   05
 0000062C  C6 05 0000001B R			mov alturaO, ALTURA_OBJ1
	   03
 00000633  E8 FFFFFC3F				call DeletaDesenho

						;Desenhando na nova posição
						.IF PosX >= 6 
 00000638  80 3D 00000019 R
	   06		   *	    cmp    PosX, 006h
 0000063F  72 22	   *	    jb	@C0015
 00000641  80 2D 00000019 R				sub PosX, 5
	   05
 00000648  8A 1D 00000019 R				mov bl, PosX
 0000064E  88 99 0000001D R				mov PosObs1[ecx], bl
 00000654  88 1D 00000019 R				mov PosX, bl
 0000065A  E8 FFFFFC52					call DesenhaObstaculo1
 0000065F  EB 1A					jmp INCREMENTA1
						.ELSE
 00000661  EB 18	   *	    jmp    @C0017
 00000663		   *@C0015:
 00000663  BA 0000001D R				mov edx, OFFSET PosObs1
 00000668  FE 0D 0000002B R				dec CtrlObs1
 0000066E  8A 1D 0000002B R				mov bl, CtrlObs1
 00000674  E8 0000007F					call ShiftLeftVetorPosicao
 00000679  EB 78					jmp INCREMENTA2
						.ENDIF
 0000067B		   *@C0017:
 0000067B					INCREMENTA1:
 0000067B  41					inc ecx
 0000067C  E2 93			loop PERCORRE1
					;=================================================

					;Obstáculos do tipo 2 ============================
 0000067E				TIPO2:
 0000067E  8A 0D 0000002C R		mov cl, CtrlObs2
 00000684  80 F9 00			cmp cl, 0
 00000687  74 6D			je SAIR		;Se não existir obstáculo do tipo 2, sai
 00000689				PERCORRE2:
						;Deletando objeto2 da posição PosObs2[ecx]
 00000689  49					dec ecx
 0000068A  8A 99 00000024 R			mov bl, PosObs2[ecx]
 00000690  88 1D 00000019 R			mov PosX, bl
 00000696  C6 05 00000018 R			mov PosY, Y_OBSTACULO2
	   13
 0000069D  C6 05 0000001A R			mov larguraO, LARGURA_OBJ2
	   05
 000006A4  C6 05 0000001B R			mov alturaO, ALTURA_OBJ2
	   03
 000006AB  E8 FFFFFBC7				call DeletaDesenho

						;Desenhando na nova posição
						.IF PosX >= 6
 000006B0  80 3D 00000019 R
	   06		   *	    cmp    PosX, 006h
 000006B7  72 22	   *	    jb	@C0018
 000006B9  80 2D 00000019 R				sub PosX, 5
	   05
 000006C0  8A 1D 00000019 R				mov bl, PosX
 000006C6  88 99 00000024 R				mov PosObs2[ecx], bl
 000006CC  88 1D 00000019 R				mov PosX, bl
 000006D2  E8 FFFFFC2F					call DesenhaObstaculo2
 000006D7  EB 1A					jmp INCREMENTA2
						.ELSE
 000006D9  EB 18	   *	    jmp    @C001A
 000006DB		   *@C0018:
 000006DB  BA 00000024 R				mov edx, OFFSET PosObs2
 000006E0  FE 0D 0000002C R				dec CtrlObs2
 000006E6  8A 1D 0000002C R				mov bl, CtrlObs2
 000006EC  E8 00000007					call ShiftLeftVetorPosicao
 000006F1  EB 00					jmp INCREMENTA2
						.ENDIF
 000006F3		   *@C001A:
 000006F3					INCREMENTA2:
 000006F3  41					inc ecx
 000006F4  E2 93			loop PERCORRE2
					;=================================================

 000006F6				SAIR:
					ret
 000006F6  59		   *	    pop    ecx
 000006F7  C3		   *	    ret    00000h
 000006F8			AtualizaObstaculos ENDP
				;====================================================================

				;=====================Shift Vetor Posição=========================
				;Recebe: edx = OFFSET do Vetor, ebx = numero de elementos do vetor -1
				;retorna: 
				;====================================================================
 000006F8			ShiftLeftVetorPosicao PROC USES ecx ebx edx
 000006F8  51		   *	    push   ecx
 000006F9  53		   *	    push   ebx
 000006FA  52		   *	    push   edx
 000006FB  8B CB			mov ecx, ebx
 000006FD  83 F9 00			cmp ecx, 0
 00000700  74 0B			je EXCEPTION_ ;Se ecx = 0 loop não funciona corretamente
 00000702				PERCORRE:
 00000702  42					inc edx
 00000703  8A 1A				mov bl, [edx]
 00000705  4A					dec edx
 00000706  88 1A				mov [edx], bl 
 00000708  42					inc edx
 00000709  E2 F7			loop PERCORRE
 0000070B  EB 07			jmp SAIR

 0000070D				EXCEPTION_:
 0000070D  42					inc edx
 0000070E  8A 1A				mov bl, [edx]
 00000710  4A					dec edx
 00000711  88 1A				mov [edx], bl 
 00000713  42					inc edx
 00000714				SAIR:
					ret
 00000714  5A		   *	    pop    edx
 00000715  5B		   *	    pop    ebx
 00000716  59		   *	    pop    ecx
 00000717  C3		   *	    ret    00000h
 00000718			ShiftLeftVetorPosicao ENDP
				;====================================================================

 00000718			main PROC
					;INVOKE GetStdHandle,STD_OUTPUT_HANDLE 
					;mov outHandle, eax										;DESCOBRIR O QUE FAZ (???)
					;INVOKE SetConsoleScreenBufferSize,outHandle,scrSize
 00000718  E8 00000000 E		call Clrscr
					
					;Desenha menu
 0000071D  E8 FFFFF8DE			call DesenhaMenu  
 00000722  B8 00000004			mov eax, red     ;cor da moldura
 00000727  E8 FFFFF90D			call Moldura

					;Esperando tecla ser pressionada
 0000072C				EsperandoTecla:
 0000072C  B8 00000032				mov  eax,50          ; sleep, to allow OS to time slice
 00000731  E8 00000000 E			call Delay           ; (otherwise, some key presses are lost)
 00000736  E8 00000000 E			call ReadKey         ; look for keyboard input 
 0000073B  52					push edx

					.IF al == "1"
 0000073C  3C 31	   *	    cmp    al, '1'
 0000073E  75 0E	   *	    jne    @C001B
						;TODO jogo fácil
 00000740  E8 FFFFFC62				call InicializaJogo
 00000745  E8 FFFFFCE1				call Jogo
 0000074A  EB 21				jmp SAIR
					.ELSEIF al == "2"
 0000074C  EB 1D	   *	    jmp    @C001D
 0000074E		   *@C001B:
 0000074E  3C 32	   *	    cmp    al, '2'
 00000750  75 0E	   *	    jne    @C001E
						;TODO jogo dificil
 00000752  E8 00000000 E			call Clrscr
 00000757  E8 FFFFF8DD				call moldura
 0000075C  EB 0F				jmp SAIR
					.ELSEIF al == VK_ESCAPE
 0000075E  EB 0B	   *	    jmp    @C0020
 00000760		   *@C001E:
 00000760  3C 1B	   *	    cmp    al, VK_ESCAPE
 00000762  75 07	   *	    jne    @C0021
						exit
 00000764  6A 00	   *	    push   +000000000h
 00000766  E8 00000000 E   *	    call   ExitProcess
					.ENDIF
 0000076B		   *@C0021:
 0000076B		   *@C0020:
 0000076B		   *@C001D:
					
 0000076B  EB BF			jmp   EsperandoTecla    ; nenhuma tecla válida pressionada, tenta novamente
 0000076D			SAIR:
 0000076D  B6 28			mov dh, 40
 0000076F  E8 00000000 E		call GotoXY
					exit
 00000774  6A 00	   *	    push   +000000000h
 00000776  E8 00000000 E   *	    call   ExitProcess
 0000077B			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.16.27030.1	    06/14/19 18:50:49
jogo.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000005A3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000077B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AtualizaObstaculos . . . . . . .	P Near	 00000600 _TEXT	Length= 000000F8 Public STDCALL
  PERCORRE1  . . . . . . . . . .	L Near	 00000611 _TEXT	
  INCREMENTA1  . . . . . . . . .	L Near	 0000067B _TEXT	
  TIPO2  . . . . . . . . . . . .	L Near	 0000067E _TEXT	
  PERCORRE2  . . . . . . . . . .	L Near	 00000689 _TEXT	
  INCREMENTA2  . . . . . . . . .	L Near	 000006F3 _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 000006F6 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CriaObstaculo  . . . . . . . . .	P Near	 000003CD _TEXT	Length= 0000005E Public STDCALL
  FIM  . . . . . . . . . . . . .	L Near	 0000042A _TEXT	
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeletaDesenho  . . . . . . . . .	P Near	 00000277 _TEXT	Length= 0000003A Public STDCALL
  LINHA  . . . . . . . . . . . .	L Near	 00000294 _TEXT	
  COLUNA . . . . . . . . . . . .	L Near	 0000029C _TEXT	
DesenhaCeu . . . . . . . . . . .	P Near	 0000036C _TEXT	Length= 0000003B Public STDCALL
DesenhaGansoAgachado2  . . . . .	P Near	 000001AF _TEXT	Length= 000000AB Public STDCALL
DesenhaGansoAgachado . . . . . .	P Near	 0000025A _TEXT	Length= 0000001D Public STDCALL
DesenhaGansoEmPE2  . . . . . . .	P Near	 000000DF _TEXT	Length= 000000D0 Public STDCALL
DesenhaGansoEmPe . . . . . . . .	P Near	 00000095 _TEXT	Length= 0000004A Public STDCALL
  REMOLDURA  . . . . . . . . . .	L Near	 000000CD _TEXT	
DesenhaMenu  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000039 Public STDCALL
DesenhaObstaculo1  . . . . . . .	P Near	 000002B1 _TEXT	Length= 00000055 Public STDCALL
  CIMA . . . . . . . . . . . . .	L Near	 000002CB _TEXT	
  LADOS  . . . . . . . . . . . .	L Near	 000002E6 _TEXT	
DesenhaObstaculo2  . . . . . . .	P Near	 00000306 _TEXT	Length= 00000066 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000034B _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InicializaJogo . . . . . . . . .	P Near	 000003A7 _TEXT	Length= 00000026 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Jogo . . . . . . . . . . . . . .	P Near	 0000042B _TEXT	Length= 000001D5 Public STDCALL
  JOGO_LOOP  . . . . . . . . . .	L Near	 0000042B _TEXT	
  NPULANDO . . . . . . . . . . .	L Near	 000004C3 _TEXT	
  AGACHADO_  . . . . . . . . . .	L Near	 000004D5 _TEXT	
  DELETA_  . . . . . . . . . . .	L Near	 000004D7 _TEXT	
  DELAY_MOVIMENTO  . . . . . . .	L Near	 00000513 _TEXT	
  DELAY_MOVIMENTO2 . . . . . . .	L Near	 00000568 _TEXT	
  ATUALIZA_OBSTACULOS  . . . . .	L Near	 000005BD _TEXT	
  OBSTACULOS . . . . . . . . . .	L Near	 000005DA _TEXT	
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Moldura  . . . . . . . . . . . .	P Near	 00000039 _TEXT	Length= 0000005C Public STDCALL
  INFERIOR . . . . . . . . . . .	L Near	 0000004D _TEXT	
  HORIZONTAL . . . . . . . . . .	L Near	 00000056 _TEXT	
  VERTICAL . . . . . . . . . . .	L Near	 00000074 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShiftLeftVetorPosicao  . . . . .	P Near	 000006F8 _TEXT	Length= 00000020 Public STDCALL
  PERCORRE . . . . . . . . . . .	L Near	 00000702 _TEXT	
  EXCEPTION_ . . . . . . . . . .	L Near	 0000070D _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 00000714 _TEXT	
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000718 _TEXT	Length= 00000063 Public STDCALL
  EsperandoTecla . . . . . . . .	L Near	 0000072C _TEXT	
  SAIR . . . . . . . . . . . . .	L Near	 0000076D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALTURA_GANSO_AGACHADO  . . . . .	Number	 00000007h   
ALTURA_GANSO . . . . . . . . . .	Number	 00000009h   
ALTURA_OBJ1  . . . . . . . . . .	Number	 00000003h   
ALTURA_OBJ2  . . . . . . . . . .	Number	 00000003h   
ALTURA . . . . . . . . . . . . .	Number	 0000001Eh   
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
CtrlObs1 . . . . . . . . . . . .	Byte	 0000002B _DATA	
CtrlObs2 . . . . . . . . . . . .	Byte	 0000002C _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LARGURA_GANSO  . . . . . . . . .	Number	 0000000Ch   
LARGURA_OBJ1 . . . . . . . . . .	Number	 00000005h   
LARGURA_OBJ2 . . . . . . . . . .	Number	 00000005h   
LARGURA  . . . . . . . . . . . .	Number	 00000069h   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
PosObs1  . . . . . . . . . . . .	Byte	 0000001D _DATA	
PosObs2  . . . . . . . . . . . .	Byte	 00000024 _DATA	
PosX . . . . . . . . . . . . . .	Byte	 00000019 _DATA	
PosY . . . . . . . . . . . . . .	Byte	 00000018 _DATA	
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
Y_GANSO_AGACHADO . . . . . . . .	Number	 00000016h   
Y_GANSO_EM_PE  . . . . . . . . .	Number	 00000014h   
Y_GANSO_PULANDO  . . . . . . . .	Number	 0000000Fh   
Y_OBSTACULO1 . . . . . . . . . .	Number	 0000001Ah   
Y_OBSTACULO2 . . . . . . . . . .	Number	 00000013h   
alturaO  . . . . . . . . . . . .	Byte	 0000001B _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
contadorAgacha . . . . . . . . .	DWord	 00000014 _DATA	
contadorObstaculo  . . . . . . .	DWord	 0000000C _DATA	
contadorPulo . . . . . . . . . .	DWord	 00000010 _DATA	
contadorTempo  . . . . . . . . .	DWord	 00000008 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
ganso1 . . . . . . . . . . . . .	Byte	 00000263 _DATA	
ganso2 . . . . . . . . . . . . .	Byte	 00000268 _DATA	
ganso3 . . . . . . . . . . . . .	Byte	 0000026F _DATA	
ganso4 . . . . . . . . . . . . .	Byte	 00000276 _DATA	
ganso5 . . . . . . . . . . . . .	Byte	 00000283 _DATA	
ganso6 . . . . . . . . . . . . .	Byte	 00000290 _DATA	
ganso7 . . . . . . . . . . . . .	Byte	 0000029B _DATA	
ganso8 . . . . . . . . . . . . .	Byte	 000002A3 _DATA	
ganso9 . . . . . . . . . . . . .	Byte	 000002AB _DATA	
ganso_agachado1  . . . . . . . .	Byte	 000002B1 _DATA	
ganso_agachado2  . . . . . . . .	Byte	 000002B6 _DATA	
ganso_agachado3  . . . . . . . .	Byte	 000002BD _DATA	
ganso_agachado4  . . . . . . . .	Byte	 000002CA _DATA	
ganso_agachado5  . . . . . . . .	Byte	 000002D9 _DATA	
ganso_agachado6  . . . . . . . .	Byte	 000002E6 _DATA	
ganso_agachado7  . . . . . . . .	Byte	 000002F3 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
larguraO . . . . . . . . . . . .	Byte	 0000001A _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
logo . . . . . . . . . . . . . .	Byte	 0000002D _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menu . . . . . . . . . . . . . .	Byte	 000001C9 _DATA	
nuvem  . . . . . . . . . . . . .	Byte	 000002FE _DATA	
outHandle  . . . . . . . . . . .	DWord	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
scrSize  . . . . . . . . . . . .	COORD	 00000004 _DATA	
sol  . . . . . . . . . . . . . .	Byte	 000004EF _DATA	
statusGanso  . . . . . . . . . .	Byte	 0000001C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
